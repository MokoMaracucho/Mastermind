13:36:49.953 [main] [30mTRACE[m  - #######################################
13:36:49.957 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
13:36:49.958 [main] [30mTRACE[m  - #######################################
13:36:49.958 [main] [30mTRACE[m  - ######################################################################################
13:36:49.958 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
13:36:49.958 [main] [30mTRACE[m  - ######################################################################################
13:36:49.958 [main] [30mTRACE[m  - #############################################
13:36:49.959 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
13:36:49.959 [main] [30mTRACE[m  - #############################################
13:36:49.961 [main] [30mTRACE[m  - ###########################################
13:36:49.961 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
13:36:49.961 [main] [30mTRACE[m  - ###########################################

13:36:49.962 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
13:36:49.963 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
13:36:49.964 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
13:36:49.964 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
13:36:49.965 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
13:36:49.965 [main] [30mTRACE[m  - #########################################################
13:36:49.965 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
13:36:49.965 [main] [30mTRACE[m  - #########################################################
13:36:49.966 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
13:36:49.966 [main] [32mINFO [m  - FOR - Lancement boucle infini
13:36:49.967 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
13:36:49.967 [main] [32mINFO [m  - IF - Premier tour
13:36:52.504 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
13:36:52.504 [main] [30mTRACE[m  - ###########################################################
13:36:52.504 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
13:36:52.504 [main] [30mTRACE[m  - ###########################################################
13:36:52.505 [main] [30mTRACE[m  - #######################################
13:36:52.505 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
13:36:52.505 [main] [30mTRACE[m  - #######################################
13:36:52.505 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
13:36:52.505 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
13:36:52.506 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
13:36:53.332 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:53.340 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:53.341 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:36:56.892 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:36:56.893 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
13:36:56.895 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
13:36:56.896 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:36:56.896 [main] [32mINFO [m  - CASE - "Games"
13:36:56.897 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:36:56.897 [main] [32mINFO [m  - CASE - 'R'
13:36:57.103 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
13:36:57.104 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
13:36:57.104 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:36:57.916 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:57.916 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:57.916 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:36:58.978 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:36:58.979 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:36:58.980 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
13:36:58.980 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:36:58.980 [main] [32mINFO [m  - CASE - "Comfirm"
13:36:58.980 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:36:58.981 [main] [32mINFO [m  - CASE - 'O'
13:36:58.983 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:36:58.984 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
13:36:58.984 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
13:36:58.984 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
13:36:59.998 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:59.998 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:59.998 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:37:04.921 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:37:04.924 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 1
13:37:04.927 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 1
13:37:04.927 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:37:04.927 [main] [32mINFO [m  - CASE - "Modes"
13:37:04.927 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:37:04.927 [main] [32mINFO [m  - CASE - '1'
13:37:05.133 [main] [36mDEBUG[m  - M√†J - (String) Choix : Challenger
13:37:05.134 [main] [36mDEBUG[m  - str_ModeChoise : Challenger
13:37:05.134 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:37:05.946 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:37:05.946 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:37:05.946 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:37:06.990 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:37:06.991 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:37:06.992 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
13:37:06.993 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:37:06.993 [main] [32mINFO [m  - CASE - "Comfirm"
13:37:06.993 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:37:06.994 [main] [32mINFO [m  - CASE - 'O'
13:37:06.995 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:37:06.996 [main] [36mDEBUG[m  - str_ConfirmChoise : O
13:37:06.997 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
13:37:06.998 [main] [36mDEBUG[m  - (String) Choix du mode : Challenger
13:37:09.274 [main] [30mTRACE[m  - #####################################
13:37:09.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
13:37:09.274 [main] [30mTRACE[m  - #####################################

13:37:09.274 [main] [30mTRACE[m  - ################################################################################################
13:37:09.274 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
13:37:09.274 [main] [30mTRACE[m  - ################################################################################################
13:37:09.275 [main] [32mINFO [m  - SWITCH - Choix du jeu
13:37:09.275 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
13:37:09.291 [main] [32mINFO [m  - Instance "recherchePlusMoins"
13:37:09.291 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
13:37:09.291 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
13:37:09.291 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
13:37:09.292 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
13:37:09.293 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
13:37:09.293 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
13:37:09.293 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
13:37:09.294 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
13:37:09.295 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
13:37:09.296 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
13:37:09.296 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
13:37:09.296 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
13:37:09.296 [main] [32mINFO [m  - Lancement du compteur de tours
13:37:09.297 [main] [30mTRACE[m  - ###############################
13:37:09.297 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:09.297 [main] [30mTRACE[m  - ###############################
13:37:09.297 [main] [32mINFO [m  - // IF - Premier tour
13:37:09.503 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.504 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 0, 0, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 0, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.506 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 0, 0, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 0, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 6, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:09.508 [main] [36mDEBUG[m  - Nombre al√©atoire g√©n√©r√© : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:09.509 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te al√©atoire : [I@4bc222e
13:37:10.729 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:10.731 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:10.738 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:10.740 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:10.741 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:10.743 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:10.744 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:10.946 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:10.947 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:10.947 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:10.947 [main] [32mINFO [m  - try
13:37:13.378 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:13.378 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:13.379 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:13.380 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:13.380 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:13.381 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:13.382 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:13.383 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:13.384 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:13.385 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:13.386 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:13.386 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:13.387 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:13.387 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:13.389 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:13.389 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:13.390 [main] [36mDEBUG[m  - int_IStart : 7
13:37:13.399 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.399 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.603 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.604 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:13.604 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:13.604 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.606 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:13.814 [main] [30mTRACE[m  - ###############################
13:37:13.815 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:13.815 [main] [30mTRACE[m  - ###############################
13:37:13.815 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:13.815 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:13.816 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:13.816 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:13.816 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:14.021 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:14.021 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:14.022 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:14.023 [main] [32mINFO [m  - try
13:37:14.801 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:14.801 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:14.802 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:14.802 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:14.802 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:14.802 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:14.803 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:14.803 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:14.803 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:14.803 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:14.804 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:14.806 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:14.806 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:14.806 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:14.807 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:14.807 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:14.807 [main] [36mDEBUG[m  - int_IStart : 7
13:37:14.807 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:14.807 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:14.807 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:15.235 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:15.235 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:15.235 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:15.235 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:15.442 [main] [30mTRACE[m  - ###############################
13:37:15.444 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:15.445 [main] [30mTRACE[m  - ###############################
13:37:15.445 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:15.445 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:15.445 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:15.446 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:15.447 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:15.654 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:15.654 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:15.655 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:15.655 [main] [32mINFO [m  - try
13:37:16.058 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:16.058 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:16.058 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:16.059 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:16.059 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:16.060 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:16.060 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:16.060 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:16.060 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:16.064 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:16.064 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:16.064 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:16.064 [main] [36mDEBUG[m  - int_IStart : 7
13:37:16.064 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.064 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.064 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:16.471 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.471 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:16.472 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:16.472 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:16.678 [main] [30mTRACE[m  - ###############################
13:37:16.678 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:16.678 [main] [30mTRACE[m  - ###############################
13:37:16.678 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:16.679 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:16.679 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:16.679 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:16.679 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:16.884 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:16.884 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:16.884 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:16.884 [main] [32mINFO [m  - try
13:37:17.841 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:17.841 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:17.841 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:17.842 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:17.843 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:17.843 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:17.843 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:17.843 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:17.843 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:17.843 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:17.843 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:17.843 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:17.844 [main] [36mDEBUG[m  - int_IStart : 7
13:37:17.844 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:17.845 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:17.846 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:18.253 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:18.254 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:18.254 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:18.254 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:18.254 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.256 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:18.456 [main] [30mTRACE[m  - ###############################
13:37:18.456 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:18.457 [main] [30mTRACE[m  - ###############################
13:37:18.457 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:18.457 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:18.457 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:18.457 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:18.457 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:18.662 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:18.663 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:18.663 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:18.663 [main] [32mINFO [m  - try
13:37:19.569 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:19.570 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:19.570 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:19.570 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:19.570 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:19.571 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:19.571 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:19.571 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:19.571 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:19.572 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:19.572 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:19.572 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:19.572 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:19.572 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:19.573 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:19.575 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:19.575 [main] [36mDEBUG[m  - int_IStart : 7
13:37:19.575 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.575 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.575 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:19.984 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.984 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:19.984 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:19.984 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:20.189 [main] [30mTRACE[m  - ###############################
13:37:20.190 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:20.190 [main] [30mTRACE[m  - ###############################
13:37:20.190 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:20.190 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:20.191 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:20.191 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:20.191 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:20.396 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:20.396 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:20.396 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:20.396 [main] [32mINFO [m  - try
13:37:21.349 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:21.349 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:21.350 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:21.351 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:21.351 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:21.351 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:21.351 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:21.351 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:21.352 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:21.353 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:21.354 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:21.354 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:21.354 [main] [36mDEBUG[m  - int_IStart : 7
13:37:21.354 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.354 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.354 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:21.760 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.760 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:21.761 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:21.761 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:21.965 [main] [30mTRACE[m  - ###############################
13:37:21.965 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:21.965 [main] [30mTRACE[m  - ###############################
13:37:21.965 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:21.966 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:21.966 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:21.966 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:21.966 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:22.173 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:22.174 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:22.174 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:22.174 [main] [32mINFO [m  - try
13:37:23.088 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:23.096 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:23.097 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:23.097 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:23.097 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:23.098 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:23.098 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:23.098 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:23.099 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:23.100 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:23.100 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:23.100 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:23.100 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:23.100 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:23.100 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:23.100 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:23.101 [main] [36mDEBUG[m  - int_IStart : 7
13:37:23.101 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.101 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.101 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:23.507 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.507 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:23.508 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:23.508 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:23.714 [main] [30mTRACE[m  - ###############################
13:37:23.715 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:23.715 [main] [30mTRACE[m  - ###############################
13:37:23.715 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:23.715 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:23.715 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:23.715 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:23.715 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:23.920 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:23.920 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:23.921 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:23.921 [main] [32mINFO [m  - try
13:37:24.914 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:24.915 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:24.915 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:24.915 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:24.915 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:24.915 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:24.916 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:24.916 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:24.916 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:24.916 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:24.916 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:24.917 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:24.917 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:24.917 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:24.917 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:24.917 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:24.917 [main] [36mDEBUG[m  - int_IStart : 7
13:37:24.918 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:24.918 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:24.919 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:25.324 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:25.324 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:25.324 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:25.325 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:25.527 [main] [30mTRACE[m  - ###############################
13:37:25.528 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:25.528 [main] [30mTRACE[m  - ###############################
13:37:25.528 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:25.528 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:25.528 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:25.528 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:25.528 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:25.731 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:25.732 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:25.732 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:25.732 [main] [32mINFO [m  - try
13:37:26.484 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:26.484 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:26.485 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:26.485 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:26.485 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:26.486 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:26.488 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:26.489 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:26.489 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:26.490 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:26.490 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:26.490 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:26.490 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:26.490 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:26.491 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:26.491 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:26.491 [main] [36mDEBUG[m  - int_IStart : 7
13:37:26.491 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.491 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.491 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:26.897 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.898 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:26.898 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:26.898 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:27.104 [main] [30mTRACE[m  - ###############################
13:37:27.104 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:27.104 [main] [30mTRACE[m  - ###############################
13:37:27.104 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:27.105 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:27.105 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:27.105 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:27.105 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:27.310 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:27.310 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:27.311 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:27.311 [main] [32mINFO [m  - try
13:37:28.264 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:28.264 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:28.264 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:28.265 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:28.265 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:28.265 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:28.265 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:28.265 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:28.266 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:28.266 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:28.266 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:28.267 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:28.268 [main] [36mDEBUG[m  - int_IStart : 7
13:37:28.268 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.268 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.268 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:28.674 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.674 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:28.674 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:28.674 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:28.674 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.674 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:28.877 [main] [32mINFO [m  - IF - La partie n'est pas gagn√©e
13:37:28.878 [main] [32mINFO [m  - SWITCH - Mode du jeu "Recherche +/-"
13:37:28.878 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:31.112 [main] [30mTRACE[m  - #############################
13:37:31.112 [main] [30mTRACE[m  - ### END ### Mode "Challenger"
13:37:31.112 [main] [30mTRACE[m  - #############################
13:37:31.112 [main] [32mINFO [m  - Lancement du jeu "Recherche +/-"
13:37:31.112 [main] [30mTRACE[m  - ####################################################################
13:37:31.113 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
13:37:31.113 [main] [30mTRACE[m  - ####################################################################
13:37:31.519 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:37:31.519 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:37:31.519 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:11.680 [main] [30mTRACE[m  - #######################################
13:46:11.684 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
13:46:11.684 [main] [30mTRACE[m  - #######################################
13:46:11.685 [main] [30mTRACE[m  - ######################################################################################
13:46:11.685 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
13:46:11.685 [main] [30mTRACE[m  - ######################################################################################
13:46:11.685 [main] [30mTRACE[m  - #############################################
13:46:11.685 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
13:46:11.685 [main] [30mTRACE[m  - #############################################
13:46:11.687 [main] [30mTRACE[m  - ###########################################
13:46:11.687 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
13:46:11.687 [main] [30mTRACE[m  - ###########################################

13:46:11.688 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
13:46:11.689 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
13:46:11.689 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
13:46:11.690 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
13:46:11.691 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
13:46:11.692 [main] [30mTRACE[m  - #########################################################
13:46:11.692 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
13:46:11.692 [main] [30mTRACE[m  - #########################################################
13:46:11.692 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
13:46:11.693 [main] [32mINFO [m  - FOR - Lancement boucle infini
13:46:11.693 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
13:46:11.693 [main] [32mINFO [m  - IF - Premier tour
13:46:14.239 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
13:46:14.240 [main] [30mTRACE[m  - ###########################################################
13:46:14.240 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
13:46:14.240 [main] [30mTRACE[m  - ###########################################################
13:46:14.240 [main] [30mTRACE[m  - #######################################
13:46:14.240 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
13:46:14.241 [main] [30mTRACE[m  - #######################################
13:46:14.241 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
13:46:14.241 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
13:46:14.242 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
13:46:15.067 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:15.067 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:15.068 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:17.383 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:17.387 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
13:46:17.388 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
13:46:17.388 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:17.389 [main] [32mINFO [m  - CASE - "Games"
13:46:17.390 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:17.595 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
13:46:17.596 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
13:46:17.596 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:46:18.407 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:18.408 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:18.408 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:19.339 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:19.340 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:46:19.341 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
13:46:19.342 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:19.342 [main] [32mINFO [m  - CASE - "Comfirm"
13:46:19.343 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:19.343 [main] [32mINFO [m  - CASE - 'O'
13:46:19.344 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:46:19.344 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
13:46:19.345 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
13:46:19.345 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
13:46:20.358 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:20.358 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:20.359 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:24.604 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:24.609 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 1
13:46:24.611 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 1
13:46:24.612 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:24.613 [main] [32mINFO [m  - CASE - "Modes"
13:46:24.614 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:24.615 [main] [32mINFO [m  - CASE - '1'
13:46:24.817 [main] [36mDEBUG[m  - M√†J - (String) Choix : Challenger
13:46:24.817 [main] [36mDEBUG[m  - str_ModeChoise : Challenger
13:46:24.817 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:46:25.630 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:25.630 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:25.631 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:27.059 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:27.060 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:46:27.061 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
13:46:27.061 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:27.062 [main] [32mINFO [m  - CASE - "Comfirm"
13:46:27.063 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:27.063 [main] [32mINFO [m  - CASE - 'O'
13:46:27.064 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:46:27.065 [main] [36mDEBUG[m  - str_ConfirmChoise : O
13:46:27.066 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
13:46:27.067 [main] [36mDEBUG[m  - (String) Choix du mode : Challenger
13:46:29.330 [main] [30mTRACE[m  - #####################################
13:46:29.330 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
13:46:29.330 [main] [30mTRACE[m  - #####################################

13:46:29.331 [main] [30mTRACE[m  - ################################################################################################
13:46:29.331 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
13:46:29.331 [main] [30mTRACE[m  - ################################################################################################
13:46:29.331 [main] [32mINFO [m  - SWITCH - Choix du jeu
13:46:29.331 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
13:46:29.356 [main] [32mINFO [m  - Instance "Mastermind"
13:46:29.356 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
13:46:29.356 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
13:46:29.357 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:46:29.357 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
13:46:29.358 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
13:46:29.358 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:46:29.359 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
13:46:29.364 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
13:46:29.364 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
13:46:29.365 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:46:29.365 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:46:29.365 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:46:29.367 [main] [32mINFO [m  - Lancement du compteur de tours
13:46:29.367 [main] [30mTRACE[m  - ###############################
13:46:29.367 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:46:29.367 [main] [30mTRACE[m  - ###############################
13:46:29.367 [main] [30mTRACE[m  - ###################################################
13:46:29.368 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_array_ch_RandomLetter()
13:46:29.368 [main] [30mTRACE[m  - ###################################################
13:46:29.368 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
13:46:29.368 [main] [32mINFO [m  - Initialisation (char[]) Combinaison secr√®te
13:46:29.369 [main] [36mDEBUG[m  - Injection (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:46:29.369 [main] [30mTRACE[m  - #################################################
13:46:29.369 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_array_ch_RandomLetter()
13:46:29.369 [main] [30mTRACE[m  - #################################################

13:46:29.369 [main] [32mINFO [m  - G√©n√©ration de la combinaison secr√®te
13:46:29.369 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.370 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [0, 3, 2, 1, 1, 1]
13:46:30.814 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:46:30.815 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:46:30.815 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:46:30.815 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:46:30.815 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:46:31.016 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:46:31.016 [main] [30mTRACE[m  - #####################################
13:46:31.017 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:46:31.017 [main] [30mTRACE[m  - #####################################
13:46:31.018 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:46:31.018 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:05.103 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:05.106 [main] [32mINFO [m  - Instance "Pattern"
13:48:05.106 [main] [32mINFO [m  - Instance "Matcher"
13:48:05.106 [main] [32mINFO [m  - IF - Match
13:48:05.107 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:05.107 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:05.108 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:05.108 [main] [30mTRACE[m  - ###################################
13:48:05.108 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:05.109 [main] [30mTRACE[m  - ###################################

13:48:05.109 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:05.109 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:05.109 [main] [30mTRACE[m  - ##########################################
13:48:05.109 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:05.110 [main] [30mTRACE[m  - ##########################################
13:48:05.110 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:05.110 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:05.111 [main] [30mTRACE[m  - ########################################
13:48:05.111 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:05.111 [main] [30mTRACE[m  - ########################################

13:48:05.111 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:05.111 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:05.111 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:05.111 [main] [30mTRACE[m  - ##############################################
13:48:05.112 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:05.112 [main] [30mTRACE[m  - ##############################################
13:48:05.112 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:05.112 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:05.113 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:05.113 [main] [30mTRACE[m  - ##########################################
13:48:05.113 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:05.113 [main] [30mTRACE[m  - ##########################################

13:48:05.113 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:05.114 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:05.114 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:05.114 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:05.116 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:05.116 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:05.117 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:05.117 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:05.117 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:05.118 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:05.118 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:05.125 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:05.126 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:05.328 [main] [30mTRACE[m  - ####################################################
13:48:05.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:05.329 [main] [30mTRACE[m  - ####################################################
13:48:05.329 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:05.330 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:05.330 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:05.331 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:05.331 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:05.331 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:05.333 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:05.333 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:05.334 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:05.334 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:05.335 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.335 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.335 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.336 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.336 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.337 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:05.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.337 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:05.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:05.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:05.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:05.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.340 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:05.340 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.340 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.340 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:05.340 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.340 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.341 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:05.341 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.341 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.341 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:05.341 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.341 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.341 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:05.341 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.342 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.342 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:05.342 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.342 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.342 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:05.342 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.343 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:05.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.343 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.343 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:05.343 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:05.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:05.344 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:05.344 [main] [30mTRACE[m  - ##################################################
13:48:05.344 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:05.344 [main] [30mTRACE[m  - ##################################################

13:48:05.345 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:06.158 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:06.158 [main] [30mTRACE[m  - ###############################
13:48:06.159 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:06.159 [main] [30mTRACE[m  - ###############################
13:48:06.360 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:06.360 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:06.360 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:06.361 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:06.361 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:06.565 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:06.565 [main] [30mTRACE[m  - #####################################
13:48:06.566 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:06.566 [main] [30mTRACE[m  - #####################################
13:48:06.566 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:06.566 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:08.220 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:08.220 [main] [32mINFO [m  - Instance "Pattern"
13:48:08.220 [main] [32mINFO [m  - Instance "Matcher"
13:48:08.220 [main] [32mINFO [m  - IF - Match
13:48:08.220 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:08.220 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:08.221 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:08.221 [main] [30mTRACE[m  - ###################################
13:48:08.221 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:08.221 [main] [30mTRACE[m  - ###################################

13:48:08.221 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:08.221 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:08.221 [main] [30mTRACE[m  - ##########################################
13:48:08.221 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:08.222 [main] [30mTRACE[m  - ##########################################
13:48:08.222 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:08.224 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:08.224 [main] [30mTRACE[m  - ########################################
13:48:08.224 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:08.224 [main] [30mTRACE[m  - ########################################

13:48:08.224 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:08.224 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:08.224 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:08.224 [main] [30mTRACE[m  - ##############################################
13:48:08.225 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:08.225 [main] [30mTRACE[m  - ##############################################
13:48:08.225 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:08.225 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:08.225 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:08.225 [main] [30mTRACE[m  - ##########################################
13:48:08.225 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:08.226 [main] [30mTRACE[m  - ##########################################

13:48:08.226 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:08.226 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:08.226 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:08.227 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:08.227 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:08.228 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:08.229 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:08.230 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:08.230 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:08.230 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:08.230 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:08.231 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:08.231 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:08.436 [main] [30mTRACE[m  - ####################################################
13:48:08.436 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:08.436 [main] [30mTRACE[m  - ####################################################
13:48:08.436 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:08.436 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:08.437 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:08.437 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:08.438 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.439 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:08.439 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.439 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.439 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:08.439 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.439 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:08.440 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.440 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.440 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:08.440 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.440 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.440 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:08.440 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.440 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:08.441 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.441 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.441 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:08.441 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.441 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:08.442 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.442 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.442 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:08.442 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.442 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.442 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:08.442 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.442 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.443 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:08.443 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.443 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.443 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:08.443 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.444 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.444 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:08.444 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.444 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.444 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:08.445 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.445 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.445 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:08.445 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.445 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.445 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:08.445 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:08.446 [main] [30mTRACE[m  - ##################################################
13:48:08.446 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:08.446 [main] [30mTRACE[m  - ##################################################

13:48:08.446 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:09.254 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:09.254 [main] [30mTRACE[m  - ###############################
13:48:09.254 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:09.254 [main] [30mTRACE[m  - ###############################
13:48:09.461 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:09.461 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:09.461 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:09.461 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:09.461 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:09.662 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:09.662 [main] [30mTRACE[m  - #####################################
13:48:09.662 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:09.662 [main] [30mTRACE[m  - #####################################
13:48:09.663 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:09.663 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:10.903 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:10.903 [main] [32mINFO [m  - Instance "Pattern"
13:48:10.904 [main] [32mINFO [m  - Instance "Matcher"
13:48:10.904 [main] [32mINFO [m  - IF - Match
13:48:10.904 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:10.904 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:10.905 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:10.905 [main] [30mTRACE[m  - ###################################
13:48:10.905 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:10.906 [main] [30mTRACE[m  - ###################################

13:48:10.906 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:10.906 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:10.906 [main] [30mTRACE[m  - ##########################################
13:48:10.906 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:10.906 [main] [30mTRACE[m  - ##########################################
13:48:10.906 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:10.906 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:10.907 [main] [30mTRACE[m  - ########################################
13:48:10.907 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:10.908 [main] [30mTRACE[m  - ########################################

13:48:10.908 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:10.908 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:10.908 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:10.908 [main] [30mTRACE[m  - ##############################################
13:48:10.908 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:10.908 [main] [30mTRACE[m  - ##############################################
13:48:10.908 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:10.909 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:10.909 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:10.909 [main] [30mTRACE[m  - ##########################################
13:48:10.909 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:10.909 [main] [30mTRACE[m  - ##########################################

13:48:10.909 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:10.909 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:10.909 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:10.909 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:10.909 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:10.909 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:10.910 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:10.910 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:10.910 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:10.910 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:10.910 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:10.911 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:10.911 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:11.114 [main] [30mTRACE[m  - ####################################################
13:48:11.115 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:11.115 [main] [30mTRACE[m  - ####################################################
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:11.116 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:11.116 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:11.116 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:11.116 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:11.117 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.118 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.118 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:11.118 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.118 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.118 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:11.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.119 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:11.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.119 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:11.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:11.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:11.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:11.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.122 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.122 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:11.122 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.122 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.122 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:11.123 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.123 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.123 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:11.124 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.125 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.125 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:11.125 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.125 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.125 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:11.126 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.126 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.126 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:11.127 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.127 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.127 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:11.127 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.127 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.127 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:11.127 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.127 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.128 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:11.128 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:11.128 [main] [30mTRACE[m  - ##################################################
13:48:11.128 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:11.128 [main] [30mTRACE[m  - ##################################################

13:48:11.128 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:11.939 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:11.939 [main] [30mTRACE[m  - ###############################
13:48:11.939 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:11.940 [main] [30mTRACE[m  - ###############################
13:48:12.142 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:12.142 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:12.142 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:12.142 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:12.143 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:12.345 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:12.346 [main] [30mTRACE[m  - #####################################
13:48:12.346 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:12.346 [main] [30mTRACE[m  - #####################################
13:48:12.346 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:12.346 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:13.198 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:13.199 [main] [32mINFO [m  - Instance "Pattern"
13:48:13.199 [main] [32mINFO [m  - Instance "Matcher"
13:48:13.199 [main] [32mINFO [m  - IF - Match
13:48:13.199 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:13.199 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:13.199 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:13.199 [main] [30mTRACE[m  - ###################################
13:48:13.199 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:13.200 [main] [30mTRACE[m  - ###################################

13:48:13.200 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:13.200 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:13.200 [main] [30mTRACE[m  - ##########################################
13:48:13.200 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:13.200 [main] [30mTRACE[m  - ##########################################
13:48:13.200 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:13.200 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:13.200 [main] [30mTRACE[m  - ########################################
13:48:13.201 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:13.201 [main] [30mTRACE[m  - ########################################

13:48:13.202 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:13.203 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:13.203 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:13.203 [main] [30mTRACE[m  - ##############################################
13:48:13.203 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:13.203 [main] [30mTRACE[m  - ##############################################
13:48:13.203 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:13.204 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:13.204 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:13.204 [main] [30mTRACE[m  - ##########################################
13:48:13.204 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:13.204 [main] [30mTRACE[m  - ##########################################

13:48:13.205 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:13.205 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:13.205 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:13.205 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:13.205 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:13.206 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:13.206 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:13.206 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:13.208 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:13.208 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:13.208 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:13.208 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:13.208 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:13.413 [main] [30mTRACE[m  - ####################################################
13:48:13.414 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:13.414 [main] [30mTRACE[m  - ####################################################
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:13.414 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:13.414 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.416 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.416 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:13.416 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.416 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.416 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:13.416 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.416 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.416 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:13.417 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.417 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:13.417 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.417 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.417 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:13.417 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.417 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:13.417 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.418 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:13.418 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.418 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.418 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:13.418 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.419 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:13.419 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.420 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:13.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:13.421 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.421 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:13.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:13.422 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.422 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:13.422 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.423 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:13.423 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.423 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.423 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:13.423 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:13.423 [main] [30mTRACE[m  - ##################################################
13:48:13.424 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:13.424 [main] [30mTRACE[m  - ##################################################

13:48:13.424 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:14.238 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:14.238 [main] [30mTRACE[m  - ###############################
13:48:14.238 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:14.238 [main] [30mTRACE[m  - ###############################
13:48:14.441 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:14.441 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:14.441 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:14.441 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:14.441 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:14.644 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:14.644 [main] [30mTRACE[m  - #####################################
13:48:14.645 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:14.645 [main] [30mTRACE[m  - #####################################
13:48:14.645 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:14.645 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:15.413 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:15.413 [main] [32mINFO [m  - Instance "Pattern"
13:48:15.413 [main] [32mINFO [m  - Instance "Matcher"
13:48:15.413 [main] [32mINFO [m  - IF - Match
13:48:15.413 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:15.413 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:15.413 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:15.414 [main] [30mTRACE[m  - ###################################
13:48:15.414 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:15.414 [main] [30mTRACE[m  - ###################################

13:48:15.414 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:15.414 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:15.414 [main] [30mTRACE[m  - ##########################################
13:48:15.414 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:15.415 [main] [30mTRACE[m  - ##########################################
13:48:15.416 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:15.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:15.417 [main] [30mTRACE[m  - ########################################
13:48:15.417 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:15.417 [main] [30mTRACE[m  - ########################################

13:48:15.417 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:15.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:15.417 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:15.417 [main] [30mTRACE[m  - ##############################################
13:48:15.417 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:15.418 [main] [30mTRACE[m  - ##############################################
13:48:15.418 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:15.418 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:15.418 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:15.418 [main] [30mTRACE[m  - ##########################################
13:48:15.418 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:15.418 [main] [30mTRACE[m  - ##########################################

13:48:15.418 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:15.418 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:15.418 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:15.418 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:15.418 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:15.418 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:15.419 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:15.419 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:15.419 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:15.419 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:15.419 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:15.420 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:15.421 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:15.625 [main] [30mTRACE[m  - ####################################################
13:48:15.625 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:15.625 [main] [30mTRACE[m  - ####################################################
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:15.625 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:15.625 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:15.626 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.626 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.627 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.627 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.628 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:15.628 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.628 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.628 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:15.628 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.628 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.628 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:15.629 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.629 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:15.629 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.629 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.629 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:15.629 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.629 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:15.633 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.634 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.634 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:15.634 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.634 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.634 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:15.634 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.634 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.634 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:15.635 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:15.635 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.635 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.635 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:15.635 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:15.635 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.636 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:15.636 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:15.636 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.636 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:15.636 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:15.636 [main] [30mTRACE[m  - ##################################################
13:48:15.637 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:15.637 [main] [30mTRACE[m  - ##################################################

13:48:15.637 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:16.449 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:16.449 [main] [30mTRACE[m  - ###############################
13:48:16.450 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:16.450 [main] [30mTRACE[m  - ###############################
13:48:16.653 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:16.653 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:16.653 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:16.653 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:16.653 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:16.855 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:16.856 [main] [30mTRACE[m  - #####################################
13:48:16.856 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:16.856 [main] [30mTRACE[m  - #####################################
13:48:16.856 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:16.856 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:17.011 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:48:17.012 [main] [32mINFO [m  - Instance "Pattern"
13:48:17.012 [main] [32mINFO [m  - Instance "Matcher"
13:48:17.012 [main] [33mWARN [m  - ELSE - Error
13:48:17.013 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:48:17.216 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:17.216 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:48:17.216 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:17.216 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:17.418 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:48:18.693 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:18.694 [main] [32mINFO [m  - Instance "Pattern"
13:48:18.694 [main] [32mINFO [m  - Instance "Matcher"
13:48:18.694 [main] [32mINFO [m  - IF - Match
13:48:18.694 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:18.694 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:18.694 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:18.694 [main] [30mTRACE[m  - ###################################
13:48:18.695 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:18.695 [main] [30mTRACE[m  - ###################################

13:48:18.695 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:18.695 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:18.695 [main] [30mTRACE[m  - ##########################################
13:48:18.695 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:18.695 [main] [30mTRACE[m  - ##########################################
13:48:18.695 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:18.695 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:18.695 [main] [30mTRACE[m  - ########################################
13:48:18.695 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:18.697 [main] [30mTRACE[m  - ########################################

13:48:18.697 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:18.697 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:18.698 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:18.698 [main] [30mTRACE[m  - ##############################################
13:48:18.698 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:18.698 [main] [30mTRACE[m  - ##############################################
13:48:18.698 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:18.698 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:18.698 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:18.698 [main] [30mTRACE[m  - ##########################################
13:48:18.698 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:18.698 [main] [30mTRACE[m  - ##########################################

13:48:18.699 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:18.699 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:18.699 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:18.699 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:18.699 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:18.699 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:18.699 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:18.699 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:18.700 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:18.700 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:18.701 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:18.702 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:18.702 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:18.905 [main] [30mTRACE[m  - ####################################################
13:48:18.905 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:18.905 [main] [30mTRACE[m  - ####################################################
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:18.906 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:18.906 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:18.906 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:18.906 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.906 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.906 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:18.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:18.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:18.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:18.908 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.908 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:18.908 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.908 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:18.908 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.908 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:18.908 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.908 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:18.909 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.909 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.909 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:18.909 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.909 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.909 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:18.909 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.909 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.909 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:18.909 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.909 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.909 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:18.910 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:18.910 [main] [30mTRACE[m  - ##################################################
13:48:18.910 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:18.910 [main] [30mTRACE[m  - ##################################################

13:48:18.910 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:19.723 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:19.724 [main] [30mTRACE[m  - ###############################
13:48:19.724 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:19.724 [main] [30mTRACE[m  - ###############################
13:48:19.927 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:19.927 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:19.927 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:19.927 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:19.927 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:20.132 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:20.132 [main] [30mTRACE[m  - #####################################
13:48:20.133 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:20.133 [main] [30mTRACE[m  - #####################################
13:48:20.133 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:20.133 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:21.300 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:21.300 [main] [32mINFO [m  - Instance "Pattern"
13:48:21.300 [main] [32mINFO [m  - Instance "Matcher"
13:48:21.301 [main] [32mINFO [m  - IF - Match
13:48:21.301 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:21.301 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:21.301 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:21.301 [main] [30mTRACE[m  - ###################################
13:48:21.301 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:21.301 [main] [30mTRACE[m  - ###################################

13:48:21.301 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:21.301 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:21.301 [main] [30mTRACE[m  - ##########################################
13:48:21.301 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:21.301 [main] [30mTRACE[m  - ##########################################
13:48:21.302 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:21.302 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:21.302 [main] [30mTRACE[m  - ########################################
13:48:21.302 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:21.302 [main] [30mTRACE[m  - ########################################

13:48:21.302 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:21.302 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:21.302 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:21.303 [main] [30mTRACE[m  - ##############################################
13:48:21.303 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:21.303 [main] [30mTRACE[m  - ##############################################
13:48:21.303 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:21.304 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:21.305 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:21.305 [main] [30mTRACE[m  - ##########################################
13:48:21.305 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:21.305 [main] [30mTRACE[m  - ##########################################

13:48:21.305 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:21.305 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:21.305 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:21.306 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:21.306 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:21.306 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:21.306 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:21.306 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:21.306 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:21.306 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:21.306 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:21.306 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:21.306 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:21.511 [main] [30mTRACE[m  - ####################################################
13:48:21.511 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:21.512 [main] [30mTRACE[m  - ####################################################
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:21.512 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:21.512 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:21.513 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.513 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.513 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.514 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.514 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:21.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.514 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:21.514 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.514 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.514 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:21.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:21.515 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.515 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.515 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:21.515 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.515 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:21.515 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.515 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.516 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:21.516 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.516 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.516 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:21.516 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.516 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.516 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:21.516 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.516 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.516 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:21.517 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.517 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.517 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:21.517 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.517 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:21.523 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.523 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:21.523 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.523 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:21.523 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.524 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:21.524 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:21.524 [main] [30mTRACE[m  - ##################################################
13:48:21.524 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:21.524 [main] [30mTRACE[m  - ##################################################

13:48:21.524 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:22.338 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:22.338 [main] [30mTRACE[m  - ###############################
13:48:22.338 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:22.338 [main] [30mTRACE[m  - ###############################
13:48:22.542 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:22.542 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:22.542 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:22.543 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:22.543 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:22.749 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:22.749 [main] [30mTRACE[m  - #####################################
13:48:22.749 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:22.750 [main] [30mTRACE[m  - #####################################
13:48:22.750 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:22.750 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:23.911 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:23.914 [main] [32mINFO [m  - Instance "Pattern"
13:48:23.914 [main] [32mINFO [m  - Instance "Matcher"
13:48:23.915 [main] [32mINFO [m  - IF - Match
13:48:23.915 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:23.915 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:23.915 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:23.915 [main] [30mTRACE[m  - ###################################
13:48:23.915 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:23.915 [main] [30mTRACE[m  - ###################################

13:48:23.915 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:23.915 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:23.915 [main] [30mTRACE[m  - ##########################################
13:48:23.915 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:23.915 [main] [30mTRACE[m  - ##########################################
13:48:23.915 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:23.915 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:23.915 [main] [30mTRACE[m  - ########################################
13:48:23.915 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:23.915 [main] [30mTRACE[m  - ########################################

13:48:23.915 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:23.915 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:23.916 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:23.916 [main] [30mTRACE[m  - ##############################################
13:48:23.916 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:23.916 [main] [30mTRACE[m  - ##############################################
13:48:23.916 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:23.916 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:23.916 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:23.916 [main] [30mTRACE[m  - ##########################################
13:48:23.916 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:23.916 [main] [30mTRACE[m  - ##########################################

13:48:23.916 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:23.916 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:23.916 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:23.916 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:23.916 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:23.916 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:23.916 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:23.916 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:23.916 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:23.916 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:23.916 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:23.916 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:23.916 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:24.118 [main] [30mTRACE[m  - ####################################################
13:48:24.118 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:24.118 [main] [30mTRACE[m  - ####################################################
13:48:24.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:24.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:24.119 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:24.119 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.119 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:24.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:24.122 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:24.122 [main] [30mTRACE[m  - ##################################################
13:48:24.122 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:24.122 [main] [30mTRACE[m  - ##################################################

13:48:24.122 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:24.937 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:24.937 [main] [30mTRACE[m  - ###############################
13:48:24.937 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:24.937 [main] [30mTRACE[m  - ###############################
13:48:25.141 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:25.141 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:25.141 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:25.141 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:25.141 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:25.343 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:25.343 [main] [30mTRACE[m  - #####################################
13:48:25.343 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:25.343 [main] [30mTRACE[m  - #####################################
13:48:25.343 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:25.343 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:26.397 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:26.397 [main] [32mINFO [m  - Instance "Pattern"
13:48:26.397 [main] [32mINFO [m  - Instance "Matcher"
13:48:26.397 [main] [32mINFO [m  - IF - Match
13:48:26.398 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:26.398 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:26.398 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:26.398 [main] [30mTRACE[m  - ###################################
13:48:26.398 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:26.398 [main] [30mTRACE[m  - ###################################

13:48:26.398 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:26.398 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:26.398 [main] [30mTRACE[m  - ##########################################
13:48:26.398 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:26.398 [main] [30mTRACE[m  - ##########################################
13:48:26.398 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:26.398 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:26.398 [main] [30mTRACE[m  - ########################################
13:48:26.399 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:26.399 [main] [30mTRACE[m  - ########################################

13:48:26.399 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:26.399 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:26.399 [main] [30mTRACE[m  - ##############################################
13:48:26.399 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:26.399 [main] [30mTRACE[m  - ##############################################
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:26.399 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:26.399 [main] [30mTRACE[m  - ##########################################
13:48:26.399 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:26.400 [main] [30mTRACE[m  - ##########################################

13:48:26.400 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:26.400 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:26.400 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:26.400 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:26.400 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:26.400 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:26.400 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:26.400 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:26.400 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:26.400 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:26.400 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:26.401 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:26.401 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:26.602 [main] [30mTRACE[m  - ####################################################
13:48:26.602 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:26.602 [main] [30mTRACE[m  - ####################################################
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:26.603 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:26.603 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:26.603 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:26.603 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.603 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.606 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.606 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:26.606 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.606 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.606 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:26.606 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:26.606 [main] [30mTRACE[m  - ##################################################
13:48:26.606 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:26.606 [main] [30mTRACE[m  - ##################################################

13:48:26.606 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:27.421 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:27.421 [main] [30mTRACE[m  - ###############################
13:48:27.421 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:27.421 [main] [30mTRACE[m  - ###############################
13:48:27.624 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:27.624 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:27.625 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:27.625 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:27.625 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:27.827 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:27.828 [main] [30mTRACE[m  - #####################################
13:48:27.828 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:27.828 [main] [30mTRACE[m  - #####################################
13:48:27.828 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:27.828 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:30.467 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:30.468 [main] [32mINFO [m  - Instance "Pattern"
13:48:30.468 [main] [32mINFO [m  - Instance "Matcher"
13:48:30.468 [main] [32mINFO [m  - IF - Match
13:48:30.468 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:30.468 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:30.468 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:30.468 [main] [30mTRACE[m  - ###################################
13:48:30.468 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:30.468 [main] [30mTRACE[m  - ###################################

13:48:30.468 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:30.468 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:30.468 [main] [30mTRACE[m  - ##########################################
13:48:30.468 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:30.468 [main] [30mTRACE[m  - ##########################################
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:30.469 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:30.469 [main] [30mTRACE[m  - ########################################
13:48:30.469 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:30.469 [main] [30mTRACE[m  - ########################################

13:48:30.469 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:30.469 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:30.469 [main] [30mTRACE[m  - ##############################################
13:48:30.469 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:30.469 [main] [30mTRACE[m  - ##############################################
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:30.470 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:30.470 [main] [30mTRACE[m  - ##########################################
13:48:30.470 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:30.470 [main] [30mTRACE[m  - ##########################################

13:48:30.470 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:30.470 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:30.470 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:30.470 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:30.470 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:30.471 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:30.471 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:30.472 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:30.472 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:30.472 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:30.472 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:30.473 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:30.473 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:30.678 [main] [30mTRACE[m  - ####################################################
13:48:30.678 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:30.678 [main] [30mTRACE[m  - ####################################################
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:30.679 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:30.679 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:30.679 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.679 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.681 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.681 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.682 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:30.682 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.682 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.682 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:30.682 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:30.682 [main] [30mTRACE[m  - ##################################################
13:48:30.682 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:30.682 [main] [30mTRACE[m  - ##################################################

13:48:30.682 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:31.499 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:31.499 [main] [30mTRACE[m  - ###############################
13:48:31.499 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:31.499 [main] [30mTRACE[m  - ###############################
13:48:31.700 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:31.700 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:31.700 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:31.700 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:31.700 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:31.902 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:31.902 [main] [30mTRACE[m  - #####################################
13:48:31.902 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:31.902 [main] [30mTRACE[m  - #####################################
13:48:31.903 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:31.903 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:43.046 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:43.046 [main] [32mINFO [m  - Instance "Pattern"
13:48:43.046 [main] [32mINFO [m  - Instance "Matcher"
13:48:43.046 [main] [32mINFO [m  - IF - Match
13:48:43.046 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:43.047 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:43.047 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:43.047 [main] [30mTRACE[m  - ###################################
13:48:43.047 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:43.047 [main] [30mTRACE[m  - ###################################

13:48:43.047 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:43.047 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:43.047 [main] [30mTRACE[m  - ##########################################
13:48:43.047 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:43.047 [main] [30mTRACE[m  - ##########################################
13:48:43.047 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:43.047 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:43.047 [main] [30mTRACE[m  - ########################################
13:48:43.047 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:43.047 [main] [30mTRACE[m  - ########################################

13:48:43.047 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:43.047 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:43.047 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:43.047 [main] [30mTRACE[m  - ##############################################
13:48:43.047 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:43.048 [main] [30mTRACE[m  - ##############################################
13:48:43.048 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:43.048 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:43.048 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:43.048 [main] [30mTRACE[m  - ##########################################
13:48:43.048 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:43.048 [main] [30mTRACE[m  - ##########################################

13:48:43.048 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:43.048 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:43.048 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:43.048 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:43.049 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:43.050 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:43.050 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:43.050 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:43.050 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:43.050 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:43.051 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:43.051 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:43.051 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:43.252 [main] [30mTRACE[m  - ####################################################
13:48:43.252 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:43.252 [main] [30mTRACE[m  - ####################################################
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:43.253 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:43.253 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:43.253 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:43.253 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.253 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:43.253 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.256 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:43.256 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.256 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.256 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:43.256 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.256 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.256 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:43.256 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.256 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.256 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:43.256 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:43.256 [main] [30mTRACE[m  - ##################################################
13:48:43.256 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:43.256 [main] [30mTRACE[m  - ##################################################

13:48:43.256 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:44.069 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:44.069 [main] [30mTRACE[m  - ###############################
13:48:44.069 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:44.069 [main] [30mTRACE[m  - ###############################
13:48:44.274 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:44.274 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:44.274 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:44.274 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:44.274 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:44.476 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:44.477 [main] [30mTRACE[m  - #####################################
13:48:44.477 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:44.477 [main] [30mTRACE[m  - #####################################
13:48:44.477 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:44.477 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:45.134 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:45.134 [main] [32mINFO [m  - Instance "Pattern"
13:48:45.134 [main] [32mINFO [m  - Instance "Matcher"
13:48:45.134 [main] [32mINFO [m  - IF - Match
13:48:45.134 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:45.134 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:45.134 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:45.134 [main] [30mTRACE[m  - ###################################
13:48:45.134 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:45.134 [main] [30mTRACE[m  - ###################################

13:48:45.134 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:45.134 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:45.134 [main] [30mTRACE[m  - ##########################################
13:48:45.134 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:45.135 [main] [30mTRACE[m  - ##########################################
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:45.135 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:45.135 [main] [30mTRACE[m  - ########################################
13:48:45.135 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:45.135 [main] [30mTRACE[m  - ########################################

13:48:45.135 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:45.135 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:45.135 [main] [30mTRACE[m  - ##############################################
13:48:45.135 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:45.135 [main] [30mTRACE[m  - ##############################################
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:45.135 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:45.136 [main] [30mTRACE[m  - ##########################################
13:48:45.136 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:45.136 [main] [30mTRACE[m  - ##########################################

13:48:45.136 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:45.136 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:45.136 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:45.136 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:45.137 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:45.137 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:45.138 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:45.138 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:45.138 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:45.138 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:45.138 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:45.138 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:45.138 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:45.342 [main] [30mTRACE[m  - ####################################################
13:48:45.342 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:45.342 [main] [30mTRACE[m  - ####################################################
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:45.342 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:45.343 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:45.343 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.343 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:45.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:45.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.345 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.345 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.346 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.346 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:45.346 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.346 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.346 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:45.346 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.346 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.346 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:45.346 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.346 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.346 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:45.346 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:45.346 [main] [30mTRACE[m  - ##################################################
13:48:45.346 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:45.346 [main] [30mTRACE[m  - ##################################################

13:48:45.346 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:46.160 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:46.160 [main] [30mTRACE[m  - ###############################
13:48:46.160 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:46.160 [main] [30mTRACE[m  - ###############################
13:48:46.363 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:46.363 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:46.363 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:46.364 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:46.364 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:46.569 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:46.569 [main] [30mTRACE[m  - #####################################
13:48:46.569 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:46.569 [main] [30mTRACE[m  - #####################################
13:48:46.569 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:46.569 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:48.241 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:48.242 [main] [32mINFO [m  - Instance "Pattern"
13:48:48.242 [main] [32mINFO [m  - Instance "Matcher"
13:48:48.242 [main] [32mINFO [m  - IF - Match
13:48:48.242 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:48.242 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:48.242 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:48.242 [main] [30mTRACE[m  - ###################################
13:48:48.242 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:48.242 [main] [30mTRACE[m  - ###################################

13:48:48.242 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:48.242 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:48.242 [main] [30mTRACE[m  - ##########################################
13:48:48.242 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:48.242 [main] [30mTRACE[m  - ##########################################
13:48:48.242 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:48.242 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:48.242 [main] [30mTRACE[m  - ########################################
13:48:48.242 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:48.242 [main] [30mTRACE[m  - ########################################

13:48:48.242 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:48.242 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:48.242 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:48.242 [main] [30mTRACE[m  - ##############################################
13:48:48.243 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:48.243 [main] [30mTRACE[m  - ##############################################
13:48:48.243 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:48.243 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:48.243 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:48.243 [main] [30mTRACE[m  - ##########################################
13:48:48.243 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:48.243 [main] [30mTRACE[m  - ##########################################

13:48:48.243 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:48.243 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:48.243 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:48.243 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:48.243 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:48.243 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:48.243 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:48.243 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:48.243 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:48.243 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:48.243 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:48.245 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:48.245 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:48.447 [main] [30mTRACE[m  - ####################################################
13:48:48.447 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:48.447 [main] [30mTRACE[m  - ####################################################
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:48.447 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:48.447 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:48.448 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:48.449 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:48.449 [main] [30mTRACE[m  - ##################################################
13:48:48.449 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:48.449 [main] [30mTRACE[m  - ##################################################

13:48:48.449 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:49.263 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:49.263 [main] [30mTRACE[m  - ###############################
13:48:49.263 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:49.264 [main] [30mTRACE[m  - ###############################
13:48:49.469 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:49.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:49.469 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:49.469 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:49.469 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:49.673 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:49.673 [main] [30mTRACE[m  - #####################################
13:48:49.673 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:49.673 [main] [30mTRACE[m  - #####################################
13:48:49.673 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:49.673 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:50.819 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:50.819 [main] [32mINFO [m  - Instance "Pattern"
13:48:50.819 [main] [32mINFO [m  - Instance "Matcher"
13:48:50.820 [main] [32mINFO [m  - IF - Match
13:48:50.820 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:50.820 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:50.820 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:50.820 [main] [30mTRACE[m  - ###################################
13:48:50.820 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:50.820 [main] [30mTRACE[m  - ###################################

13:48:50.820 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:50.820 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:50.820 [main] [30mTRACE[m  - ##########################################
13:48:50.820 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:50.820 [main] [30mTRACE[m  - ##########################################
13:48:50.820 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:50.820 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:50.820 [main] [30mTRACE[m  - ########################################
13:48:50.820 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:50.820 [main] [30mTRACE[m  - ########################################

13:48:50.820 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:50.820 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:50.820 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:50.821 [main] [30mTRACE[m  - ##############################################
13:48:50.821 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:50.821 [main] [30mTRACE[m  - ##############################################
13:48:50.821 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:50.821 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:50.821 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:50.821 [main] [30mTRACE[m  - ##########################################
13:48:50.821 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:50.821 [main] [30mTRACE[m  - ##########################################

13:48:50.821 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:50.821 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:50.821 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:50.821 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:50.821 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:50.821 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:50.821 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:50.821 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:50.821 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:50.821 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:50.822 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:50.822 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:50.822 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:51.023 [main] [30mTRACE[m  - ####################################################
13:48:51.023 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:51.023 [main] [30mTRACE[m  - ####################################################
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:51.024 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:51.024 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:51.024 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:51.025 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:51.027 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.027 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:51.027 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.027 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:51.027 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:51.027 [main] [30mTRACE[m  - ##################################################
13:48:51.027 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:51.027 [main] [30mTRACE[m  - ##################################################

13:48:51.027 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:51.839 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:51.839 [main] [30mTRACE[m  - ###############################
13:48:51.839 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:51.839 [main] [30mTRACE[m  - ###############################
13:48:52.041 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:52.041 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:52.041 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:52.041 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:52.041 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:52.244 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:52.244 [main] [30mTRACE[m  - #####################################
13:48:52.244 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:52.244 [main] [30mTRACE[m  - #####################################
13:48:52.244 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:52.244 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:53.300 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:53.302 [main] [32mINFO [m  - Instance "Pattern"
13:48:53.303 [main] [32mINFO [m  - Instance "Matcher"
13:48:53.303 [main] [32mINFO [m  - IF - Match
13:48:53.304 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:53.304 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:53.304 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:53.304 [main] [30mTRACE[m  - ###################################
13:48:53.304 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:53.304 [main] [30mTRACE[m  - ###################################

13:48:53.304 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:53.304 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:53.304 [main] [30mTRACE[m  - ##########################################
13:48:53.304 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:53.304 [main] [30mTRACE[m  - ##########################################
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:53.304 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:53.304 [main] [30mTRACE[m  - ########################################
13:48:53.304 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:53.304 [main] [30mTRACE[m  - ########################################

13:48:53.304 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:53.304 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:53.304 [main] [30mTRACE[m  - ##############################################
13:48:53.304 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:53.304 [main] [30mTRACE[m  - ##############################################
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:53.305 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:53.305 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:53.305 [main] [30mTRACE[m  - ##########################################
13:48:53.305 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:53.305 [main] [30mTRACE[m  - ##########################################

13:48:53.305 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:53.305 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:53.305 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:53.305 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:53.305 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:53.305 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:53.305 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:53.305 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:53.305 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:53.305 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:53.305 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:53.306 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:53.307 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:53.509 [main] [30mTRACE[m  - ####################################################
13:48:53.509 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:53.509 [main] [30mTRACE[m  - ####################################################
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:53.510 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:53.510 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:53.510 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.510 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:53.510 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:53.512 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:53.513 [main] [30mTRACE[m  - ##################################################
13:48:53.513 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:53.513 [main] [30mTRACE[m  - ##################################################

13:48:53.513 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:54.328 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:54.328 [main] [30mTRACE[m  - ###############################
13:48:54.328 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:54.328 [main] [30mTRACE[m  - ###############################
13:48:54.531 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:54.531 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:54.531 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:54.531 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:54.531 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:54.735 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:54.735 [main] [30mTRACE[m  - #####################################
13:48:54.735 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:54.735 [main] [30mTRACE[m  - #####################################
13:48:54.735 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:54.735 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:55.753 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:55.753 [main] [32mINFO [m  - Instance "Pattern"
13:48:55.753 [main] [32mINFO [m  - Instance "Matcher"
13:48:55.753 [main] [32mINFO [m  - IF - Match
13:48:55.753 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:55.753 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:55.753 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:55.753 [main] [30mTRACE[m  - ###################################
13:48:55.753 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:55.753 [main] [30mTRACE[m  - ###################################

13:48:55.754 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:55.754 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:55.754 [main] [30mTRACE[m  - ##########################################
13:48:55.754 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:55.754 [main] [30mTRACE[m  - ##########################################
13:48:55.754 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:55.754 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:55.754 [main] [30mTRACE[m  - ########################################
13:48:55.754 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:55.754 [main] [30mTRACE[m  - ########################################

13:48:55.754 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:55.754 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:55.754 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:55.754 [main] [30mTRACE[m  - ##############################################
13:48:55.755 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:55.755 [main] [30mTRACE[m  - ##############################################
13:48:55.755 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:55.755 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:55.755 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:55.755 [main] [30mTRACE[m  - ##########################################
13:48:55.755 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:55.755 [main] [30mTRACE[m  - ##########################################

13:48:55.755 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:55.755 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:55.755 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:55.755 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:55.755 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:55.757 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:55.758 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:55.758 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:55.758 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:55.758 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:55.758 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:55.758 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:55.758 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:55.959 [main] [30mTRACE[m  - ####################################################
13:48:55.959 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:55.959 [main] [30mTRACE[m  - ####################################################
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:55.959 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:55.960 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:55.960 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.960 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.960 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:55.960 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.960 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:55.962 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:55.962 [main] [30mTRACE[m  - ##################################################
13:48:55.962 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:55.963 [main] [30mTRACE[m  - ##################################################

13:48:55.963 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:56.772 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:56.772 [main] [30mTRACE[m  - ###############################
13:48:56.772 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:56.772 [main] [30mTRACE[m  - ###############################
13:48:56.975 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:56.975 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:56.975 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:56.975 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:56.976 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:57.181 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:57.181 [main] [30mTRACE[m  - #####################################
13:48:57.181 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:57.181 [main] [30mTRACE[m  - #####################################
13:48:57.181 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:57.181 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:58.451 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:58.452 [main] [32mINFO [m  - Instance "Pattern"
13:48:58.452 [main] [32mINFO [m  - Instance "Matcher"
13:48:58.452 [main] [32mINFO [m  - IF - Match
13:48:58.452 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:58.452 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:58.452 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:58.452 [main] [30mTRACE[m  - ###################################
13:48:58.452 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:58.452 [main] [30mTRACE[m  - ###################################

13:48:58.452 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:58.452 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:58.452 [main] [30mTRACE[m  - ##########################################
13:48:58.452 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:58.452 [main] [30mTRACE[m  - ##########################################
13:48:58.452 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:58.453 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:58.453 [main] [30mTRACE[m  - ########################################
13:48:58.453 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:58.453 [main] [30mTRACE[m  - ########################################

13:48:58.453 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:58.453 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:58.453 [main] [30mTRACE[m  - ##############################################
13:48:58.453 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:58.453 [main] [30mTRACE[m  - ##############################################
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:58.453 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:58.453 [main] [30mTRACE[m  - ##########################################
13:48:58.453 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:58.453 [main] [30mTRACE[m  - ##########################################

13:48:58.453 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:58.453 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:58.454 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:58.454 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:58.454 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:58.455 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:58.455 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:58.455 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:58.455 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:58.456 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:58.456 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:58.456 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:58.456 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:58.661 [main] [30mTRACE[m  - ####################################################
13:48:58.661 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:58.661 [main] [30mTRACE[m  - ####################################################
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:58.661 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:58.661 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:58.661 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:58.661 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:58.662 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.662 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.662 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:58.662 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.662 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:58.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:58.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:58.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:58.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:58.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:58.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:58.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:58.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:58.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:58.666 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:58.666 [main] [30mTRACE[m  - ##################################################
13:48:58.666 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:58.666 [main] [30mTRACE[m  - ##################################################

13:48:58.666 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:59.477 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:59.477 [main] [30mTRACE[m  - ###############################
13:48:59.477 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:59.477 [main] [30mTRACE[m  - ###############################
13:48:59.682 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:59.682 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:59.682 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:59.682 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:59.682 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:59.883 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:59.884 [main] [30mTRACE[m  - #####################################
13:48:59.884 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:59.884 [main] [30mTRACE[m  - #####################################
13:48:59.884 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:59.884 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:01.065 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:01.065 [main] [32mINFO [m  - Instance "Pattern"
13:49:01.065 [main] [32mINFO [m  - Instance "Matcher"
13:49:01.065 [main] [32mINFO [m  - IF - Match
13:49:01.066 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:01.066 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:01.066 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:01.066 [main] [30mTRACE[m  - ###################################
13:49:01.066 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:01.066 [main] [30mTRACE[m  - ###################################

13:49:01.066 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:01.066 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:01.066 [main] [30mTRACE[m  - ##########################################
13:49:01.066 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:01.066 [main] [30mTRACE[m  - ##########################################
13:49:01.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:01.066 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:01.066 [main] [30mTRACE[m  - ########################################
13:49:01.066 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:01.066 [main] [30mTRACE[m  - ########################################

13:49:01.066 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:01.067 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:01.067 [main] [30mTRACE[m  - ##############################################
13:49:01.067 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:01.067 [main] [30mTRACE[m  - ##############################################
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:01.067 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:01.067 [main] [30mTRACE[m  - ##########################################
13:49:01.067 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:01.067 [main] [30mTRACE[m  - ##########################################

13:49:01.068 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:01.068 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:01.068 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:01.068 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:01.068 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:01.069 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:01.069 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:01.069 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:01.069 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:01.069 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:01.070 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:01.070 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:01.070 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:01.274 [main] [30mTRACE[m  - ####################################################
13:49:01.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:01.274 [main] [30mTRACE[m  - ####################################################
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:01.274 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:01.274 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:01.274 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.275 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.275 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:01.277 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.277 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.277 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:01.277 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.277 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:01.277 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.277 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.277 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:01.277 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.277 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:01.277 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:01.277 [main] [30mTRACE[m  - ##################################################
13:49:01.277 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:01.277 [main] [30mTRACE[m  - ##################################################

13:49:01.277 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:02.089 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:02.089 [main] [30mTRACE[m  - ###############################
13:49:02.089 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:02.089 [main] [30mTRACE[m  - ###############################
13:49:02.293 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:02.294 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:02.294 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:02.294 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:02.294 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:02.499 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:02.499 [main] [30mTRACE[m  - #####################################
13:49:02.499 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:02.499 [main] [30mTRACE[m  - #####################################
13:49:02.499 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:02.499 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:03.665 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:03.665 [main] [32mINFO [m  - Instance "Pattern"
13:49:03.665 [main] [32mINFO [m  - Instance "Matcher"
13:49:03.665 [main] [32mINFO [m  - IF - Match
13:49:03.665 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:03.665 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:03.665 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:03.665 [main] [30mTRACE[m  - ###################################
13:49:03.665 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:03.666 [main] [30mTRACE[m  - ###################################

13:49:03.666 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:03.666 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:03.666 [main] [30mTRACE[m  - ##########################################
13:49:03.666 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:03.666 [main] [30mTRACE[m  - ##########################################
13:49:03.666 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:03.666 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:03.666 [main] [30mTRACE[m  - ########################################
13:49:03.666 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:03.666 [main] [30mTRACE[m  - ########################################

13:49:03.667 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:03.667 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:03.667 [main] [30mTRACE[m  - ##############################################
13:49:03.667 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:03.667 [main] [30mTRACE[m  - ##############################################
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:03.667 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:03.667 [main] [30mTRACE[m  - ##########################################
13:49:03.667 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:03.667 [main] [30mTRACE[m  - ##########################################

13:49:03.667 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:03.667 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:03.667 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:03.667 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:03.667 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:03.668 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:03.668 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:03.668 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:03.668 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:03.669 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:03.669 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:03.670 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:03.670 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:03.872 [main] [30mTRACE[m  - ####################################################
13:49:03.872 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:03.872 [main] [30mTRACE[m  - ####################################################
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:03.872 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:03.872 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:03.872 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:03.873 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.873 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:03.873 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:03.876 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:03.876 [main] [30mTRACE[m  - ##################################################
13:49:03.876 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:03.876 [main] [30mTRACE[m  - ##################################################

13:49:03.876 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:04.690 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:04.690 [main] [30mTRACE[m  - ###############################
13:49:04.690 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:04.690 [main] [30mTRACE[m  - ###############################
13:49:04.893 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:04.894 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:04.894 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:04.894 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:04.894 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:05.098 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:05.098 [main] [30mTRACE[m  - #####################################
13:49:05.098 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:05.098 [main] [30mTRACE[m  - #####################################
13:49:05.098 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:05.098 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:05.837 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:05.838 [main] [32mINFO [m  - Instance "Pattern"
13:49:05.838 [main] [32mINFO [m  - Instance "Matcher"
13:49:05.838 [main] [32mINFO [m  - IF - Match
13:49:05.838 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:05.838 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:05.838 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:05.838 [main] [30mTRACE[m  - ###################################
13:49:05.838 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:05.838 [main] [30mTRACE[m  - ###################################

13:49:05.838 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:05.838 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:05.838 [main] [30mTRACE[m  - ##########################################
13:49:05.838 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:05.839 [main] [30mTRACE[m  - ##########################################
13:49:05.839 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:05.839 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:05.839 [main] [30mTRACE[m  - ########################################
13:49:05.839 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:05.839 [main] [30mTRACE[m  - ########################################

13:49:05.839 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:05.839 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:05.839 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:05.840 [main] [30mTRACE[m  - ##############################################
13:49:05.840 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:05.840 [main] [30mTRACE[m  - ##############################################
13:49:05.840 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:05.840 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:05.840 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:05.840 [main] [30mTRACE[m  - ##########################################
13:49:05.840 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:05.840 [main] [30mTRACE[m  - ##########################################

13:49:05.840 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:05.840 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:05.841 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:05.842 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:05.842 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:05.842 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:05.842 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:05.842 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:05.842 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:05.842 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:05.843 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:05.843 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:05.843 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:06.044 [main] [30mTRACE[m  - ####################################################
13:49:06.044 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:06.044 [main] [30mTRACE[m  - ####################################################
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:06.044 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:06.044 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:06.044 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:06.044 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:06.045 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.045 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.045 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:06.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:06.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:06.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:06.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:06.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:06.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:06.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:06.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:06.048 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:06.048 [main] [30mTRACE[m  - ##################################################
13:49:06.048 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:06.048 [main] [30mTRACE[m  - ##################################################

13:49:06.048 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:06.862 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:06.862 [main] [30mTRACE[m  - ###############################
13:49:06.862 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:06.863 [main] [30mTRACE[m  - ###############################
13:49:07.066 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:07.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:07.066 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:07.066 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:07.066 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:07.268 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:07.268 [main] [30mTRACE[m  - #####################################
13:49:07.268 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:07.268 [main] [30mTRACE[m  - #####################################
13:49:07.268 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:07.268 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:08.182 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:08.183 [main] [32mINFO [m  - Instance "Pattern"
13:49:08.183 [main] [32mINFO [m  - Instance "Matcher"
13:49:08.183 [main] [32mINFO [m  - IF - Match
13:49:08.183 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:08.183 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:08.183 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:08.183 [main] [30mTRACE[m  - ###################################
13:49:08.184 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:08.184 [main] [30mTRACE[m  - ###################################

13:49:08.184 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:08.184 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:08.184 [main] [30mTRACE[m  - ##########################################
13:49:08.184 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:08.184 [main] [30mTRACE[m  - ##########################################
13:49:08.184 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:08.184 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:08.184 [main] [30mTRACE[m  - ########################################
13:49:08.184 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:08.184 [main] [30mTRACE[m  - ########################################

13:49:08.184 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:08.184 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:08.185 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:08.185 [main] [30mTRACE[m  - ##############################################
13:49:08.185 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:08.185 [main] [30mTRACE[m  - ##############################################
13:49:08.185 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:08.185 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:08.185 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:08.185 [main] [30mTRACE[m  - ##########################################
13:49:08.185 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:08.185 [main] [30mTRACE[m  - ##########################################

13:49:08.185 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:08.185 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:08.185 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:08.185 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:08.185 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:08.185 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:08.185 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:08.186 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:08.186 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:08.186 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:08.186 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:08.186 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:08.187 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:08.388 [main] [30mTRACE[m  - ####################################################
13:49:08.388 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:08.388 [main] [30mTRACE[m  - ####################################################
13:49:08.388 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:08.388 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:08.389 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:08.389 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.389 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.389 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.392 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.392 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:08.392 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.392 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.392 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:08.392 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:08.392 [main] [30mTRACE[m  - ##################################################
13:49:08.392 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:08.392 [main] [30mTRACE[m  - ##################################################

13:49:08.392 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:09.207 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:09.207 [main] [30mTRACE[m  - ###############################
13:49:09.207 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:09.207 [main] [30mTRACE[m  - ###############################
13:49:09.410 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:09.411 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:09.411 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:09.411 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:09.411 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:09.616 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:09.616 [main] [30mTRACE[m  - #####################################
13:49:09.616 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:09.616 [main] [30mTRACE[m  - #####################################
13:49:09.616 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:09.616 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:10.535 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:10.536 [main] [32mINFO [m  - Instance "Pattern"
13:49:10.536 [main] [32mINFO [m  - Instance "Matcher"
13:49:10.536 [main] [32mINFO [m  - IF - Match
13:49:10.536 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:10.536 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:10.536 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:10.536 [main] [30mTRACE[m  - ###################################
13:49:10.536 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:10.536 [main] [30mTRACE[m  - ###################################

13:49:10.536 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:10.537 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:10.537 [main] [30mTRACE[m  - ##########################################
13:49:10.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:10.537 [main] [30mTRACE[m  - ##########################################
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:10.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:10.537 [main] [30mTRACE[m  - ########################################
13:49:10.537 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:10.537 [main] [30mTRACE[m  - ########################################

13:49:10.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:10.537 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:10.537 [main] [30mTRACE[m  - ##############################################
13:49:10.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:10.537 [main] [30mTRACE[m  - ##############################################
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:10.537 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:10.538 [main] [30mTRACE[m  - ##########################################
13:49:10.538 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:10.538 [main] [30mTRACE[m  - ##########################################

13:49:10.538 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:10.538 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:10.538 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:10.538 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:10.538 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:10.538 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:10.538 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:10.538 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:10.538 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:10.538 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:10.538 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:10.539 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:10.539 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:10.745 [main] [30mTRACE[m  - ####################################################
13:49:10.745 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:10.745 [main] [30mTRACE[m  - ####################################################
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:10.746 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:10.746 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:10.749 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:10.749 [main] [30mTRACE[m  - ##################################################
13:49:10.749 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:10.749 [main] [30mTRACE[m  - ##################################################

13:49:10.749 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:11.565 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:11.565 [main] [30mTRACE[m  - ###############################
13:49:11.565 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:11.565 [main] [30mTRACE[m  - ###############################
13:49:11.767 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:11.767 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:11.767 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:11.767 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:11.767 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:11.970 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:11.970 [main] [30mTRACE[m  - #####################################
13:49:11.970 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:11.970 [main] [30mTRACE[m  - #####################################
13:49:11.970 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:11.970 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:12.840 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:12.840 [main] [32mINFO [m  - Instance "Pattern"
13:49:12.840 [main] [32mINFO [m  - Instance "Matcher"
13:49:12.840 [main] [32mINFO [m  - IF - Match
13:49:12.841 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:12.841 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:12.841 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:12.841 [main] [30mTRACE[m  - ###################################
13:49:12.841 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:12.841 [main] [30mTRACE[m  - ###################################

13:49:12.841 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:12.841 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:12.841 [main] [30mTRACE[m  - ##########################################
13:49:12.841 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:12.841 [main] [30mTRACE[m  - ##########################################
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:12.841 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:12.841 [main] [30mTRACE[m  - ########################################
13:49:12.841 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:12.841 [main] [30mTRACE[m  - ########################################

13:49:12.841 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:12.841 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:12.841 [main] [30mTRACE[m  - ##############################################
13:49:12.841 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:12.841 [main] [30mTRACE[m  - ##############################################
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:12.842 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:12.842 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:12.842 [main] [30mTRACE[m  - ##########################################
13:49:12.842 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:12.842 [main] [30mTRACE[m  - ##########################################

13:49:12.842 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:12.842 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:12.842 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:12.842 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:12.842 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:12.842 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:12.842 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:12.842 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:12.842 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:12.843 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:12.843 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:12.843 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:12.843 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:13.044 [main] [30mTRACE[m  - ####################################################
13:49:13.044 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:13.044 [main] [30mTRACE[m  - ####################################################
13:49:13.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:13.045 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:13.045 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:13.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:13.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:13.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:13.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:13.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:13.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:13.048 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:13.048 [main] [30mTRACE[m  - ##################################################
13:49:13.048 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:13.048 [main] [30mTRACE[m  - ##################################################

13:49:13.049 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:13.862 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:13.862 [main] [30mTRACE[m  - ###############################
13:49:13.862 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:13.862 [main] [30mTRACE[m  - ###############################
13:49:14.066 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:14.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:14.066 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:14.066 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:14.066 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:14.271 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:14.271 [main] [30mTRACE[m  - #####################################
13:49:14.271 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:14.271 [main] [30mTRACE[m  - #####################################
13:49:14.272 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:14.272 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:14.989 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:14.989 [main] [32mINFO [m  - Instance "Pattern"
13:49:14.989 [main] [32mINFO [m  - Instance "Matcher"
13:49:14.989 [main] [32mINFO [m  - IF - Match
13:49:14.989 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:14.989 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:14.989 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:14.989 [main] [30mTRACE[m  - ###################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:14.990 [main] [30mTRACE[m  - ###################################

13:49:14.990 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:14.990 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:14.990 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:14.990 [main] [30mTRACE[m  - ########################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:14.990 [main] [30mTRACE[m  - ########################################

13:49:14.990 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:14.990 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:14.990 [main] [30mTRACE[m  - ##############################################
13:49:14.990 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:14.990 [main] [30mTRACE[m  - ##############################################
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:14.990 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:14.990 [main] [30mTRACE[m  - ##########################################

13:49:14.991 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:14.991 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:14.991 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:14.991 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:14.991 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:14.991 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:14.991 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:14.991 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:14.991 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:14.991 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:14.991 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:14.991 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:14.991 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:15.192 [main] [30mTRACE[m  - ####################################################
13:49:15.193 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:15.193 [main] [30mTRACE[m  - ####################################################
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:15.193 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:15.193 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.194 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:15.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:15.195 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.195 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.195 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:15.195 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.195 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.195 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:15.195 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.195 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.195 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:15.195 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.196 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.196 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:15.196 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.196 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.196 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:15.196 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:15.197 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.197 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.197 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:15.197 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:15.197 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.197 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.197 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:15.197 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:15.197 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:15.198 [main] [30mTRACE[m  - ##################################################
13:49:15.198 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:15.198 [main] [30mTRACE[m  - ##################################################

13:49:15.198 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:16.010 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:16.010 [main] [30mTRACE[m  - ###############################
13:49:16.010 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:16.010 [main] [30mTRACE[m  - ###############################
13:49:16.213 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:16.214 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:16.214 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:16.214 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:16.214 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:16.417 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:16.417 [main] [30mTRACE[m  - #####################################
13:49:16.417 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:16.417 [main] [30mTRACE[m  - #####################################
13:49:16.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:16.417 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:17.159 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:17.160 [main] [32mINFO [m  - Instance "Pattern"
13:49:17.160 [main] [32mINFO [m  - Instance "Matcher"
13:49:17.160 [main] [32mINFO [m  - IF - Match
13:49:17.160 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:17.160 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:17.160 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:17.160 [main] [30mTRACE[m  - ###################################
13:49:17.160 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:17.160 [main] [30mTRACE[m  - ###################################

13:49:17.160 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:17.160 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:17.160 [main] [30mTRACE[m  - ##########################################
13:49:17.160 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:17.160 [main] [30mTRACE[m  - ##########################################
13:49:17.160 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:17.161 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:17.161 [main] [30mTRACE[m  - ########################################
13:49:17.161 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:17.161 [main] [30mTRACE[m  - ########################################

13:49:17.161 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:17.161 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:17.161 [main] [30mTRACE[m  - ##############################################
13:49:17.161 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:17.161 [main] [30mTRACE[m  - ##############################################
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:17.161 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:17.161 [main] [30mTRACE[m  - ##########################################
13:49:17.161 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:17.161 [main] [30mTRACE[m  - ##########################################

13:49:17.161 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:17.161 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:17.161 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:17.162 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:17.162 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:17.162 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:17.162 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:17.162 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:17.162 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:17.162 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:17.162 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:17.163 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:17.163 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:17.368 [main] [30mTRACE[m  - ####################################################
13:49:17.368 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:17.369 [main] [30mTRACE[m  - ####################################################
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:17.369 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:17.369 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:17.369 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.369 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.372 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.372 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:17.372 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.372 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.372 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:17.372 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.372 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.372 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:17.372 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.372 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.372 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:17.372 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:17.372 [main] [30mTRACE[m  - ##################################################
13:49:17.372 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:17.372 [main] [30mTRACE[m  - ##################################################

13:49:17.372 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:18.187 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:18.187 [main] [30mTRACE[m  - ###############################
13:49:18.187 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:18.187 [main] [30mTRACE[m  - ###############################
13:49:18.390 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:18.390 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:18.390 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:18.390 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:18.390 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:18.594 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:18.594 [main] [30mTRACE[m  - #####################################
13:49:18.594 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:18.594 [main] [30mTRACE[m  - #####################################
13:49:18.594 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:18.594 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:19.459 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:19.459 [main] [32mINFO [m  - Instance "Pattern"
13:49:19.459 [main] [32mINFO [m  - Instance "Matcher"
13:49:19.459 [main] [32mINFO [m  - IF - Match
13:49:19.459 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:19.459 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:19.459 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:19.459 [main] [30mTRACE[m  - ###################################
13:49:19.459 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:19.459 [main] [30mTRACE[m  - ###################################

13:49:19.459 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:19.459 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:19.459 [main] [30mTRACE[m  - ##########################################
13:49:19.459 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:19.459 [main] [30mTRACE[m  - ##########################################
13:49:19.459 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:19.459 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:19.459 [main] [30mTRACE[m  - ########################################
13:49:19.459 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:19.459 [main] [30mTRACE[m  - ########################################

13:49:19.459 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:19.459 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:19.459 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:19.459 [main] [30mTRACE[m  - ##############################################
13:49:19.459 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:19.460 [main] [30mTRACE[m  - ##############################################
13:49:19.460 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:19.460 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:19.460 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:19.460 [main] [30mTRACE[m  - ##########################################
13:49:19.460 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:19.460 [main] [30mTRACE[m  - ##########################################

13:49:19.460 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:19.460 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:19.460 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:19.460 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:19.460 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:19.460 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:19.460 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:19.460 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:19.460 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:19.460 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:19.460 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:19.460 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:19.460 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:19.662 [main] [30mTRACE[m  - ####################################################
13:49:19.662 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:19.662 [main] [30mTRACE[m  - ####################################################
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:19.662 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:19.662 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:19.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:19.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.666 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:19.666 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.666 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:19.666 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.666 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.666 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:19.666 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.666 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:19.666 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:19.666 [main] [30mTRACE[m  - ##################################################
13:49:19.666 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:19.666 [main] [30mTRACE[m  - ##################################################

13:49:19.666 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:20.480 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:20.480 [main] [30mTRACE[m  - ###############################
13:49:20.480 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:20.480 [main] [30mTRACE[m  - ###############################
13:49:20.683 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:20.684 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:20.684 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:20.684 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:20.684 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:20.886 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:20.887 [main] [30mTRACE[m  - #####################################
13:49:20.887 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:20.887 [main] [30mTRACE[m  - #####################################
13:49:20.887 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:20.887 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:21.774 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:21.774 [main] [32mINFO [m  - Instance "Pattern"
13:49:21.774 [main] [32mINFO [m  - Instance "Matcher"
13:49:21.774 [main] [32mINFO [m  - IF - Match
13:49:21.774 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:21.774 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:21.774 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:21.775 [main] [30mTRACE[m  - ###################################
13:49:21.775 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:21.775 [main] [30mTRACE[m  - ###################################

13:49:21.775 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:21.775 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:21.775 [main] [30mTRACE[m  - ##########################################
13:49:21.775 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:21.775 [main] [30mTRACE[m  - ##########################################
13:49:21.775 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:21.775 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:21.775 [main] [30mTRACE[m  - ########################################
13:49:21.775 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:21.776 [main] [30mTRACE[m  - ########################################

13:49:21.776 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:21.776 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:21.776 [main] [30mTRACE[m  - ##############################################
13:49:21.776 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:21.776 [main] [30mTRACE[m  - ##############################################
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:21.776 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:21.776 [main] [30mTRACE[m  - ##########################################
13:49:21.776 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:21.776 [main] [30mTRACE[m  - ##########################################

13:49:21.776 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:21.777 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:21.777 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:21.777 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:21.777 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:21.777 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:21.777 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:21.777 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:21.777 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:21.777 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:21.777 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:21.777 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:21.777 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:21.979 [main] [30mTRACE[m  - ####################################################
13:49:21.979 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:21.979 [main] [30mTRACE[m  - ####################################################
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:21.979 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:21.979 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:21.979 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:21.979 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:21.980 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.980 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.980 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:21.982 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:21.982 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.982 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:21.982 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:21.982 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.982 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:21.982 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:21.982 [main] [30mTRACE[m  - ##################################################
13:49:21.982 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:21.982 [main] [30mTRACE[m  - ##################################################

13:49:21.982 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:22.792 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:22.793 [main] [30mTRACE[m  - ###############################
13:49:22.793 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:22.793 [main] [30mTRACE[m  - ###############################
13:49:22.994 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:23.013 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:23.013 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:23.013 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:23.013 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:23.218 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:23.219 [main] [30mTRACE[m  - #####################################
13:49:23.219 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:23.219 [main] [30mTRACE[m  - #####################################
13:49:23.219 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:23.219 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:23.761 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:23.761 [main] [32mINFO [m  - Instance "Pattern"
13:49:23.761 [main] [32mINFO [m  - Instance "Matcher"
13:49:23.761 [main] [32mINFO [m  - IF - Match
13:49:23.761 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:23.761 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:23.761 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:23.761 [main] [30mTRACE[m  - ###################################
13:49:23.761 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:23.761 [main] [30mTRACE[m  - ###################################

13:49:23.761 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:23.762 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:23.762 [main] [30mTRACE[m  - ##########################################
13:49:23.762 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:23.762 [main] [30mTRACE[m  - ##########################################
13:49:23.762 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:23.762 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:23.762 [main] [30mTRACE[m  - ########################################
13:49:23.762 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:23.762 [main] [30mTRACE[m  - ########################################

13:49:23.762 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:23.762 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:23.762 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:23.762 [main] [30mTRACE[m  - ##############################################
13:49:23.763 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:23.763 [main] [30mTRACE[m  - ##############################################
13:49:23.763 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:23.763 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:23.763 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:23.763 [main] [30mTRACE[m  - ##########################################
13:49:23.763 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:23.763 [main] [30mTRACE[m  - ##########################################

13:49:23.763 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:23.763 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:23.763 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:23.763 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:23.765 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:23.765 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:23.765 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:23.765 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:23.765 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:23.765 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:23.765 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:23.766 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:23.766 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:23.967 [main] [30mTRACE[m  - ####################################################
13:49:23.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:23.967 [main] [30mTRACE[m  - ####################################################
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:23.968 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:23.968 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:23.968 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.968 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.968 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:23.968 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:23.971 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:23.971 [main] [30mTRACE[m  - ##################################################
13:49:23.971 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:23.971 [main] [30mTRACE[m  - ##################################################

13:49:23.971 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:24.782 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:24.782 [main] [30mTRACE[m  - ###############################
13:49:24.782 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:24.782 [main] [30mTRACE[m  - ###############################
13:49:24.985 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:24.985 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:24.985 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:24.985 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:24.985 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:25.189 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:25.189 [main] [30mTRACE[m  - #####################################
13:49:25.189 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:25.189 [main] [30mTRACE[m  - #####################################
13:49:25.189 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:25.190 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:25.746 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:25.747 [main] [32mINFO [m  - Instance "Pattern"
13:49:25.747 [main] [32mINFO [m  - Instance "Matcher"
13:49:25.747 [main] [32mINFO [m  - IF - Match
13:49:25.747 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:25.747 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:25.747 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:25.747 [main] [30mTRACE[m  - ###################################
13:49:25.747 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:25.747 [main] [30mTRACE[m  - ###################################

13:49:25.747 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:25.747 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:25.747 [main] [30mTRACE[m  - ##########################################
13:49:25.747 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:25.747 [main] [30mTRACE[m  - ##########################################
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:25.748 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:25.748 [main] [30mTRACE[m  - ########################################
13:49:25.748 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:25.748 [main] [30mTRACE[m  - ########################################

13:49:25.748 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:25.748 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:25.748 [main] [30mTRACE[m  - ##############################################
13:49:25.748 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:25.748 [main] [30mTRACE[m  - ##############################################
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:25.748 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:25.748 [main] [30mTRACE[m  - ##########################################
13:49:25.748 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:25.748 [main] [30mTRACE[m  - ##########################################

13:49:25.748 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:25.748 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:25.748 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:25.749 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:25.749 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:25.749 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:25.749 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:25.749 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:25.749 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:25.749 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:25.749 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:25.749 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:25.749 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:25.954 [main] [30mTRACE[m  - ####################################################
13:49:25.954 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:25.955 [main] [30mTRACE[m  - ####################################################
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:25.955 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:25.955 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:25.958 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.958 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.958 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:25.958 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.958 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.958 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:25.958 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.958 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.958 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:25.958 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:25.958 [main] [30mTRACE[m  - ##################################################
13:49:25.958 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:25.958 [main] [30mTRACE[m  - ##################################################

13:49:25.958 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:26.773 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:26.773 [main] [30mTRACE[m  - ###############################
13:49:26.773 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:26.773 [main] [30mTRACE[m  - ###############################
13:49:26.976 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:26.977 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:26.977 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:26.977 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:26.977 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:27.179 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:27.180 [main] [30mTRACE[m  - #####################################
13:49:27.180 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:27.180 [main] [30mTRACE[m  - #####################################
13:49:27.180 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:27.180 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:28.282 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:28.282 [main] [32mINFO [m  - Instance "Pattern"
13:49:28.282 [main] [32mINFO [m  - Instance "Matcher"
13:49:28.282 [main] [32mINFO [m  - IF - Match
13:49:28.283 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:28.283 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:28.283 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:28.283 [main] [30mTRACE[m  - ###################################
13:49:28.283 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:28.283 [main] [30mTRACE[m  - ###################################

13:49:28.283 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:28.283 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:28.283 [main] [30mTRACE[m  - ##########################################
13:49:28.283 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:28.283 [main] [30mTRACE[m  - ##########################################
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:28.283 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:28.283 [main] [30mTRACE[m  - ########################################
13:49:28.283 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:28.283 [main] [30mTRACE[m  - ########################################

13:49:28.283 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:28.283 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:28.283 [main] [30mTRACE[m  - ##############################################
13:49:28.283 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:28.283 [main] [30mTRACE[m  - ##############################################
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:28.284 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:28.284 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:28.284 [main] [30mTRACE[m  - ##########################################
13:49:28.284 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:28.284 [main] [30mTRACE[m  - ##########################################

13:49:28.284 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:28.284 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:28.284 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:28.284 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:28.284 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:28.285 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:28.285 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:28.285 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:28.286 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:28.286 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:28.287 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:28.287 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:28.287 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:28.498 [main] [30mTRACE[m  - ####################################################
13:49:28.498 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:28.498 [main] [30mTRACE[m  - ####################################################
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:28.498 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:28.498 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:28.498 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:28.500 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.500 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.500 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:28.500 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:28.500 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.500 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.500 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:28.500 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:28.500 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:28.500 [main] [30mTRACE[m  - ##################################################
13:49:28.500 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:28.500 [main] [30mTRACE[m  - ##################################################

13:49:28.500 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:29.310 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:29.310 [main] [30mTRACE[m  - ###############################
13:49:29.311 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:29.311 [main] [30mTRACE[m  - ###############################
13:49:29.513 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:29.513 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:29.513 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:29.513 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:29.513 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:29.717 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:29.717 [main] [30mTRACE[m  - #####################################
13:49:29.717 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:29.717 [main] [30mTRACE[m  - #####################################
13:49:29.717 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:29.717 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:31.415 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:31.416 [main] [32mINFO [m  - Instance "Pattern"
13:49:31.416 [main] [32mINFO [m  - Instance "Matcher"
13:49:31.416 [main] [32mINFO [m  - IF - Match
13:49:31.416 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:31.416 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:31.416 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:31.416 [main] [30mTRACE[m  - ###################################
13:49:31.416 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:31.416 [main] [30mTRACE[m  - ###################################

13:49:31.416 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:31.416 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:31.416 [main] [30mTRACE[m  - ##########################################
13:49:31.416 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:31.416 [main] [30mTRACE[m  - ##########################################
13:49:31.416 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:31.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:31.416 [main] [30mTRACE[m  - ########################################
13:49:31.416 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:31.416 [main] [30mTRACE[m  - ########################################

13:49:31.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:31.417 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:31.417 [main] [30mTRACE[m  - ##############################################
13:49:31.417 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:31.417 [main] [30mTRACE[m  - ##############################################
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:31.417 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:31.417 [main] [30mTRACE[m  - ##########################################
13:49:31.417 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:31.417 [main] [30mTRACE[m  - ##########################################

13:49:31.417 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:31.417 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:31.417 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:31.417 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:31.417 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:31.417 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:31.417 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:31.418 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:31.418 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:31.418 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:31.418 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:31.419 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:31.419 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:31.620 [main] [30mTRACE[m  - ####################################################
13:49:31.621 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:31.621 [main] [30mTRACE[m  - ####################################################
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:31.621 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:31.621 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.624 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:31.624 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.624 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.624 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:31.624 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:31.624 [main] [30mTRACE[m  - ##################################################
13:49:31.624 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:31.624 [main] [30mTRACE[m  - ##################################################

13:49:31.624 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:32.433 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:32.433 [main] [30mTRACE[m  - ###############################
13:49:32.433 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:32.433 [main] [30mTRACE[m  - ###############################
13:49:32.636 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:32.636 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:32.636 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:32.636 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:32.636 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:32.841 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:32.841 [main] [30mTRACE[m  - #####################################
13:49:32.841 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:32.841 [main] [30mTRACE[m  - #####################################
13:49:32.842 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:32.842 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:34.274 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:34.274 [main] [32mINFO [m  - Instance "Pattern"
13:49:34.274 [main] [32mINFO [m  - Instance "Matcher"
13:49:34.274 [main] [32mINFO [m  - IF - Match
13:49:34.274 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:34.274 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:34.274 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:34.275 [main] [30mTRACE[m  - ###################################
13:49:34.275 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:34.275 [main] [30mTRACE[m  - ###################################

13:49:34.275 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:34.275 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.275 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:34.275 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:34.275 [main] [30mTRACE[m  - ########################################
13:49:34.275 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:34.275 [main] [30mTRACE[m  - ########################################

13:49:34.275 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:34.275 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:34.275 [main] [30mTRACE[m  - ##############################################
13:49:34.275 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:34.275 [main] [30mTRACE[m  - ##############################################
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:34.275 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.276 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:34.276 [main] [30mTRACE[m  - ##########################################

13:49:34.276 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:34.276 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:34.276 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:34.276 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:34.276 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:34.276 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:34.276 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:34.276 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:34.276 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:34.277 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:34.277 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:34.277 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:34.278 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:34.482 [main] [30mTRACE[m  - ####################################################
13:49:34.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:34.482 [main] [30mTRACE[m  - ####################################################
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:34.482 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:34.482 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:34.482 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.484 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:34.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.484 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:34.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:34.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:34.485 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:34.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:34.485 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:34.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:34.486 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.486 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:34.487 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:34.487 [main] [30mTRACE[m  - ##################################################
13:49:34.487 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:34.488 [main] [30mTRACE[m  - ##################################################

13:49:34.488 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:35.301 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:35.301 [main] [30mTRACE[m  - ###############################
13:49:35.301 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:35.301 [main] [30mTRACE[m  - ###############################
13:49:35.504 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:35.504 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:35.504 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:35.504 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:35.504 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:35.707 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:35.708 [main] [30mTRACE[m  - #####################################
13:49:35.708 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:35.708 [main] [30mTRACE[m  - #####################################
13:49:35.708 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:35.708 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:37.329 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:49:37.329 [main] [32mINFO [m  - Instance "Pattern"
13:49:37.330 [main] [32mINFO [m  - Instance "Matcher"
13:49:37.330 [main] [33mWARN [m  - ELSE - Error
13:49:37.330 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:49:37.534 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:37.534 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:49:37.534 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:37.534 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:37.739 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:49:38.824 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:38.824 [main] [32mINFO [m  - Instance "Pattern"
13:49:38.824 [main] [32mINFO [m  - Instance "Matcher"
13:49:38.824 [main] [32mINFO [m  - IF - Match
13:49:38.824 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:38.825 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:38.825 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:38.825 [main] [30mTRACE[m  - ###################################
13:49:38.825 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:38.825 [main] [30mTRACE[m  - ###################################

13:49:38.825 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:38.825 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:38.825 [main] [30mTRACE[m  - ##########################################
13:49:38.825 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:38.825 [main] [30mTRACE[m  - ##########################################
13:49:38.825 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:38.825 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:38.825 [main] [30mTRACE[m  - ########################################
13:49:38.825 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:38.825 [main] [30mTRACE[m  - ########################################

13:49:38.825 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:38.825 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:38.825 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:38.825 [main] [30mTRACE[m  - ##############################################
13:49:38.825 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:38.826 [main] [30mTRACE[m  - ##############################################
13:49:38.826 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:38.826 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:38.826 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:38.826 [main] [30mTRACE[m  - ##########################################
13:49:38.826 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:38.826 [main] [30mTRACE[m  - ##########################################

13:49:38.826 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:38.826 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:38.826 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:38.826 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:38.826 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:38.826 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:38.826 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:38.826 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:38.826 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:38.827 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:38.827 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:38.827 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:38.828 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:39.033 [main] [30mTRACE[m  - ####################################################
13:49:39.033 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:39.033 [main] [30mTRACE[m  - ####################################################
13:49:39.033 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:39.033 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:39.034 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:39.034 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.037 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:39.037 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.037 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.037 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:39.037 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.037 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.037 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:39.037 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:39.037 [main] [30mTRACE[m  - ##################################################
13:49:39.037 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:39.037 [main] [30mTRACE[m  - ##################################################

13:49:39.037 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:39.852 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:39.852 [main] [30mTRACE[m  - ###############################
13:49:39.852 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:39.852 [main] [30mTRACE[m  - ###############################
13:49:40.055 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:40.055 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:40.055 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:40.055 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:40.055 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:40.259 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:40.259 [main] [30mTRACE[m  - #####################################
13:49:40.259 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:40.259 [main] [30mTRACE[m  - #####################################
13:49:40.259 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:40.259 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:41.502 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:41.502 [main] [32mINFO [m  - Instance "Pattern"
13:49:41.502 [main] [32mINFO [m  - Instance "Matcher"
13:49:41.502 [main] [32mINFO [m  - IF - Match
13:49:41.502 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:41.502 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:41.502 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:41.502 [main] [30mTRACE[m  - ###################################
13:49:41.503 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:41.503 [main] [30mTRACE[m  - ###################################

13:49:41.503 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:41.503 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:41.503 [main] [30mTRACE[m  - ##########################################
13:49:41.503 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:41.503 [main] [30mTRACE[m  - ##########################################
13:49:41.503 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:41.503 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:41.503 [main] [30mTRACE[m  - ########################################
13:49:41.503 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:41.503 [main] [30mTRACE[m  - ########################################

13:49:41.503 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:41.503 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:41.503 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:41.503 [main] [30mTRACE[m  - ##############################################
13:49:41.504 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:41.504 [main] [30mTRACE[m  - ##############################################
13:49:41.504 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:41.504 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:41.504 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:41.504 [main] [30mTRACE[m  - ##########################################
13:49:41.504 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:41.504 [main] [30mTRACE[m  - ##########################################

13:49:41.504 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:41.504 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:41.504 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:41.504 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:41.504 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:41.504 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:41.504 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:41.504 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:41.504 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:41.504 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:41.504 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:41.505 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:41.505 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:41.710 [main] [30mTRACE[m  - ####################################################
13:49:41.710 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:41.710 [main] [30mTRACE[m  - ####################################################
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:41.710 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:41.710 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:41.711 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.711 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:41.712 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.712 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:41.712 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.712 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:41.713 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.713 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:41.713 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.713 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:41.714 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:41.714 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:41.715 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:41.715 [main] [30mTRACE[m  - ##################################################
13:49:41.715 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:41.715 [main] [30mTRACE[m  - ##################################################

13:49:41.715 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:42.528 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:42.528 [main] [30mTRACE[m  - ###############################
13:49:42.528 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:42.528 [main] [30mTRACE[m  - ###############################
13:49:42.731 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:42.732 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:42.732 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:42.732 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:42.732 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:42.935 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:42.935 [main] [30mTRACE[m  - #####################################
13:49:42.935 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:42.935 [main] [30mTRACE[m  - #####################################
13:49:42.935 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:42.935 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:43.536 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:43.537 [main] [32mINFO [m  - Instance "Pattern"
13:49:43.537 [main] [32mINFO [m  - Instance "Matcher"
13:49:43.537 [main] [32mINFO [m  - IF - Match
13:49:43.537 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:43.537 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:43.537 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:43.537 [main] [30mTRACE[m  - ###################################
13:49:43.537 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:43.537 [main] [30mTRACE[m  - ###################################

13:49:43.537 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:43.537 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:43.537 [main] [30mTRACE[m  - ##########################################
13:49:43.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:43.537 [main] [30mTRACE[m  - ##########################################
13:49:43.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:43.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:43.537 [main] [30mTRACE[m  - ########################################
13:49:43.537 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:43.537 [main] [30mTRACE[m  - ########################################

13:49:43.538 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:43.538 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:43.538 [main] [30mTRACE[m  - ##############################################
13:49:43.538 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:43.538 [main] [30mTRACE[m  - ##############################################
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:43.538 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:43.538 [main] [30mTRACE[m  - ##########################################
13:49:43.538 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:43.538 [main] [30mTRACE[m  - ##########################################

13:49:43.538 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:43.538 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:43.538 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:43.538 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:43.539 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:43.539 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:43.539 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:43.539 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:43.539 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:43.539 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:43.539 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:43.539 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:43.539 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:43.742 [main] [30mTRACE[m  - ####################################################
13:49:43.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:43.742 [main] [30mTRACE[m  - ####################################################
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:43.742 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:43.742 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:43.742 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:43.743 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.743 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:43.743 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.743 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:43.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:43.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:43.745 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:43.745 [main] [30mTRACE[m  - ##################################################
13:49:43.745 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:43.745 [main] [30mTRACE[m  - ##################################################

13:49:43.745 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:44.560 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:44.560 [main] [30mTRACE[m  - ###############################
13:49:44.560 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:44.560 [main] [30mTRACE[m  - ###############################
13:49:44.763 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:44.763 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:44.764 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:44.764 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:44.764 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:44.969 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:44.969 [main] [30mTRACE[m  - #####################################
13:49:44.969 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:44.969 [main] [30mTRACE[m  - #####################################
13:49:44.969 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:44.969 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:46.124 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:46.124 [main] [32mINFO [m  - Instance "Pattern"
13:49:46.124 [main] [32mINFO [m  - Instance "Matcher"
13:49:46.124 [main] [32mINFO [m  - IF - Match
13:49:46.124 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:46.124 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:46.124 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:46.124 [main] [30mTRACE[m  - ###################################
13:49:46.124 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:46.125 [main] [30mTRACE[m  - ###################################

13:49:46.125 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:46.125 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:46.125 [main] [30mTRACE[m  - ##########################################
13:49:46.125 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:46.125 [main] [30mTRACE[m  - ##########################################
13:49:46.125 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:46.125 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:46.125 [main] [30mTRACE[m  - ########################################
13:49:46.125 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:46.125 [main] [30mTRACE[m  - ########################################

13:49:46.125 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:46.125 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:46.125 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:46.125 [main] [30mTRACE[m  - ##############################################
13:49:46.126 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:46.126 [main] [30mTRACE[m  - ##############################################
13:49:46.126 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:46.126 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:46.126 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:46.126 [main] [30mTRACE[m  - ##########################################
13:49:46.126 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:46.126 [main] [30mTRACE[m  - ##########################################

13:49:46.126 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:46.126 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:46.126 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:46.126 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:46.126 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:46.127 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:46.127 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:46.127 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:46.127 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:46.127 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:46.132 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:46.132 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:46.132 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:46.336 [main] [30mTRACE[m  - ####################################################
13:49:46.336 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:46.337 [main] [30mTRACE[m  - ####################################################
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:46.337 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:46.337 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.340 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:46.340 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.340 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.340 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:46.340 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:46.340 [main] [30mTRACE[m  - ##################################################
13:49:46.340 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:46.340 [main] [30mTRACE[m  - ##################################################

13:49:46.340 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:47.155 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:47.155 [main] [30mTRACE[m  - ###############################
13:49:47.155 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:47.155 [main] [30mTRACE[m  - ###############################
13:49:47.360 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:47.360 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:47.360 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:47.361 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:47.361 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:47.562 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:47.562 [main] [30mTRACE[m  - #####################################
13:49:47.562 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:47.562 [main] [30mTRACE[m  - #####################################
13:49:47.562 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:47.562 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:48.627 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:48.627 [main] [32mINFO [m  - Instance "Pattern"
13:49:48.627 [main] [32mINFO [m  - Instance "Matcher"
13:49:48.628 [main] [32mINFO [m  - IF - Match
13:49:48.628 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:48.628 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:48.628 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:48.628 [main] [30mTRACE[m  - ###################################
13:49:48.628 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:48.628 [main] [30mTRACE[m  - ###################################

13:49:48.628 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:48.628 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:48.628 [main] [30mTRACE[m  - ##########################################
13:49:48.628 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:48.628 [main] [30mTRACE[m  - ##########################################
13:49:48.628 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:48.628 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:48.628 [main] [30mTRACE[m  - ########################################
13:49:48.628 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:48.628 [main] [30mTRACE[m  - ########################################

13:49:48.628 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:48.628 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:48.628 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:48.628 [main] [30mTRACE[m  - ##############################################
13:49:48.629 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:48.629 [main] [30mTRACE[m  - ##############################################
13:49:48.629 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:48.629 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:48.629 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:48.629 [main] [30mTRACE[m  - ##########################################
13:49:48.629 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:48.629 [main] [30mTRACE[m  - ##########################################

13:49:48.629 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:48.629 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:48.629 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:48.629 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:48.629 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:48.629 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:48.629 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:48.629 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:48.630 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:48.630 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:48.630 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:48.630 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:48.630 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:48.836 [main] [30mTRACE[m  - ####################################################
13:49:48.836 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:48.836 [main] [30mTRACE[m  - ####################################################
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:48.836 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:48.836 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:48.836 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.836 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:48.836 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.839 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:48.839 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.839 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.839 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:48.839 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.839 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:48.839 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.839 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.839 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:48.839 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:48.839 [main] [30mTRACE[m  - ##################################################
13:49:48.839 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:48.839 [main] [30mTRACE[m  - ##################################################

13:49:48.839 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:49.651 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:49.651 [main] [30mTRACE[m  - ###############################
13:49:49.651 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:49.652 [main] [30mTRACE[m  - ###############################
13:49:49.854 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:49.854 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:49.854 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:49.854 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:49.854 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:50.058 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:50.058 [main] [30mTRACE[m  - #####################################
13:49:50.058 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:50.058 [main] [30mTRACE[m  - #####################################
13:49:50.058 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:50.058 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:51.088 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:51.088 [main] [32mINFO [m  - Instance "Pattern"
13:49:51.088 [main] [32mINFO [m  - Instance "Matcher"
13:49:51.088 [main] [32mINFO [m  - IF - Match
13:49:51.088 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:51.088 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:51.088 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:51.088 [main] [30mTRACE[m  - ###################################
13:49:51.088 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:51.088 [main] [30mTRACE[m  - ###################################

13:49:51.088 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:51.089 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:51.089 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:51.089 [main] [30mTRACE[m  - ########################################
13:49:51.089 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:51.089 [main] [30mTRACE[m  - ########################################

13:49:51.089 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:51.089 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:51.089 [main] [30mTRACE[m  - ##############################################
13:49:51.089 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:51.089 [main] [30mTRACE[m  - ##############################################
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:51.089 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:51.089 [main] [30mTRACE[m  - ##########################################

13:49:51.089 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:51.089 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:51.090 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:51.090 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:51.090 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:51.090 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:51.090 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:51.090 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:51.090 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:51.090 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:51.091 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:51.092 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:51.092 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:51.294 [main] [30mTRACE[m  - ####################################################
13:49:51.294 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:51.294 [main] [30mTRACE[m  - ####################################################
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:51.294 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:51.294 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:51.294 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:51.295 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.295 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.295 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.295 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.295 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:51.297 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.297 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.297 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:51.297 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.297 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.297 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:51.297 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:51.297 [main] [30mTRACE[m  - ##################################################
13:49:51.297 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:51.297 [main] [30mTRACE[m  - ##################################################

13:49:51.297 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:52.113 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:52.113 [main] [30mTRACE[m  - ###############################
13:49:52.113 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:52.113 [main] [30mTRACE[m  - ###############################
13:49:52.315 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:52.316 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:52.316 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:52.316 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:52.316 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:52.519 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:52.519 [main] [30mTRACE[m  - #####################################
13:49:52.519 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:52.519 [main] [30mTRACE[m  - #####################################
13:49:52.519 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:52.520 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:52.754 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:49:52.754 [main] [32mINFO [m  - Instance "Pattern"
13:49:52.754 [main] [32mINFO [m  - Instance "Matcher"
13:49:52.755 [main] [33mWARN [m  - ELSE - Error
13:49:52.755 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:49:52.956 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:52.964 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:49:52.964 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:52.964 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:53.170 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:49:53.866 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:53.866 [main] [32mINFO [m  - Instance "Pattern"
13:49:53.866 [main] [32mINFO [m  - Instance "Matcher"
13:49:53.866 [main] [32mINFO [m  - IF - Match
13:49:53.866 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:53.866 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:53.866 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:53.866 [main] [30mTRACE[m  - ###################################
13:49:53.866 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:53.866 [main] [30mTRACE[m  - ###################################

13:49:53.866 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:53.866 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:53.866 [main] [30mTRACE[m  - ##########################################
13:49:53.866 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:53.866 [main] [30mTRACE[m  - ##########################################
13:49:53.866 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:53.866 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:53.866 [main] [30mTRACE[m  - ########################################
13:49:53.866 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:53.866 [main] [30mTRACE[m  - ########################################

13:49:53.866 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:53.866 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:53.866 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:53.867 [main] [30mTRACE[m  - ##############################################
13:49:53.867 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:53.867 [main] [30mTRACE[m  - ##############################################
13:49:53.867 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:53.867 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:53.867 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:53.867 [main] [30mTRACE[m  - ##########################################
13:49:53.867 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:53.867 [main] [30mTRACE[m  - ##########################################

13:49:53.867 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:53.867 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:53.867 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:53.867 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:53.867 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:53.867 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:53.867 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:53.867 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:53.867 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:53.867 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:53.867 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:53.867 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:53.867 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:54.068 [main] [30mTRACE[m  - ####################################################
13:49:54.069 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:54.069 [main] [30mTRACE[m  - ####################################################
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:54.069 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:54.069 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:54.069 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.069 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:54.069 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.072 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.072 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:54.072 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.072 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.072 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:54.072 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:54.072 [main] [30mTRACE[m  - ##################################################
13:49:54.072 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:54.072 [main] [30mTRACE[m  - ##################################################

13:49:54.072 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:54.887 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:54.888 [main] [30mTRACE[m  - ###############################
13:49:54.888 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:54.888 [main] [30mTRACE[m  - ###############################
13:49:55.090 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:55.090 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:55.091 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:55.091 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:55.091 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:55.293 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:55.293 [main] [30mTRACE[m  - #####################################
13:49:55.293 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:55.293 [main] [30mTRACE[m  - #####################################
13:49:55.293 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:55.294 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:56.239 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:56.239 [main] [32mINFO [m  - Instance "Pattern"
13:49:56.239 [main] [32mINFO [m  - Instance "Matcher"
13:49:56.239 [main] [32mINFO [m  - IF - Match
13:49:56.239 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:56.239 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:56.239 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:56.240 [main] [30mTRACE[m  - ###################################
13:49:56.240 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:56.240 [main] [30mTRACE[m  - ###################################

13:49:56.240 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:56.240 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:56.240 [main] [30mTRACE[m  - ##########################################
13:49:56.240 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:56.240 [main] [30mTRACE[m  - ##########################################
13:49:56.240 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:56.240 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:56.240 [main] [30mTRACE[m  - ########################################
13:49:56.240 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:56.241 [main] [30mTRACE[m  - ########################################

13:49:56.241 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:56.241 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:56.241 [main] [30mTRACE[m  - ##############################################
13:49:56.241 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:56.241 [main] [30mTRACE[m  - ##############################################
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:56.241 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:56.242 [main] [30mTRACE[m  - ##########################################
13:49:56.242 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:56.242 [main] [30mTRACE[m  - ##########################################

13:49:56.242 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:56.243 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:56.243 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:56.243 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:56.243 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:56.243 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:56.244 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:56.244 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:56.244 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:56.244 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:56.244 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:56.244 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:56.245 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:56.449 [main] [30mTRACE[m  - ####################################################
13:49:56.449 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:56.449 [main] [30mTRACE[m  - ####################################################
13:49:56.449 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:56.449 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:56.450 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:56.450 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.451 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.451 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.451 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:56.451 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.451 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.451 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:56.453 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:56.453 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:56.453 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:56.453 [main] [30mTRACE[m  - ##################################################
13:49:56.453 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:56.453 [main] [30mTRACE[m  - ##################################################

13:49:56.453 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:57.264 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:57.264 [main] [32mINFO [m  - IF - La partie n'est pas gagn√©e
13:49:57.264 [main] [32mINFO [m  - SWITCH - Mode du jeu "Recherche +/-"
13:49:57.264 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:57.264 [main] [36mDEBUG[m  - Incr√©mentation String() : CBEFBBDC
13:49:59.495 [main] [30mTRACE[m  - #############################
13:49:59.496 [main] [30mTRACE[m  - ### END ### Mode "Challenger"
13:49:59.496 [main] [30mTRACE[m  - #############################
13:49:59.496 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
13:49:59.496 [main] [30mTRACE[m  - ####################################################################
13:49:59.496 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
13:49:59.496 [main] [30mTRACE[m  - ####################################################################
13:49:59.904 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:49:59.904 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:49:59.904 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:33.170 [main] [30mTRACE[m  - #######################################
16:15:33.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
16:15:33.176 [main] [30mTRACE[m  - #######################################
16:15:33.176 [main] [30mTRACE[m  - ######################################################################################
16:15:33.176 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
16:15:33.176 [main] [30mTRACE[m  - ######################################################################################
16:15:33.177 [main] [30mTRACE[m  - #############################################
16:15:33.177 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
16:15:33.177 [main] [30mTRACE[m  - #############################################
16:15:33.179 [main] [30mTRACE[m  - ###########################################
16:15:33.179 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
16:15:33.179 [main] [30mTRACE[m  - ###########################################

16:15:33.182 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
16:15:33.182 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
16:15:33.183 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
16:15:33.183 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
16:15:33.184 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
16:15:33.184 [main] [30mTRACE[m  - #########################################################
16:15:33.184 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
16:15:33.184 [main] [30mTRACE[m  - #########################################################
16:15:33.184 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
16:15:33.185 [main] [32mINFO [m  - FOR - Lancement boucle infini
16:15:33.185 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
16:15:33.185 [main] [32mINFO [m  - IF - Premier tour
16:15:35.719 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
16:15:35.921 [main] [30mTRACE[m  - ###########################################################
16:15:35.922 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
16:15:35.922 [main] [30mTRACE[m  - ###########################################################
16:15:35.922 [main] [30mTRACE[m  - #######################################
16:15:35.922 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
16:15:35.922 [main] [30mTRACE[m  - #######################################
16:15:35.923 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
16:15:35.923 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
16:15:35.924 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
16:15:36.741 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:36.741 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:36.742 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:56.193 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:56.195 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
16:15:56.196 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
16:15:56.197 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:56.197 [main] [32mINFO [m  - CASE - "Games"
16:15:56.197 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:56.402 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
16:15:56.403 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
16:15:56.403 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
16:15:57.215 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:57.215 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:57.215 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:57.884 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:57.885 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
16:15:57.887 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
16:15:57.887 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:57.888 [main] [32mINFO [m  - CASE - "Comfirm"
16:15:57.888 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:57.888 [main] [32mINFO [m  - CASE - 'O'
16:15:57.889 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
16:15:57.890 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
16:15:57.890 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
16:15:57.891 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
16:15:58.912 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:58.912 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:58.912 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:59.465 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:59.467 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
16:15:59.468 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
16:15:59.468 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:59.469 [main] [32mINFO [m  - CASE - "Modes"
16:15:59.469 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:59.469 [main] [32mINFO [m  - CASE - '2'
16:15:59.675 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
16:15:59.676 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
16:15:59.676 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
16:16:00.491 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:16:00.492 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:16:00.492 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:16:01.163 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:16:01.164 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
16:16:01.165 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
16:16:01.165 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:16:01.166 [main] [32mINFO [m  - CASE - "Comfirm"
16:16:01.166 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:16:01.166 [main] [32mINFO [m  - CASE - 'O'
16:16:01.167 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
16:16:01.168 [main] [36mDEBUG[m  - str_ConfirmChoise : O
16:16:01.169 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
16:16:01.170 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
16:16:03.428 [main] [30mTRACE[m  - #####################################
16:16:03.428 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
16:16:03.428 [main] [30mTRACE[m  - #####################################

16:16:03.428 [main] [30mTRACE[m  - ################################################################################################
16:16:03.428 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
16:16:03.428 [main] [30mTRACE[m  - ################################################################################################
16:16:03.428 [main] [32mINFO [m  - SWITCH - Choix du jeu
16:16:03.429 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
16:16:03.441 [main] [32mINFO [m  - Instance "Mastermind"
16:16:03.442 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
16:16:03.442 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
16:16:03.442 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
16:16:03.443 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
16:16:03.443 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
16:16:03.444 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:03.444 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
16:16:03.447 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
16:16:03.447 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
16:16:03.447 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
16:16:03.447 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
16:16:03.448 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:03.449 [main] [32mINFO [m  - Lancement du compteur de tours
16:16:03.449 [main] [30mTRACE[m  - ############################
16:16:03.450 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:03.450 [main] [30mTRACE[m  - ############################
16:16:03.450 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:03.450 [main] [32mINFO [m  - SI - Premier tour
16:16:04.501 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
16:16:04.501 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
16:16:04.501 [main] [32mINFO [m  - SWITCH - Mode des jeux
16:16:04.501 [main] [32mINFO [m  - CASE - Mode "D√©fense"
16:16:04.703 [main] [32mINFO [m  - Lance le scanner pour la combinaison
16:16:04.704 [main] [30mTRACE[m  - #####################################
16:16:04.704 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
16:16:04.704 [main] [30mTRACE[m  - #####################################
16:16:04.705 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
16:16:04.705 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
16:16:19.000 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : abcdefab
16:16:19.002 [main] [32mINFO [m  - Instance "Pattern"
16:16:19.002 [main] [32mINFO [m  - Instance "Matcher"
16:16:19.002 [main] [32mINFO [m  - IF - Match
16:16:19.003 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
16:16:19.003 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
16:16:19.004 [main] [36mDEBUG[m  - String() Combinaison : abcdefab
16:16:19.004 [main] [30mTRACE[m  - ###################################
16:16:19.004 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
16:16:19.005 [main] [30mTRACE[m  - ###################################

16:16:19.005 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
16:16:19.005 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
16:16:19.005 [main] [30mTRACE[m  - ##########################################
16:16:19.006 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
16:16:19.006 [main] [30mTRACE[m  - ##########################################
16:16:19.007 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
16:16:19.007 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
16:16:19.007 [main] [30mTRACE[m  - ########################################
16:16:19.007 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
16:16:19.008 [main] [30mTRACE[m  - ########################################

16:16:19.008 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
16:16:19.008 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
16:16:19.008 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
16:16:19.009 [main] [30mTRACE[m  - ##############################################
16:16:19.009 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
16:16:19.009 [main] [30mTRACE[m  - ##############################################
16:16:19.009 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
16:16:19.010 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
16:16:19.010 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
16:16:19.011 [main] [30mTRACE[m  - ##########################################
16:16:19.011 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
16:16:19.011 [main] [30mTRACE[m  - ##########################################

16:16:19.011 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
16:16:19.011 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
16:16:19.012 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
16:16:19.013 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
16:16:19.014 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, B, C, D, E, F, A, B]
16:16:19.015 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, B, C, D, E, F, A, B]
16:16:19.015 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
16:16:19.015 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
16:16:19.016 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:19.016 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:19.016 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:19.020 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
16:16:19.020 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
16:16:19.225 [main] [30mTRACE[m  - #####################################
16:16:19.225 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:19.228 [main] [30mTRACE[m  - #####################################
16:16:19.228 [main] [32mINFO [m  - IF - Premier tour
16:16:19.228 [main] [30mTRACE[m  - ##########################################################
16:16:19.229 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_FirstTypeComputerProposal()
16:16:19.229 [main] [30mTRACE[m  - ##########################################################
16:16:19.229 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
16:16:19.229 [main] [32mINFO [m  - Initialisation (char[]) Nouvelle proposition de l'ordinateur
16:16:19.230 [main] [36mDEBUG[m  - Injection (char[]) Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:19.230 [main] [32mINFO [m  - Injection mouvelle proposition de l'ordinateur dans donn√©es de d√©fense
16:16:19.230 [main] [30mTRACE[m  - ########################################################
16:16:19.231 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_FirstTypeComputerProposal()
16:16:19.231 [main] [30mTRACE[m  - ########################################################

16:16:19.231 [main] [32mINFO [m  - Lancement premi√®re proposition de l'ordinateur
16:16:19.231 [main] [30mTRACE[m  - ###################################
16:16:19.231 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:19.231 [main] [30mTRACE[m  - ###################################

16:16:19.231 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.231 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:19.232 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.232 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:19.233 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:19.233 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:19.233 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  0
16:16:19.234 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [ ,  ,  ,  ,  ,  ,  ,  ]
16:16:19.234 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [E, B, C, F, F, C, B, E]
16:16:19.235 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
16:16:19.235 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [0, 0, 0]
16:16:19.235 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
16:16:19.236 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:19.249 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:19.249 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:19.249 [main] [36mDEBUG[m  - ch_PreviousLetter :                            
16:16:19.250 [main] [36mDEBUG[m  - ch_NewLetter :                                 
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################

16:16:19.250 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:19.251 [main] [36mDEBUG[m  - Incr√©mentation String() : EBCFFCBE
16:16:19.251 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : EBCFFCBE
16:16:19.462 [main] [30mTRACE[m  - ####################################################
16:16:19.463 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:19.463 [main] [30mTRACE[m  - ####################################################
16:16:19.464 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.464 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:19.465 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:19.466 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:19.466 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:19.467 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:19.467 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:19.467 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:19.469 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.469 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:19.469 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.469 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:19.469 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:19.469 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:19.470 [main] [30mTRACE[m  - ###############################################
16:16:19.470 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:19.470 [main] [30mTRACE[m  - ###############################################
16:16:19.470 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:19.471 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.471 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.472 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.472 [main] [36mDEBUG[m  - Index de la lettre
16:16:19.472 [main] [30mTRACE[m  - #############################################
16:16:19.472 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:19.472 [main] [30mTRACE[m  - #############################################

16:16:19.472 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:19.472 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:19.473 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:19.473 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
16:16:19.473 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:19.473 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:19.473 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:19.473 [main] [30mTRACE[m  - ###############################################
16:16:19.473 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:19.473 [main] [30mTRACE[m  - ###############################################
16:16:19.473 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:19.473 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.474 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.474 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.474 [main] [36mDEBUG[m  - Index de la lettre
16:16:19.474 [main] [30mTRACE[m  - #############################################
16:16:19.474 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:19.474 [main] [30mTRACE[m  - #############################################

16:16:19.474 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:19.474 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:19.474 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:19.475 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
16:16:19.475 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:19.475 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.475 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.475 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:19.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:19.476 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.476 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, false, false, false]
16:16:19.477 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:19.477 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.477 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.477 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 1, 0]
16:16:19.477 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.478 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:19.478 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.478 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:19.478 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:19.478 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.479 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, false]
16:16:19.479 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:19.479 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.479 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 1, 1]
16:16:19.479 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.479 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:19.479 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.480 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:19.480 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:19.480 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.480 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.480 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:19.480 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.480 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:19.480 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:19.481 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.481 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.481 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
16:16:19.481 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.481 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:19.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:19.481 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.481 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, true]
16:16:19.481 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:19.482 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.482 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.482 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 1, 1]
16:16:19.482 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.482 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:19.482 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.482 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:19.482 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:19.482 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.482 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.482 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 3]
16:16:19.483 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:19.483 [main] [30mTRACE[m  - ##################################################
16:16:19.483 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:19.484 [main] [30mTRACE[m  - ##################################################

16:16:19.484 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:20.301 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:20.301 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:20.301 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:20.304 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:20.304 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:20.525 [main] [30mTRACE[m  - ##########################
16:16:20.525 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:20.525 [main] [30mTRACE[m  - ##########################

16:16:20.525 [main] [30mTRACE[m  - ############################
16:16:20.525 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:20.525 [main] [30mTRACE[m  - ############################
16:16:20.525 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:20.525 [main] [30mTRACE[m  - #####################################
16:16:20.526 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:20.526 [main] [30mTRACE[m  - #####################################
16:16:20.526 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:20.526 [main] [30mTRACE[m  - ###########################################################
16:16:20.526 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:20.526 [main] [30mTRACE[m  - ###########################################################
16:16:20.526 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:20.526 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:20.527 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:20.527 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
16:16:20.527 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:20.527 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:20.528 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:20.528 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:20.528 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:20.528 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
16:16:20.528 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:20.528 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:20.529 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:20.529 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:20.529 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:20.529 [main] [30mTRACE[m  - ###############################################
16:16:20.530 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.530 [main] [30mTRACE[m  - ###############################################
16:16:20.530 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.530 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.530 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.530 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.530 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.530 [main] [30mTRACE[m  - #############################################
16:16:20.530 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.530 [main] [30mTRACE[m  - #############################################

16:16:20.530 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:20.530 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:20.530 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:20.530 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:20.530 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:20.530 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:20.531 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:20.531 [main] [30mTRACE[m  - #########################################################
16:16:20.531 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:20.531 [main] [30mTRACE[m  - #########################################################

16:16:20.531 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:20.531 [main] [30mTRACE[m  - ###################################
16:16:20.531 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:20.531 [main] [30mTRACE[m  - ###################################

16:16:20.531 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.531 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:20.531 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.531 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:20.531 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:20.531 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:20.531 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  1
16:16:20.531 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [F, B, C, F, F, C, B, E]
16:16:20.531 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [F, B, C, F, F, C, B, E]
16:16:20.531 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
16:16:20.532 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
16:16:20.532 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
16:16:20.532 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:20.534 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:20.534 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:20.534 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:20.534 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:20.534 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.535 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.535 [main] [30mTRACE[m  - ###########################################################################################################

16:16:20.535 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:20.535 [main] [36mDEBUG[m  - Incr√©mentation String() : FBCFFCBE
16:16:20.535 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : FBCFFCBE
16:16:20.737 [main] [30mTRACE[m  - ####################################################
16:16:20.737 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:20.737 [main] [30mTRACE[m  - ####################################################
16:16:20.737 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, B, C, F, F, C, B, E]
16:16:20.738 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:20.738 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:20.738 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:20.738 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:20.738 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:20.739 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:20.739 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:20.739 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.739 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:20.739 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.739 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:20.739 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:20.739 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:20.739 [main] [30mTRACE[m  - ###############################################
16:16:20.739 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.740 [main] [30mTRACE[m  - ###############################################
16:16:20.740 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.740 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.740 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.740 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.740 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.740 [main] [30mTRACE[m  - #############################################
16:16:20.740 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.740 [main] [30mTRACE[m  - #############################################

16:16:20.740 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:20.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:20.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:20.741 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
16:16:20.741 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:20.741 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:20.741 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:20.741 [main] [30mTRACE[m  - ###############################################
16:16:20.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.742 [main] [30mTRACE[m  - ###############################################
16:16:20.742 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.742 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.742 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.742 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.743 [main] [30mTRACE[m  - #############################################
16:16:20.743 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.743 [main] [30mTRACE[m  - #############################################

16:16:20.743 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:20.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:20.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:20.744 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
16:16:20.744 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:20.744 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:20.744 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.744 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, true, false, false]
16:16:20.745 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:20.745 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.745 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 0, 1]
16:16:20.745 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:20.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:20.746 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.746 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.746 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:20.746 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:20.747 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:20.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.749 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:20.749 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.749 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.749 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:20.749 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.749 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:20.749 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.749 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, true, false, true]
16:16:20.749 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:20.750 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.750 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.750 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 0, 1]
16:16:20.750 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.750 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:20.750 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.750 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:20.750 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:20.750 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.750 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.751 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, true]
16:16:20.751 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:20.751 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.751 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.751 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 1, 1]
16:16:20.751 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.751 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:20.751 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:20.751 [main] [30mTRACE[m  - ##################################################
16:16:20.751 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:20.751 [main] [30mTRACE[m  - ##################################################

16:16:20.751 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:21.561 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:21.562 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:21.562 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:21.562 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:21.562 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:21.765 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:21.765 [main] [30mTRACE[m  - ##############################################################
16:16:21.765 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:21.765 [main] [30mTRACE[m  - ##############################################################
16:16:21.766 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:21.766 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:21.767 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:21.767 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:21.767 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:21.768 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:21.768 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:21.768 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:21.769 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:21.769 [main] [30mTRACE[m  - ############################################################
16:16:21.769 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:21.769 [main] [30mTRACE[m  - ############################################################

16:16:21.769 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:21.769 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:21.769 [main] [30mTRACE[m  - ##########################
16:16:21.770 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:21.770 [main] [30mTRACE[m  - ##########################

16:16:21.770 [main] [30mTRACE[m  - ############################
16:16:21.770 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:21.770 [main] [30mTRACE[m  - ############################
16:16:21.770 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:21.771 [main] [30mTRACE[m  - #####################################
16:16:21.771 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:21.771 [main] [30mTRACE[m  - #####################################
16:16:21.771 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:21.771 [main] [30mTRACE[m  - ###########################################################
16:16:21.771 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:21.771 [main] [30mTRACE[m  - ###########################################################
16:16:21.771 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:21.771 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:21.772 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, B, C, F, F, C, B, E]
16:16:21.772 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
16:16:21.772 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:21.772 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:21.772 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:21.772 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:21.772 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:21.772 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
16:16:21.772 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:21.773 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:21.773 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:21.773 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
16:16:21.773 [main] [30mTRACE[m  - ###############################################
16:16:21.774 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.774 [main] [30mTRACE[m  - ###############################################
16:16:21.774 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.774 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.774 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.774 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.774 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.774 [main] [30mTRACE[m  - #############################################
16:16:21.774 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.774 [main] [30mTRACE[m  - #############################################

16:16:21.774 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:21.774 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:21.774 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:21.774 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:21.775 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:21.775 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:21.775 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:21.775 [main] [30mTRACE[m  - #########################################################
16:16:21.775 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:21.775 [main] [30mTRACE[m  - #########################################################

16:16:21.775 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:21.775 [main] [30mTRACE[m  - ###################################
16:16:21.775 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:21.775 [main] [30mTRACE[m  - ###################################

16:16:21.775 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.775 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:21.775 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.776 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:21.776 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:21.776 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:21.776 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  2
16:16:21.776 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, F, F, C, B, E]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, F, F, C, B, E]
16:16:21.777 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:21.777 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:21.780 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:21.780 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:21.780 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
16:16:21.780 [main] [36mDEBUG[m  - ch_NewLetter :                                A
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################

16:16:21.781 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:21.781 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCFFCBE
16:16:21.781 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCFFCBE
16:16:21.985 [main] [30mTRACE[m  - ####################################################
16:16:21.986 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:21.986 [main] [30mTRACE[m  - ####################################################
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:21.986 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:21.986 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:21.986 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:21.987 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.987 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:21.987 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.987 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.987 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
16:16:21.988 [main] [30mTRACE[m  - ###############################################
16:16:21.988 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.988 [main] [30mTRACE[m  - ###############################################
16:16:21.988 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.988 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.988 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.988 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.988 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.988 [main] [30mTRACE[m  - #############################################
16:16:21.988 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.988 [main] [30mTRACE[m  - #############################################

16:16:21.988 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
16:16:21.988 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:21.989 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:21.989 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:21.989 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.989 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:21.989 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:21.989 [main] [30mTRACE[m  - ###############################################
16:16:21.989 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.989 [main] [30mTRACE[m  - ###############################################
16:16:21.989 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.989 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.989 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.990 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.990 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.990 [main] [30mTRACE[m  - #############################################
16:16:21.990 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.990 [main] [30mTRACE[m  - #############################################

16:16:21.990 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:21.990 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:21.990 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:21.990 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:21.990 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.991 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:21.991 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:21.991 [main] [30mTRACE[m  - ###############################################
16:16:21.991 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.991 [main] [30mTRACE[m  - ###############################################
16:16:21.991 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.991 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.991 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.991 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.991 [main] [30mTRACE[m  - #############################################
16:16:21.991 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.991 [main] [30mTRACE[m  - #############################################

16:16:21.992 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:21.992 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:21.992 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:21.992 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.992 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.992 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:21.992 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.992 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:21.993 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:21.993 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.993 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:21.993 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.993 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:21.993 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:21.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:21.993 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:21.994 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:21.994 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.994 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:21.994 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:21.994 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:21.994 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.994 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:21.994 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:21.994 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:21.995 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.995 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.995 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:21.995 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.995 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 2]
16:16:21.995 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.995 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:21.995 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:21.996 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.996 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.996 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:21.996 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:21.996 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.996 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.997 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:21.997 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.997 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 2]
16:16:21.997 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
16:16:21.997 [main] [30mTRACE[m  - ##################################################
16:16:21.997 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:21.997 [main] [30mTRACE[m  - ##################################################

16:16:21.997 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:22.810 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:22.810 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:22.810 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:22.810 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:22.810 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:23.012 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:23.013 [main] [30mTRACE[m  - ##############################################################
16:16:23.013 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:23.013 [main] [30mTRACE[m  - ##############################################################
16:16:23.013 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:23.013 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 3, 2]
16:16:23.013 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 3, 2]
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:23.013 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:23.014 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:23.014 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:23.014 [main] [30mTRACE[m  - ############################################################
16:16:23.014 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:23.014 [main] [30mTRACE[m  - ############################################################

16:16:23.015 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:23.015 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:23.015 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:23.015 [main] [30mTRACE[m  - ##############################################
16:16:23.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:23.015 [main] [30mTRACE[m  - ##############################################
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:23.015 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:23.015 [main] [30mTRACE[m  - ###############################################
16:16:23.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.016 [main] [30mTRACE[m  - ###############################################
16:16:23.016 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.016 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.016 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.016 [main] [30mTRACE[m  - #############################################
16:16:23.016 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.016 [main] [30mTRACE[m  - #############################################

16:16:23.016 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:23.016 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:23.017 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.017 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.017 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.017 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.017 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.018 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.018 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.018 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.018 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.018 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.019 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.019 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.019 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.019 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.019 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.019 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:23.019 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:23.020 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.020 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:23.020 [main] [30mTRACE[m  - ############################################
16:16:23.020 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:23.020 [main] [30mTRACE[m  - ############################################

16:16:23.020 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:23.020 [main] [30mTRACE[m  - ##########################
16:16:23.020 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:23.021 [main] [30mTRACE[m  - ##########################

16:16:23.021 [main] [30mTRACE[m  - ############################
16:16:23.021 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:23.021 [main] [30mTRACE[m  - ############################
16:16:23.021 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:23.021 [main] [30mTRACE[m  - #####################################
16:16:23.021 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:23.021 [main] [30mTRACE[m  - #####################################
16:16:23.021 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:23.021 [main] [30mTRACE[m  - ###########################################################
16:16:23.022 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:23.022 [main] [30mTRACE[m  - ###########################################################
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:23.022 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.022 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:23.022 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:23.022 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:23.023 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:23.023 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:23.023 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:23.023 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
16:16:23.023 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:23.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:23.023 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:23.023 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:23.023 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:23.023 [main] [30mTRACE[m  - ###############################################
16:16:23.023 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.023 [main] [30mTRACE[m  - ###############################################
16:16:23.024 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.024 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.024 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.024 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.024 [main] [30mTRACE[m  - #############################################
16:16:23.024 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.024 [main] [30mTRACE[m  - #############################################

16:16:23.024 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:23.024 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:23.024 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:23.024 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:23.025 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:23.025 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:23.025 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:23.025 [main] [30mTRACE[m  - #########################################################
16:16:23.025 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:23.025 [main] [30mTRACE[m  - #########################################################

16:16:23.025 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:23.025 [main] [30mTRACE[m  - ###################################
16:16:23.025 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:23.025 [main] [30mTRACE[m  - ###################################

16:16:23.025 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.025 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:23.025 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.026 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:23.026 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:23.026 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:23.026 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  3
16:16:23.026 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, C, C, F, F, C, B, E]
16:16:23.026 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, C, C, F, F, C, B, E]
16:16:23.026 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:23.026 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
16:16:23.027 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:23.027 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:23.030 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, false, false, false]
16:16:23.030 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
16:16:23.030 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:23.031 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################

16:16:23.031 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:23.031 [main] [36mDEBUG[m  - Incr√©mentation String() : ACCFFCBE
16:16:23.031 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ACCFFCBE
16:16:23.233 [main] [30mTRACE[m  - ####################################################
16:16:23.233 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:23.233 [main] [30mTRACE[m  - ####################################################
16:16:23.233 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, C, C, F, F, C, B, E]
16:16:23.234 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:23.234 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:23.234 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:23.234 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:23.234 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.234 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:23.235 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:23.235 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:23.235 [main] [30mTRACE[m  - ###############################################
16:16:23.235 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.235 [main] [30mTRACE[m  - ###############################################
16:16:23.235 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.236 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.236 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.236 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.236 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.236 [main] [30mTRACE[m  - #############################################
16:16:23.236 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.236 [main] [30mTRACE[m  - #############################################

16:16:23.236 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:23.236 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:23.237 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:23.237 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:23.237 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:23.237 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.237 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:23.237 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:23.237 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:23.237 [main] [30mTRACE[m  - ###############################################
16:16:23.237 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.237 [main] [30mTRACE[m  - ###############################################
16:16:23.237 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.237 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.237 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.237 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.237 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.237 [main] [30mTRACE[m  - #############################################
16:16:23.237 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.237 [main] [30mTRACE[m  - #############################################

16:16:23.238 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, true, false, false, false, false, false]
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, true, false, false, false, false, false]
16:16:23.238 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 1, 0, 0, 0]
16:16:23.238 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:23.238 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.238 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.238 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:23.238 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.238 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.238 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 1]
16:16:23.239 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.239 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, true, false, false, true, false, false]
16:16:23.239 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.239 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 0, 1]
16:16:23.239 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.239 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 1]
16:16:23.239 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.239 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.239 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:23.240 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.240 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.240 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.240 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:23.240 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.240 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.240 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:23.240 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:23.241 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.241 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:23.241 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:23.241 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:23.241 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.241 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, false]
16:16:23.241 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:23.241 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 1, 1]
16:16:23.241 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.242 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:23.242 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:23.242 [main] [30mTRACE[m  - ##################################################
16:16:23.242 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:23.242 [main] [30mTRACE[m  - ##################################################

16:16:23.242 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:24.052 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:24.056 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:24.056 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:24.056 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:24.056 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:24.261 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:24.261 [main] [30mTRACE[m  - ##############################################################
16:16:24.261 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:24.261 [main] [30mTRACE[m  - ##############################################################
16:16:24.261 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
16:16:24.261 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:24.261 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:24.261 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
16:16:24.262 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:24.262 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:24.262 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
16:16:24.262 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
16:16:24.262 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
16:16:24.262 [main] [30mTRACE[m  - ############################################################
16:16:24.262 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:24.262 [main] [30mTRACE[m  - ############################################################

16:16:24.262 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:24.262 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
16:16:24.262 [main] [32mINFO [m  - IF - "‚â†" n'est pas apparu et que "=" a disparu
16:16:24.262 [main] [30mTRACE[m  - ##############################################
16:16:24.262 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_NegativeEquality()
16:16:24.263 [main] [30mTRACE[m  - ##############################################
16:16:24.263 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:24.263 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition : [A, C, C, F, F, C, B, E]
16:16:24.263 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:24.263 [main] [36mDEBUG[m  - R√©cup√©ration (int) Nouvelle position de remplacement : 1
16:16:24.264 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettre pr√©c√©dente : B
16:16:24.264 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.264 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:24.264 [main] [30mTRACE[m  - ###############################################
16:16:24.264 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.264 [main] [30mTRACE[m  - ###############################################
16:16:24.264 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.264 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.264 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.264 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.264 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.264 [main] [30mTRACE[m  - #############################################
16:16:24.264 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.264 [main] [30mTRACE[m  - #############################################

16:16:24.265 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre pr√©c√©dente : 1
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - ELSE - "i" = Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre est pr√©sente √† cette position = 'LETTRE PRECEDENTE'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.266 [main] [32mINFO [m  - Injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:24.266 [main] [30mTRACE[m  - ####################################################
16:16:24.266 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:24.266 [main] [30mTRACE[m  - ####################################################
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.266 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:24.266 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:24.266 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.266 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:24.266 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.266 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.267 [main] [30mTRACE[m  - #############################################
16:16:24.267 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - #############################################

16:16:24.267 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:24.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:24.267 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.268 [main] [30mTRACE[m  - #############################################
16:16:24.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - #############################################

16:16:24.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:24.268 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:24.268 [main] [30mTRACE[m  - ###############################################
16:16:24.268 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - ###############################################
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.268 [main] [30mTRACE[m  - #############################################
16:16:24.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - #############################################

16:16:24.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:24.268 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:24.269 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:24.269 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:24.269 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:24.269 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 2]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:24.270 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:24.270 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.270 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.270 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:24.270 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.270 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 2]
16:16:24.270 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
16:16:24.270 [main] [30mTRACE[m  - ##################################################
16:16:24.270 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:24.270 [main] [30mTRACE[m  - ##################################################

16:16:24.270 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:24.270 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:24.270 [main] [30mTRACE[m  - ############################################
16:16:24.270 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_NegativeEquality()
16:16:24.270 [main] [30mTRACE[m  - ############################################

16:16:24.270 [main] [32mINFO [m  - Lancement √©galit√© n√©gative
16:16:24.270 [main] [30mTRACE[m  - ##########################
16:16:24.270 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:24.270 [main] [30mTRACE[m  - ##########################

16:16:24.270 [main] [30mTRACE[m  - ############################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:24.270 [main] [30mTRACE[m  - ############################
16:16:24.270 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:24.270 [main] [30mTRACE[m  - #####################################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:24.270 [main] [30mTRACE[m  - #####################################
16:16:24.270 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:24.270 [main] [30mTRACE[m  - ###########################################################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:24.271 [main] [30mTRACE[m  - ###########################################################
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:24.271 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.271 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:24.271 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:24.271 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:24.271 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:24.271 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:24.271 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:24.272 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:24.272 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:24.272 [main] [30mTRACE[m  - ###############################################
16:16:24.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.272 [main] [30mTRACE[m  - ###############################################
16:16:24.272 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.272 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.272 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.272 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.272 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.272 [main] [30mTRACE[m  - #############################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.272 [main] [30mTRACE[m  - #############################################

16:16:24.272 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:24.272 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:24.272 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:24.272 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:24.272 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:24.272 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:24.272 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:24.272 [main] [30mTRACE[m  - #########################################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:24.272 [main] [30mTRACE[m  - #########################################################

16:16:24.272 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:24.272 [main] [30mTRACE[m  - ###################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:24.272 [main] [30mTRACE[m  - ###################################

16:16:24.272 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.273 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:24.273 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.273 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:24.273 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:24.273 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  4
16:16:24.273 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, D, F, F, C, B, E]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, D, F, F, C, B, E]
16:16:24.273 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:24.273 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, =]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:24.276 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:24.276 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:24.276 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:24.276 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################

16:16:24.276 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:24.276 [main] [36mDEBUG[m  - Incr√©mentation String() : ABDFFCBE
16:16:24.276 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABDFFCBE
16:16:24.481 [main] [30mTRACE[m  - ####################################################
16:16:24.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:24.482 [main] [30mTRACE[m  - ####################################################
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, D, F, F, C, B, E]
16:16:24.482 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:24.482 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:24.482 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.482 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:24.482 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.482 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:24.483 [main] [30mTRACE[m  - ###############################################
16:16:24.483 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.483 [main] [30mTRACE[m  - ###############################################
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.483 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.483 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.483 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.483 [main] [30mTRACE[m  - #############################################
16:16:24.483 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.483 [main] [30mTRACE[m  - #############################################

16:16:24.483 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:24.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:24.483 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.484 [main] [30mTRACE[m  - ###############################################
16:16:24.484 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.484 [main] [30mTRACE[m  - ###############################################
16:16:24.484 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.484 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.484 [main] [30mTRACE[m  - #############################################
16:16:24.484 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.484 [main] [30mTRACE[m  - #############################################

16:16:24.484 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:24.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.484 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:24.484 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.484 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
16:16:24.485 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 0, 0]
16:16:24.485 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:24.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
16:16:24.485 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 0, 1]
16:16:24.485 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
16:16:24.486 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 1, 0, 1]
16:16:24.486 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
16:16:24.487 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 0, 1]
16:16:24.487 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:24.487 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
16:16:24.487 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 1, 1]
16:16:24.487 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:24.487 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:24.487 [main] [30mTRACE[m  - ##################################################
16:16:24.487 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:24.488 [main] [30mTRACE[m  - ##################################################

16:16:24.488 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:25.300 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:25.300 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:25.300 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:25.300 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
16:16:25.300 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:25.503 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:25.503 [main] [30mTRACE[m  - ##############################################################
16:16:25.503 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:25.503 [main] [30mTRACE[m  - ##############################################################
16:16:25.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
16:16:25.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:25.504 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 2
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:25.504 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:25.504 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:25.504 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:25.504 [main] [30mTRACE[m  - ############################################################
16:16:25.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:25.504 [main] [30mTRACE[m  - ############################################################

16:16:25.504 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:25.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:25.504 [main] [30mTRACE[m  - ##########################
16:16:25.504 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:25.504 [main] [30mTRACE[m  - ##########################

16:16:25.504 [main] [30mTRACE[m  - ############################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:25.504 [main] [30mTRACE[m  - ############################
16:16:25.504 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:25.504 [main] [30mTRACE[m  - #####################################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:25.504 [main] [30mTRACE[m  - #####################################
16:16:25.504 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:25.504 [main] [30mTRACE[m  - ###########################################################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:25.504 [main] [30mTRACE[m  - ###########################################################
16:16:25.504 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:25.505 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:25.505 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, D, F, F, C, B, E]
16:16:25.505 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:25.505 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:25.505 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:25.505 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:25.505 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:25.505 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:25.505 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:25.505 [main] [30mTRACE[m  - ###############################################
16:16:25.505 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.505 [main] [30mTRACE[m  - ###############################################
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.506 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.506 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.506 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.506 [main] [30mTRACE[m  - #############################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.506 [main] [30mTRACE[m  - #############################################

16:16:25.506 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:25.506 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:25.506 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:25.506 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:25.506 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:25.506 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:25.506 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:25.506 [main] [30mTRACE[m  - #########################################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:25.506 [main] [30mTRACE[m  - #########################################################

16:16:25.506 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:25.506 [main] [30mTRACE[m  - ###################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:25.507 [main] [30mTRACE[m  - ###################################

16:16:25.507 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.507 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:25.507 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.507 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:25.507 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:25.507 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  5
16:16:25.507 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, E, F, F, C, B, E]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, E, F, F, C, B, E]
16:16:25.507 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 3, 2]
16:16:25.507 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 5, 1]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:25.509 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:25.509 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:25.509 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:25.509 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:25.509 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.509 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.510 [main] [30mTRACE[m  - ###########################################################################################################

16:16:25.510 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:25.510 [main] [36mDEBUG[m  - Incr√©mentation String() : ABEFFCBE
16:16:25.510 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABEFFCBE
16:16:25.712 [main] [30mTRACE[m  - ####################################################
16:16:25.712 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:25.712 [main] [30mTRACE[m  - ####################################################
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, E, F, F, C, B, E]
16:16:25.713 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:25.713 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:25.713 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:25.713 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:25.713 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.713 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:25.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:25.713 [main] [30mTRACE[m  - ###############################################
16:16:25.713 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.713 [main] [30mTRACE[m  - ###############################################
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.714 [main] [30mTRACE[m  - #############################################
16:16:25.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - #############################################

16:16:25.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:25.714 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:25.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:25.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:25.714 [main] [30mTRACE[m  - ###############################################
16:16:25.714 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - ###############################################
16:16:25.714 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.714 [main] [30mTRACE[m  - #############################################
16:16:25.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - #############################################

16:16:25.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:25.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:25.715 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, false, false]
16:16:25.715 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 0]
16:16:25.715 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:25.715 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, true, false, false]
16:16:25.715 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 1]
16:16:25.716 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, false]
16:16:25.716 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 1, 1]
16:16:25.716 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:25.716 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:25.717 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:25.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:25.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:25.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:25.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 4, 2]
16:16:25.717 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:25.717 [main] [30mTRACE[m  - ##################################################
16:16:25.717 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:25.717 [main] [30mTRACE[m  - ##################################################

16:16:25.717 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:26.530 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:26.530 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:26.531 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:26.531 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 6
16:16:26.531 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:26.734 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:26.734 [main] [30mTRACE[m  - ##############################################################
16:16:26.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:26.734 [main] [30mTRACE[m  - ##############################################################
16:16:26.734 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:26.734 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:26.734 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:26.734 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:26.734 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:26.735 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:26.735 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:26.735 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:26.736 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:26.736 [main] [30mTRACE[m  - ############################################################
16:16:26.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:26.736 [main] [30mTRACE[m  - ############################################################

16:16:26.736 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:26.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:26.736 [main] [30mTRACE[m  - ##########################
16:16:26.736 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:26.736 [main] [30mTRACE[m  - ##########################

16:16:26.736 [main] [30mTRACE[m  - ############################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:26.736 [main] [30mTRACE[m  - ############################
16:16:26.736 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:26.736 [main] [30mTRACE[m  - #####################################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:26.736 [main] [30mTRACE[m  - #####################################
16:16:26.736 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:26.736 [main] [30mTRACE[m  - ###########################################################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:26.736 [main] [30mTRACE[m  - ###########################################################
16:16:26.736 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:26.737 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:26.737 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, E, F, F, C, B, E]
16:16:26.737 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:26.737 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:26.737 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:26.737 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:26.737 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:26.737 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:26.737 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:26.738 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:26.738 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:26.738 [main] [30mTRACE[m  - ###############################################
16:16:26.738 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.738 [main] [30mTRACE[m  - ###############################################
16:16:26.738 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.738 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.738 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.738 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.738 [main] [30mTRACE[m  - #############################################
16:16:26.738 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.738 [main] [30mTRACE[m  - #############################################

16:16:26.738 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:26.738 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:26.738 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:26.738 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:26.738 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:26.738 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:26.738 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:26.738 [main] [30mTRACE[m  - #########################################################
16:16:26.738 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:26.739 [main] [30mTRACE[m  - #########################################################

16:16:26.739 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:26.739 [main] [30mTRACE[m  - ###################################
16:16:26.739 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:26.739 [main] [30mTRACE[m  - ###################################

16:16:26.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.739 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:26.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.739 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:26.739 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:26.739 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:26.739 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  6
16:16:26.739 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, F, F, F, C, B, E]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, F, F, F, C, B, E]
16:16:26.740 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 5, 1]
16:16:26.740 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 4, 2]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, ‚â†]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:26.743 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:26.743 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:26.743 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:26.743 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################

16:16:26.743 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:26.744 [main] [36mDEBUG[m  - Incr√©mentation String() : ABFFFCBE
16:16:26.744 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABFFFCBE
16:16:26.948 [main] [30mTRACE[m  - ####################################################
16:16:26.949 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:26.949 [main] [30mTRACE[m  - ####################################################
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, F, F, F, C, B, E]
16:16:26.949 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:26.949 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:26.949 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:26.949 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:26.949 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.950 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:26.950 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:26.950 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:26.950 [main] [30mTRACE[m  - ###############################################
16:16:26.950 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.950 [main] [30mTRACE[m  - ###############################################
16:16:26.950 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.950 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.950 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.950 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.950 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.950 [main] [30mTRACE[m  - #############################################
16:16:26.950 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.950 [main] [30mTRACE[m  - #############################################

16:16:26.950 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:26.950 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:26.950 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:26.950 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:26.950 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:26.951 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:26.951 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:26.951 [main] [30mTRACE[m  - ###############################################
16:16:26.951 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.951 [main] [30mTRACE[m  - ###############################################
16:16:26.951 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.951 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.951 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.951 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.951 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.951 [main] [30mTRACE[m  - #############################################
16:16:26.951 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.951 [main] [30mTRACE[m  - #############################################

16:16:26.951 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:26.951 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:26.951 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:26.951 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:26.951 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:26.951 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.951 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
16:16:26.952 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.952 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 0, 1]
16:16:26.952 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.952 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:26.952 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.953 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:26.953 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:26.953 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.953 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:26.953 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.953 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:26.953 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.953 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
16:16:26.953 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:26.954 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:26.954 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.954 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:26.954 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:26.954 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:26.955 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.955 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
16:16:26.955 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:26.955 [main] [30mTRACE[m  - ##################################################
16:16:26.955 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:26.955 [main] [30mTRACE[m  - ##################################################

16:16:26.955 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:27.768 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:27.768 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:27.768 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:27.768 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 7
16:16:27.768 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:27.973 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:27.973 [main] [30mTRACE[m  - ##############################################################
16:16:27.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:27.973 [main] [30mTRACE[m  - ##############################################################
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:27.974 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:27.974 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:27.974 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:27.974 [main] [30mTRACE[m  - ############################################################
16:16:27.974 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:27.974 [main] [30mTRACE[m  - ############################################################

16:16:27.974 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:27.974 [main] [30mTRACE[m  - ##########################
16:16:27.974 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:27.974 [main] [30mTRACE[m  - ##########################

16:16:27.974 [main] [30mTRACE[m  - ############################
16:16:27.974 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:27.974 [main] [30mTRACE[m  - ############################
16:16:27.974 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:27.974 [main] [30mTRACE[m  - #####################################
16:16:27.974 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:27.975 [main] [30mTRACE[m  - #####################################
16:16:27.975 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:27.975 [main] [30mTRACE[m  - ###########################################################
16:16:27.975 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:27.975 [main] [30mTRACE[m  - ###########################################################
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:27.975 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, F, F, F, C, B, E]
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:27.975 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:27.975 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:27.975 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:27.975 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:27.975 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:27.975 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:27.975 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:27.975 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
16:16:27.976 [main] [30mTRACE[m  - ###############################################
16:16:27.976 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:27.976 [main] [30mTRACE[m  - ###############################################
16:16:27.976 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:27.976 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:27.976 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:27.976 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:27.976 [main] [36mDEBUG[m  - Index de la lettre
16:16:27.976 [main] [30mTRACE[m  - #############################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:27.976 [main] [30mTRACE[m  - #############################################

16:16:27.976 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:27.976 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:27.976 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:27.976 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:27.976 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:27.976 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:27.976 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:27.976 [main] [30mTRACE[m  - #########################################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:27.976 [main] [30mTRACE[m  - #########################################################

16:16:27.976 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:27.976 [main] [30mTRACE[m  - ###################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:27.976 [main] [30mTRACE[m  - ###################################

16:16:27.976 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.976 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:27.976 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.976 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:27.976 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:27.976 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:27.976 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  7
16:16:27.977 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, A, F, F, C, B, E]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, A, F, F, C, B, E]
16:16:27.977 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 4, 2]
16:16:27.977 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 4, 2]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:27.978 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:27.978 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:27.978 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
16:16:27.978 [main] [36mDEBUG[m  - ch_NewLetter :                                A
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################

16:16:27.978 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:27.978 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAFFCBE
16:16:27.978 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABAFFCBE
16:16:28.179 [main] [30mTRACE[m  - ####################################################
16:16:28.179 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:28.179 [main] [30mTRACE[m  - ####################################################
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, F, F, C, B, E]
16:16:28.180 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:28.180 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:28.180 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:28.180 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:28.180 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.180 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:28.180 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:28.180 [main] [30mTRACE[m  - ###############################################
16:16:28.180 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:28.180 [main] [30mTRACE[m  - ###############################################
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.181 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.181 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.181 [main] [36mDEBUG[m  - Index de la lettre
16:16:28.181 [main] [30mTRACE[m  - #############################################
16:16:28.181 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:28.181 [main] [30mTRACE[m  - #############################################

16:16:28.181 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:28.181 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:28.181 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:28.181 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:28.181 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:28.181 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:28.181 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:28.181 [main] [30mTRACE[m  - ###############################################
16:16:28.181 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:28.181 [main] [30mTRACE[m  - ###############################################
16:16:28.181 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:28.181 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.181 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.182 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.182 [main] [36mDEBUG[m  - Index de la lettre
16:16:28.182 [main] [30mTRACE[m  - #############################################
16:16:28.182 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:28.182 [main] [30mTRACE[m  - #############################################

16:16:28.182 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:28.182 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:28.182 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.182 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:28.182 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:28.183 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.183 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:28.183 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
16:16:28.183 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
16:16:28.183 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.183 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:28.183 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:28.184 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:28.184 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
16:16:28.184 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 1]
16:16:28.184 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.184 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:28.184 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
16:16:28.184 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 1]
16:16:28.185 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.185 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:28.185 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:28.185 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.185 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, true, true]
16:16:28.185 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 1]
16:16:28.185 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.185 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:28.186 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:28.186 [main] [30mTRACE[m  - ##################################################
16:16:28.186 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:28.186 [main] [30mTRACE[m  - ##################################################

16:16:28.186 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:28.997 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:28.997 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:28.997 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:28.998 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 8
16:16:28.998 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:29.201 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:29.201 [main] [30mTRACE[m  - ##############################################################
16:16:29.201 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:29.201 [main] [30mTRACE[m  - ##############################################################
16:16:29.201 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:29.201 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:29.201 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:29.202 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
16:16:29.202 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:29.202 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
16:16:29.202 [main] [30mTRACE[m  - ############################################################
16:16:29.202 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:29.202 [main] [30mTRACE[m  - ############################################################

16:16:29.202 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:29.202 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:29.202 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
16:16:29.202 [main] [30mTRACE[m  - ################################################
16:16:29.202 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
16:16:29.202 [main] [30mTRACE[m  - ################################################
16:16:29.203 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:29.203 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 2
16:16:29.203 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : A
16:16:29.203 [main] [30mTRACE[m  - ###############################################
16:16:29.203 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.203 [main] [30mTRACE[m  - ###############################################
16:16:29.203 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.203 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.203 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.203 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.203 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.203 [main] [30mTRACE[m  - #############################################
16:16:29.203 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.203 [main] [30mTRACE[m  - #############################################

16:16:29.204 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 0
16:16:29.204 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
16:16:29.204 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
16:16:29.206 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:29.206 [main] [30mTRACE[m  - ##############################################
16:16:29.206 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
16:16:29.206 [main] [30mTRACE[m  - ##############################################
16:16:29.206 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
16:16:29.207 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:29.207 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.208 [main] [36mDEBUG[m  - (int) Nombre de tours : 5
16:16:29.208 [main] [30mTRACE[m  - ############################################
16:16:29.208 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
16:16:29.208 [main] [30mTRACE[m  - ############################################

16:16:29.208 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 5
16:16:29.209 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
16:16:29.209 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:29.209 [main] [30mTRACE[m  - ########################################################
16:16:29.209 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:29.209 [main] [30mTRACE[m  - ########################################################
16:16:29.209 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:29.210 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:29.210 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
16:16:29.210 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:29.210 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:29.210 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
16:16:29.210 [main] [30mTRACE[m  - ######################################################
16:16:29.210 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:29.211 [main] [30mTRACE[m  - ######################################################

16:16:29.211 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
16:16:29.211 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:29.211 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, F, F, C, B, E]
16:16:29.212 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:29.212 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:29.212 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAFCBE
16:16:29.213 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAFCBE
16:16:29.416 [main] [30mTRACE[m  - ####################################################
16:16:29.416 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:29.416 [main] [30mTRACE[m  - ####################################################
16:16:29.416 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.416 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:29.417 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:29.417 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:29.417 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:29.417 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:29.417 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.417 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:29.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.418 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.418 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.418 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.418 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.418 [main] [30mTRACE[m  - #############################################
16:16:29.418 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - #############################################

16:16:29.418 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:29.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:29.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:29.418 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:29.418 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:29.418 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.418 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.419 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.419 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.419 [main] [30mTRACE[m  - #############################################
16:16:29.419 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.419 [main] [30mTRACE[m  - #############################################

16:16:29.419 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:29.419 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:29.419 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.419 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:29.419 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:29.420 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:29.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.420 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:29.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:29.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
16:16:29.420 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
16:16:29.420 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 1]
16:16:29.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
16:16:29.421 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 1]
16:16:29.421 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:29.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
16:16:29.422 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 1]
16:16:29.422 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:29.422 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, true, true]
16:16:29.422 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 1]
16:16:29.422 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:29.422 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:29.423 [main] [30mTRACE[m  - ##################################################
16:16:29.423 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:29.423 [main] [30mTRACE[m  - ##################################################

16:16:29.423 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:30.234 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:30.234 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:30.234 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:30.235 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 9
16:16:30.235 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:30.438 [main] [30mTRACE[m  - ##############################################################
16:16:30.438 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:30.438 [main] [30mTRACE[m  - ##############################################################
16:16:30.438 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:30.438 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:30.439 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:30.439 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:30.439 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:30.439 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:30.439 [main] [30mTRACE[m  - ############################################################
16:16:30.439 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:30.439 [main] [30mTRACE[m  - ############################################################

16:16:30.439 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:30.440 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:30.440 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:30.440 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:30.440 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:30.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:30.442 [main] [30mTRACE[m  - ########################################################
16:16:30.442 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:30.442 [main] [30mTRACE[m  - ########################################################
16:16:30.442 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:30.442 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:30.442 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
16:16:30.442 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:30.442 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:30.442 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
16:16:30.442 [main] [30mTRACE[m  - ######################################################
16:16:30.442 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:30.442 [main] [30mTRACE[m  - ######################################################

16:16:30.442 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
16:16:30.442 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:30.442 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:30.442 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:30.442 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:30.443 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAACBE
16:16:30.443 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAACBE
16:16:30.648 [main] [30mTRACE[m  - ####################################################
16:16:30.648 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:30.648 [main] [30mTRACE[m  - ####################################################
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:30.648 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:30.648 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:30.648 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:30.649 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:30.649 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:30.649 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.649 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:30.649 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.649 [main] [30mTRACE[m  - ###############################################
16:16:30.649 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:30.649 [main] [30mTRACE[m  - ###############################################
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:30.649 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.649 [main] [36mDEBUG[m  - Index de la lettre
16:16:30.649 [main] [30mTRACE[m  - #############################################
16:16:30.649 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:30.649 [main] [30mTRACE[m  - #############################################

16:16:30.649 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:30.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:30.650 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:30.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:30.650 [main] [30mTRACE[m  - ###############################################
16:16:30.650 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:30.650 [main] [30mTRACE[m  - ###############################################
16:16:30.650 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:30.650 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.650 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.650 [main] [36mDEBUG[m  - Index de la lettre
16:16:30.650 [main] [30mTRACE[m  - #############################################
16:16:30.650 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:30.650 [main] [30mTRACE[m  - #############################################

16:16:30.650 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:30.651 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:30.651 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.651 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:30.651 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:30.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:30.652 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:30.652 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.652 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:30.652 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.652 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:30.652 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:30.652 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.652 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:30.652 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.652 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:30.652 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 0]
16:16:30.653 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.653 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
16:16:30.653 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:30.653 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.653 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:30.653 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 0]
16:16:30.653 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.653 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:30.654 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.654 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:30.654 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:30.654 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.654 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.654 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, false, true, true]
16:16:30.654 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:30.654 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.654 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.654 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 0]
16:16:30.654 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.654 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
16:16:30.654 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:30.654 [main] [30mTRACE[m  - ##################################################
16:16:30.654 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:30.654 [main] [30mTRACE[m  - ##################################################

16:16:30.654 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:31.462 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:31.462 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:31.463 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:31.463 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 10
16:16:31.463 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:31.666 [main] [30mTRACE[m  - ##############################################################
16:16:31.666 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:31.667 [main] [30mTRACE[m  - ##############################################################
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:31.667 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:31.667 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:31.667 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:31.667 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:31.667 [main] [30mTRACE[m  - ############################################################
16:16:31.667 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:31.667 [main] [30mTRACE[m  - ############################################################

16:16:31.667 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:31.667 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:31.667 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:31.667 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:31.670 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:31.670 [main] [30mTRACE[m  - ########################################################
16:16:31.670 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:31.670 [main] [30mTRACE[m  - ########################################################
16:16:31.670 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:31.670 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:31.670 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
16:16:31.670 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:31.670 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:31.670 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
16:16:31.670 [main] [30mTRACE[m  - ######################################################
16:16:31.670 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:31.670 [main] [30mTRACE[m  - ######################################################

16:16:31.670 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
16:16:31.671 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:31.671 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:31.671 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:31.671 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:31.671 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAABE
16:16:31.671 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAAABE
16:16:31.873 [main] [30mTRACE[m  - ####################################################
16:16:31.873 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:31.874 [main] [30mTRACE[m  - ####################################################
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:31.874 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:31.874 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:31.874 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:31.874 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:31.874 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:31.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:31.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.875 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.875 [main] [36mDEBUG[m  - Index de la lettre
16:16:31.875 [main] [30mTRACE[m  - #############################################
16:16:31.875 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - #############################################

16:16:31.875 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:31.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:31.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:31.875 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:31.875 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:31.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:31.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.876 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:31.876 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.876 [main] [36mDEBUG[m  - Index de la lettre
16:16:31.876 [main] [30mTRACE[m  - #############################################
16:16:31.876 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:31.876 [main] [30mTRACE[m  - #############################################

16:16:31.876 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:31.876 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:31.876 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.876 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:31.877 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:31.877 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.877 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:31.877 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:31.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:31.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.877 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:31.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.878 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:31.878 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.878 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.878 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.878 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:31.878 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.878 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:31.878 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:31.879 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:31.879 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.879 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:31.879 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:31.879 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:31.879 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.879 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:31.879 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:31.880 [main] [30mTRACE[m  - ##################################################
16:16:31.880 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:31.880 [main] [30mTRACE[m  - ##################################################

16:16:31.880 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:32.690 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:32.690 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:32.690 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:32.690 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 11
16:16:32.690 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:32.893 [main] [30mTRACE[m  - ##############################################################
16:16:32.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:32.893 [main] [30mTRACE[m  - ##############################################################
16:16:32.893 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:32.893 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:32.893 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:32.893 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:32.893 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:32.894 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:32.894 [main] [30mTRACE[m  - ############################################################
16:16:32.894 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:32.894 [main] [30mTRACE[m  - ############################################################

16:16:32.894 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:32.894 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:32.894 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:32.894 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:32.894 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:32.895 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:32.896 [main] [30mTRACE[m  - ########################################################
16:16:32.896 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:32.896 [main] [30mTRACE[m  - ########################################################
16:16:32.896 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:32.896 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:32.896 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 5
16:16:32.896 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:32.896 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:32.896 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 6
16:16:32.896 [main] [30mTRACE[m  - ######################################################
16:16:32.896 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:32.896 [main] [30mTRACE[m  - ######################################################

16:16:32.896 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 6
16:16:32.896 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:32.896 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:32.896 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:32.896 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:32.896 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAAAE
16:16:32.896 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAAAAE
16:16:33.097 [main] [30mTRACE[m  - ####################################################
16:16:33.097 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:33.097 [main] [30mTRACE[m  - ####################################################
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:33.098 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:33.098 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:33.098 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:33.098 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:33.098 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:33.098 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.098 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:33.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.098 [main] [30mTRACE[m  - ###############################################
16:16:33.098 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.098 [main] [30mTRACE[m  - ###############################################
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.098 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.098 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.098 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.099 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.099 [main] [30mTRACE[m  - #############################################
16:16:33.099 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.099 [main] [30mTRACE[m  - #############################################

16:16:33.099 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:33.099 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:33.099 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:33.099 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:33.099 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:33.099 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:33.099 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:33.099 [main] [30mTRACE[m  - ###############################################
16:16:33.099 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.099 [main] [30mTRACE[m  - ###############################################
16:16:33.099 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.100 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.100 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.100 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.100 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.100 [main] [30mTRACE[m  - #############################################
16:16:33.100 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.100 [main] [30mTRACE[m  - #############################################

16:16:33.100 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:33.100 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:33.100 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:33.100 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:33.101 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.101 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:33.101 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:33.101 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
16:16:33.101 [main] [30mTRACE[m  - ###############################################
16:16:33.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.101 [main] [30mTRACE[m  - ###############################################
16:16:33.101 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.101 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.101 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.101 [main] [30mTRACE[m  - #############################################
16:16:33.101 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.101 [main] [30mTRACE[m  - #############################################

16:16:33.101 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
16:16:33.101 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:33.101 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:33.101 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:33.101 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:33.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 1]
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:33.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 2]
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 3]
16:16:33.103 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 4]
16:16:33.103 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, false]
16:16:33.103 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 0]
16:16:33.103 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 4]
16:16:33.103 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 1, 4]
16:16:33.103 [main] [30mTRACE[m  - ##################################################
16:16:33.104 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:33.104 [main] [30mTRACE[m  - ##################################################

16:16:33.104 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:33.914 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:33.915 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:33.915 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:33.915 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 12
16:16:33.915 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:34.115 [main] [30mTRACE[m  - ##############################################################
16:16:34.116 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:34.116 [main] [30mTRACE[m  - ##############################################################
16:16:34.116 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:34.116 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 1, 4]
16:16:34.116 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 1, 4]
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:34.116 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
16:16:34.117 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:34.117 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:34.117 [main] [30mTRACE[m  - ############################################################
16:16:34.117 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:34.117 [main] [30mTRACE[m  - ############################################################

16:16:34.117 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:34.117 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:34.117 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:34.117 [main] [30mTRACE[m  - ##############################################
16:16:34.117 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:34.117 [main] [30mTRACE[m  - ##############################################
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:34.117 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:34.118 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:34.118 [main] [30mTRACE[m  - ###############################################
16:16:34.118 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.118 [main] [30mTRACE[m  - ###############################################
16:16:34.118 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.118 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.118 [main] [30mTRACE[m  - #############################################
16:16:34.118 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.118 [main] [30mTRACE[m  - #############################################

16:16:34.118 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.118 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:34.119 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:34.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.119 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:34.119 [main] [30mTRACE[m  - ############################################
16:16:34.119 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:34.119 [main] [30mTRACE[m  - ############################################

16:16:34.119 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:34.119 [main] [30mTRACE[m  - ##############################################
16:16:34.119 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
16:16:34.119 [main] [30mTRACE[m  - ##############################################

16:16:34.120 [main] [32mINFO [m  - Lancement diff√©rence positive
16:16:34.120 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
16:16:34.120 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
16:16:34.120 [main] [30mTRACE[m  - ##########################
16:16:34.120 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:34.120 [main] [30mTRACE[m  - ##########################

16:16:34.120 [main] [30mTRACE[m  - ############################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:34.120 [main] [30mTRACE[m  - ############################
16:16:34.120 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:34.120 [main] [30mTRACE[m  - #####################################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:34.120 [main] [30mTRACE[m  - #####################################
16:16:34.120 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:34.120 [main] [30mTRACE[m  - ###########################################################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:34.120 [main] [30mTRACE[m  - ###########################################################
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:34.120 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.120 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:34.120 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:34.121 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:34.121 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:34.121 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
16:16:34.121 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:34.121 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:34.121 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:34.121 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:34.121 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:34.121 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
16:16:34.121 [main] [30mTRACE[m  - ###############################################
16:16:34.121 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.121 [main] [30mTRACE[m  - ###############################################
16:16:34.121 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.121 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.121 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.122 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.122 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.122 [main] [30mTRACE[m  - #############################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.122 [main] [30mTRACE[m  - #############################################

16:16:34.122 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:34.122 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:34.122 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:34.122 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:34.122 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:34.122 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:34.122 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:34.122 [main] [30mTRACE[m  - #########################################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:34.122 [main] [30mTRACE[m  - #########################################################

16:16:34.122 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:34.122 [main] [30mTRACE[m  - ###################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:34.122 [main] [30mTRACE[m  - ###################################

16:16:34.123 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.123 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:34.123 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.123 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:34.123 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:34.123 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  12
16:16:34.123 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, B, A, A, A, A, E]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, B, A, A, A, A, E]
16:16:34.123 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:34.123 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 1, 4]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:34.125 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, false]
16:16:34.125 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:34.125 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
16:16:34.126 [main] [36mDEBUG[m  - ch_NewLetter :                                B
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################

16:16:34.126 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:34.126 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBAAAAE
16:16:34.126 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABBAAAAE
16:16:34.327 [main] [30mTRACE[m  - ####################################################
16:16:34.327 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:34.327 [main] [30mTRACE[m  - ####################################################
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, E]
16:16:34.327 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:34.327 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:34.327 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:34.328 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.328 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.328 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.328 [main] [30mTRACE[m  - #############################################
16:16:34.328 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - #############################################

16:16:34.328 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:34.328 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.328 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.328 [main] [30mTRACE[m  - #############################################
16:16:34.328 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - #############################################

16:16:34.328 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:34.329 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:34.329 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.329 [main] [30mTRACE[m  - ###############################################
16:16:34.329 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.329 [main] [30mTRACE[m  - ###############################################
16:16:34.329 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.329 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.329 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.329 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.329 [main] [30mTRACE[m  - #############################################
16:16:34.329 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.329 [main] [30mTRACE[m  - #############################################

16:16:34.329 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:34.329 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.329 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.329 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:34.330 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.330 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:34.330 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.331 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.331 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:34.331 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.331 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:34.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:34.331 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.331 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:34.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:34.331 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:34.331 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.331 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:34.331 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:34.331 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:34.331 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:34.331 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:34.331 [main] [30mTRACE[m  - ##################################################
16:16:34.331 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:34.331 [main] [30mTRACE[m  - ##################################################

16:16:34.331 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:35.145 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:35.149 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:35.149 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:35.149 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 13
16:16:35.149 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:35.354 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:35.354 [main] [30mTRACE[m  - ##############################################################
16:16:35.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:35.354 [main] [30mTRACE[m  - ##############################################################
16:16:35.354 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 1, 4]
16:16:35.354 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:35.354 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:35.354 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
16:16:35.354 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:35.355 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
16:16:35.355 [main] [30mTRACE[m  - ############################################################
16:16:35.355 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:35.355 [main] [30mTRACE[m  - ############################################################

16:16:35.355 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:35.355 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
16:16:35.355 [main] [30mTRACE[m  - ################################################
16:16:35.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
16:16:35.355 [main] [30mTRACE[m  - ################################################
16:16:35.355 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 2
16:16:35.355 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : B
16:16:35.355 [main] [30mTRACE[m  - ###############################################
16:16:35.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.355 [main] [30mTRACE[m  - ###############################################
16:16:35.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.355 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.355 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.355 [main] [30mTRACE[m  - #############################################
16:16:35.355 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.355 [main] [30mTRACE[m  - #############################################

16:16:35.355 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 1
16:16:35.356 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
16:16:35.356 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
16:16:35.356 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:35.357 [main] [30mTRACE[m  - ##############################################
16:16:35.357 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
16:16:35.357 [main] [30mTRACE[m  - ##############################################
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
16:16:35.357 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:35.357 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.357 [main] [36mDEBUG[m  - (int) Nombre de tours : 4
16:16:35.357 [main] [30mTRACE[m  - ############################################
16:16:35.357 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
16:16:35.357 [main] [30mTRACE[m  - ############################################

16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 4
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
16:16:35.357 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:35.357 [main] [30mTRACE[m  - ########################################################
16:16:35.357 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:35.357 [main] [30mTRACE[m  - ########################################################
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:35.357 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:35.357 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
16:16:35.357 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:35.357 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:35.357 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
16:16:35.357 [main] [30mTRACE[m  - ######################################################
16:16:35.357 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:35.358 [main] [30mTRACE[m  - ######################################################

16:16:35.358 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
16:16:35.358 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:35.358 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, E]
16:16:35.358 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:35.358 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:35.358 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBAAAE
16:16:35.358 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBAAAE
16:16:35.563 [main] [30mTRACE[m  - ####################################################
16:16:35.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:35.563 [main] [30mTRACE[m  - ####################################################
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:35.564 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:35.564 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:35.564 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:35.564 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:35.565 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.565 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:35.565 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.565 [main] [30mTRACE[m  - ###############################################
16:16:35.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.565 [main] [30mTRACE[m  - ###############################################
16:16:35.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.565 [main] [30mTRACE[m  - #############################################
16:16:35.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.565 [main] [30mTRACE[m  - #############################################

16:16:35.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:35.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:35.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:35.565 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:35.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.566 [main] [30mTRACE[m  - ###############################################
16:16:35.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.566 [main] [30mTRACE[m  - ###############################################
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.566 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.566 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.566 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.566 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.566 [main] [30mTRACE[m  - #############################################
16:16:35.566 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.566 [main] [30mTRACE[m  - #############################################

16:16:35.566 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:35.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:35.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:35.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.567 [main] [30mTRACE[m  - ###############################################
16:16:35.567 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.567 [main] [30mTRACE[m  - ###############################################
16:16:35.567 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.567 [main] [30mTRACE[m  - #############################################
16:16:35.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.567 [main] [30mTRACE[m  - #############################################

16:16:35.567 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:35.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:35.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:35.567 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:35.567 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.567 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.567 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.567 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:35.568 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.568 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:35.568 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:35.568 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:35.568 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:35.569 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.569 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.569 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.569 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:35.569 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.569 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.569 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:35.569 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.570 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:35.570 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:35.570 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:35.570 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:35.570 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:35.570 [main] [30mTRACE[m  - ##################################################
16:16:35.570 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:35.570 [main] [30mTRACE[m  - ##################################################

16:16:35.570 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:36.382 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:36.382 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:36.383 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:36.383 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 14
16:16:36.383 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:36.585 [main] [30mTRACE[m  - ##############################################################
16:16:36.585 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:36.585 [main] [30mTRACE[m  - ##############################################################
16:16:36.585 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:36.585 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:36.586 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:36.586 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:36.586 [main] [30mTRACE[m  - ############################################################
16:16:36.586 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:36.586 [main] [30mTRACE[m  - ############################################################

16:16:36.586 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:36.586 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:36.586 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:36.586 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:36.586 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:36.588 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:36.588 [main] [30mTRACE[m  - ########################################################
16:16:36.588 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:36.588 [main] [30mTRACE[m  - ########################################################
16:16:36.588 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:36.588 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:36.588 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
16:16:36.588 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:36.588 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:36.588 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
16:16:36.589 [main] [30mTRACE[m  - ######################################################
16:16:36.589 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:36.589 [main] [30mTRACE[m  - ######################################################

16:16:36.589 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
16:16:36.589 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:36.589 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:36.589 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:36.589 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:36.589 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBAAE
16:16:36.589 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBAAE
16:16:36.794 [main] [30mTRACE[m  - ####################################################
16:16:36.794 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:36.794 [main] [30mTRACE[m  - ####################################################
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:36.794 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:36.794 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:36.794 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:36.795 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:36.795 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:36.795 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.795 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.795 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.795 [main] [30mTRACE[m  - ###############################################
16:16:36.795 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.795 [main] [30mTRACE[m  - ###############################################
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.795 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.795 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.795 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.795 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.795 [main] [30mTRACE[m  - #############################################
16:16:36.795 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.795 [main] [30mTRACE[m  - #############################################

16:16:36.795 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:36.796 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:36.796 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.796 [main] [30mTRACE[m  - ###############################################
16:16:36.796 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.796 [main] [30mTRACE[m  - ###############################################
16:16:36.796 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.796 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.796 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.796 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.796 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.796 [main] [30mTRACE[m  - #############################################
16:16:36.796 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.796 [main] [30mTRACE[m  - #############################################

16:16:36.796 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:36.797 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.797 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:36.797 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.797 [main] [30mTRACE[m  - ###############################################
16:16:36.797 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.797 [main] [30mTRACE[m  - ###############################################
16:16:36.797 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.797 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.797 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.797 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.797 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.797 [main] [30mTRACE[m  - #############################################
16:16:36.797 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.797 [main] [30mTRACE[m  - #############################################

16:16:36.797 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:36.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:36.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:36.798 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:36.798 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.798 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:36.798 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:36.798 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.799 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.799 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:36.799 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.799 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:36.800 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:36.800 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:36.800 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:36.800 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:36.800 [main] [30mTRACE[m  - ##################################################
16:16:36.800 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:36.800 [main] [30mTRACE[m  - ##################################################

16:16:36.800 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:37.609 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:37.609 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:37.609 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:37.609 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 15
16:16:37.609 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:37.815 [main] [30mTRACE[m  - ##############################################################
16:16:37.815 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:37.815 [main] [30mTRACE[m  - ##############################################################
16:16:37.815 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:37.815 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:37.815 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:37.816 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:37.816 [main] [30mTRACE[m  - ############################################################
16:16:37.816 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:37.816 [main] [30mTRACE[m  - ############################################################

16:16:37.816 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:37.816 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:37.816 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:37.816 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:37.816 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:37.818 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:37.818 [main] [30mTRACE[m  - ########################################################
16:16:37.818 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:37.818 [main] [30mTRACE[m  - ########################################################
16:16:37.818 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:37.818 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:37.818 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
16:16:37.818 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:37.818 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:37.818 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
16:16:37.818 [main] [30mTRACE[m  - ######################################################
16:16:37.818 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:37.818 [main] [30mTRACE[m  - ######################################################

16:16:37.818 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
16:16:37.818 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:37.818 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:37.818 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:37.818 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:37.818 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBBAE
16:16:37.818 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBBAE
16:16:38.019 [main] [30mTRACE[m  - ####################################################
16:16:38.019 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:38.019 [main] [30mTRACE[m  - ####################################################
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:38.020 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:38.020 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:38.020 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:38.020 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:38.020 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:38.020 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:38.020 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.020 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.020 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:38.020 [main] [30mTRACE[m  - ###############################################
16:16:38.020 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.021 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.021 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.021 [main] [30mTRACE[m  - #############################################
16:16:38.021 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - #############################################

16:16:38.021 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:38.021 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:38.021 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:38.021 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:38.021 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.021 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.021 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.021 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.022 [main] [30mTRACE[m  - #############################################
16:16:38.022 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.022 [main] [30mTRACE[m  - #############################################

16:16:38.022 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:38.022 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:38.022 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:38.022 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:38.022 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.022 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:38.022 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:38.022 [main] [30mTRACE[m  - ###############################################
16:16:38.022 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.022 [main] [30mTRACE[m  - ###############################################
16:16:38.022 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.022 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.022 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.022 [main] [30mTRACE[m  - #############################################
16:16:38.022 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.023 [main] [30mTRACE[m  - #############################################

16:16:38.023 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:38.023 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:38.023 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:38.023 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.023 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:38.023 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:38.023 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:38.023 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:38.025 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.025 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:38.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:38.025 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:38.025 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.025 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:38.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:38.025 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:38.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:38.025 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:38.025 [main] [30mTRACE[m  - ##################################################
16:16:38.025 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:38.025 [main] [30mTRACE[m  - ##################################################

16:16:38.025 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:38.837 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:38.837 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:38.837 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:38.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 16
16:16:38.838 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:39.039 [main] [30mTRACE[m  - ##############################################################
16:16:39.040 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:39.040 [main] [30mTRACE[m  - ##############################################################
16:16:39.040 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:39.041 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:39.041 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:39.041 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:39.041 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:39.041 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:39.041 [main] [30mTRACE[m  - ############################################################
16:16:39.041 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:39.041 [main] [30mTRACE[m  - ############################################################

16:16:39.041 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:39.041 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:39.041 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:39.041 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:39.041 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:39.043 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:39.043 [main] [30mTRACE[m  - ########################################################
16:16:39.043 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:39.043 [main] [30mTRACE[m  - ########################################################
16:16:39.044 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:39.044 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:39.044 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 5
16:16:39.044 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:39.044 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:39.044 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:39.044 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 7
16:16:39.044 [main] [30mTRACE[m  - ######################################################
16:16:39.044 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:39.044 [main] [30mTRACE[m  - ######################################################

16:16:39.044 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 7
16:16:39.044 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:39.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:39.044 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:39.044 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:39.044 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBBAB
16:16:39.044 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBBAB
16:16:39.246 [main] [30mTRACE[m  - ####################################################
16:16:39.247 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:39.247 [main] [30mTRACE[m  - ####################################################
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:39.247 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:39.247 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:39.247 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:39.247 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:39.247 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:39.248 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:39.248 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.248 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.248 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:39.248 [main] [30mTRACE[m  - ###############################################
16:16:39.248 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.248 [main] [30mTRACE[m  - ###############################################
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.248 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.248 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.248 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.248 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.248 [main] [30mTRACE[m  - #############################################
16:16:39.248 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.248 [main] [30mTRACE[m  - #############################################

16:16:39.248 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:39.249 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:39.249 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:39.249 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:39.249 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.249 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:39.249 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.249 [main] [30mTRACE[m  - ###############################################
16:16:39.249 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.249 [main] [30mTRACE[m  - ###############################################
16:16:39.249 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.249 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.249 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.249 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.249 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.249 [main] [30mTRACE[m  - #############################################
16:16:39.249 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.250 [main] [30mTRACE[m  - #############################################

16:16:39.250 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:39.250 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:39.250 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:39.250 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:39.250 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.250 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:39.250 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:39.250 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.251 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.251 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.251 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.251 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.251 [main] [30mTRACE[m  - #############################################
16:16:39.251 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - #############################################

16:16:39.251 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:39.251 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:39.251 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:39.251 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:39.251 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:39.251 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.251 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:39.251 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:39.251 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.252 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.252 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.252 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.252 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.252 [main] [30mTRACE[m  - #############################################
16:16:39.252 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.252 [main] [30mTRACE[m  - #############################################

16:16:39.252 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:39.252 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:39.252 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:39.252 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
16:16:39.252 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:39.252 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.252 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.252 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 4]
16:16:39.254 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 0, 4]
16:16:39.254 [main] [30mTRACE[m  - ##################################################
16:16:39.254 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:39.254 [main] [30mTRACE[m  - ##################################################

16:16:39.254 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:40.068 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:40.068 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:40.068 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:40.068 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 17
16:16:40.068 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:40.271 [main] [30mTRACE[m  - ##############################################################
16:16:40.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:40.272 [main] [30mTRACE[m  - ##############################################################
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 0, 4]
16:16:40.272 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 0, 4]
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:40.272 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
16:16:40.272 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:40.272 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:40.272 [main] [30mTRACE[m  - ############################################################
16:16:40.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:40.272 [main] [30mTRACE[m  - ############################################################

16:16:40.272 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:40.272 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:40.272 [main] [30mTRACE[m  - ##############################################
16:16:40.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:40.272 [main] [30mTRACE[m  - ##############################################
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:40.272 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:40.273 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:40.273 [main] [30mTRACE[m  - ###############################################
16:16:40.273 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.273 [main] [30mTRACE[m  - ###############################################
16:16:40.273 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.273 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.273 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.273 [main] [30mTRACE[m  - #############################################
16:16:40.273 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.273 [main] [30mTRACE[m  - #############################################

16:16:40.273 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.274 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:40.274 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:40.274 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.274 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:40.274 [main] [30mTRACE[m  - ############################################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:40.274 [main] [30mTRACE[m  - ############################################

16:16:40.274 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:40.274 [main] [30mTRACE[m  - ##############################################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
16:16:40.274 [main] [30mTRACE[m  - ##############################################

16:16:40.274 [main] [32mINFO [m  - Lancement diff√©rence positive
16:16:40.274 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
16:16:40.274 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
16:16:40.274 [main] [30mTRACE[m  - ##########################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:40.274 [main] [30mTRACE[m  - ##########################

16:16:40.274 [main] [30mTRACE[m  - ############################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:40.274 [main] [30mTRACE[m  - ############################
16:16:40.274 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:40.274 [main] [30mTRACE[m  - #####################################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:40.274 [main] [30mTRACE[m  - #####################################
16:16:40.274 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:40.274 [main] [30mTRACE[m  - ###########################################################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:40.274 [main] [30mTRACE[m  - ###########################################################
16:16:40.274 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:40.274 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:40.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:40.275 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:40.275 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:40.275 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:40.275 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:40.275 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:40.275 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:40.275 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:40.275 [main] [30mTRACE[m  - ###############################################
16:16:40.275 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.275 [main] [30mTRACE[m  - ###############################################
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.275 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.275 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.275 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.275 [main] [30mTRACE[m  - #############################################
16:16:40.275 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.275 [main] [30mTRACE[m  - #############################################

16:16:40.275 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:40.275 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:40.276 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:40.276 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:40.276 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:40.276 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:40.276 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:40.276 [main] [30mTRACE[m  - #########################################################
16:16:40.276 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:40.276 [main] [30mTRACE[m  - #########################################################

16:16:40.276 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:40.276 [main] [30mTRACE[m  - ###################################
16:16:40.276 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:40.276 [main] [30mTRACE[m  - ###################################

16:16:40.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.276 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:40.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.276 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:40.276 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  17
16:16:40.276 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, B, B, B, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, B, B, B, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 2, 3]
16:16:40.276 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 0, 4]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:40.278 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, true]
16:16:40.278 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:40.278 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:40.278 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################

16:16:40.278 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:40.278 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCBBBAB
16:16:40.278 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCBBBAB
16:16:40.482 [main] [30mTRACE[m  - ####################################################
16:16:40.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:40.482 [main] [30mTRACE[m  - ####################################################
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, B, B, B, A, B]
16:16:40.483 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:40.483 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:40.483 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:40.483 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:40.483 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.483 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:40.483 [main] [30mTRACE[m  - ###############################################
16:16:40.483 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.483 [main] [30mTRACE[m  - ###############################################
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.484 [main] [30mTRACE[m  - #############################################
16:16:40.484 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.484 [main] [30mTRACE[m  - #############################################

16:16:40.484 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:40.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:40.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:40.484 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:40.484 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:40.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.484 [main] [30mTRACE[m  - ###############################################
16:16:40.484 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.484 [main] [30mTRACE[m  - ###############################################
16:16:40.484 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.484 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.485 [main] [30mTRACE[m  - #############################################
16:16:40.485 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - #############################################

16:16:40.485 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:40.485 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:40.485 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:40.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:40.485 [main] [30mTRACE[m  - ###############################################
16:16:40.485 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - ###############################################
16:16:40.485 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.485 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.485 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.485 [main] [30mTRACE[m  - #############################################
16:16:40.485 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - #############################################

16:16:40.485 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:40.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:40.486 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:40.486 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:40.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.486 [main] [30mTRACE[m  - ###############################################
16:16:40.486 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.486 [main] [30mTRACE[m  - ###############################################
16:16:40.486 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.486 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.486 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.486 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.486 [main] [30mTRACE[m  - #############################################
16:16:40.486 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.486 [main] [30mTRACE[m  - #############################################

16:16:40.486 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
16:16:40.487 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.487 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:40.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:40.487 [main] [30mTRACE[m  - ###############################################
16:16:40.487 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.487 [main] [30mTRACE[m  - ###############################################
16:16:40.487 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.487 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.487 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.487 [main] [30mTRACE[m  - #############################################
16:16:40.487 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.487 [main] [30mTRACE[m  - #############################################

16:16:40.487 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:40.487 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
16:16:40.488 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
16:16:40.488 [main] [30mTRACE[m  - ##################################################
16:16:40.488 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:40.489 [main] [30mTRACE[m  - ##################################################

16:16:40.489 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:41.299 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:41.299 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:41.299 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:41.299 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 18
16:16:41.299 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:41.502 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:41.502 [main] [30mTRACE[m  - ##############################################################
16:16:41.503 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:41.503 [main] [30mTRACE[m  - ##############################################################
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 0, 4]
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
16:16:41.503 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:41.503 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:41.503 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:41.503 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:41.503 [main] [30mTRACE[m  - ############################################################
16:16:41.503 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:41.503 [main] [30mTRACE[m  - ############################################################

16:16:41.503 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:41.503 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:41.503 [main] [30mTRACE[m  - ##############################################
16:16:41.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:41.504 [main] [30mTRACE[m  - ##############################################
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:41.504 [main] [30mTRACE[m  - ###############################################
16:16:41.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.504 [main] [30mTRACE[m  - ###############################################
16:16:41.504 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.504 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.504 [main] [30mTRACE[m  - #############################################
16:16:41.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.504 [main] [30mTRACE[m  - #############################################

16:16:41.504 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:41.505 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:41.505 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.505 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:41.505 [main] [30mTRACE[m  - ############################################
16:16:41.505 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:41.505 [main] [30mTRACE[m  - ############################################

16:16:41.505 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:41.505 [main] [30mTRACE[m  - ##########################
16:16:41.505 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:41.505 [main] [30mTRACE[m  - ##########################

16:16:41.505 [main] [30mTRACE[m  - ############################
16:16:41.505 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:41.505 [main] [30mTRACE[m  - ############################
16:16:41.506 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:41.506 [main] [30mTRACE[m  - #####################################
16:16:41.506 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:41.506 [main] [30mTRACE[m  - #####################################
16:16:41.506 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:41.506 [main] [30mTRACE[m  - ###########################################################
16:16:41.506 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:41.506 [main] [30mTRACE[m  - ###########################################################
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:41.506 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, B, B, B, A, B]
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.506 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:41.506 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:41.506 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:41.506 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
16:16:41.506 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:41.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:41.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:41.506 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:41.507 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:41.507 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:41.507 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:41.507 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:41.507 [main] [30mTRACE[m  - ###############################################
16:16:41.507 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.507 [main] [30mTRACE[m  - ###############################################
16:16:41.507 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.507 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.507 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.507 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.507 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.507 [main] [30mTRACE[m  - #############################################
16:16:41.507 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.507 [main] [30mTRACE[m  - #############################################

16:16:41.507 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:41.507 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:41.507 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:41.507 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:41.507 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:41.507 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:41.508 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:41.508 [main] [30mTRACE[m  - #########################################################
16:16:41.508 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:41.508 [main] [30mTRACE[m  - #########################################################

16:16:41.508 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:41.508 [main] [30mTRACE[m  - ###################################
16:16:41.508 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:41.508 [main] [30mTRACE[m  - ###################################

16:16:41.508 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.508 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:41.508 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.508 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:41.508 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  18
16:16:41.508 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, C, B, B, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, C, B, B, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 0, 4]
16:16:41.508 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:41.510 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, true]
16:16:41.510 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
16:16:41.510 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:41.510 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################

16:16:41.510 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:41.510 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCCBBAB
16:16:41.510 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCCBBAB
16:16:41.711 [main] [30mTRACE[m  - ####################################################
16:16:41.711 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:41.712 [main] [30mTRACE[m  - ####################################################
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, C, B, B, A, B]
16:16:41.712 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:41.712 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:41.712 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:41.712 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.712 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:41.712 [main] [30mTRACE[m  - ###############################################
16:16:41.712 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.713 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.713 [main] [30mTRACE[m  - #############################################
16:16:41.713 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - #############################################

16:16:41.713 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:41.713 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:41.713 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.713 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.714 [main] [30mTRACE[m  - #############################################
16:16:41.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - #############################################

16:16:41.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:41.714 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:41.714 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:41.714 [main] [30mTRACE[m  - ###############################################
16:16:41.714 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - ###############################################
16:16:41.714 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.714 [main] [30mTRACE[m  - #############################################
16:16:41.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - #############################################

16:16:41.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:41.715 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:41.715 [main] [30mTRACE[m  - ###############################################
16:16:41.715 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.715 [main] [30mTRACE[m  - ###############################################
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.715 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.715 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.715 [main] [30mTRACE[m  - #############################################
16:16:41.715 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.715 [main] [30mTRACE[m  - #############################################

16:16:41.715 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
16:16:41.715 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.716 [main] [30mTRACE[m  - ###############################################
16:16:41.716 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.716 [main] [30mTRACE[m  - ###############################################
16:16:41.716 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.716 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.716 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.716 [main] [30mTRACE[m  - #############################################
16:16:41.716 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.716 [main] [30mTRACE[m  - #############################################

16:16:41.716 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:41.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:41.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:41.716 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:41.716 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:41.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.716 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.718 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.718 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
16:16:41.718 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
16:16:41.718 [main] [30mTRACE[m  - ##################################################
16:16:41.718 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:41.718 [main] [30mTRACE[m  - ##################################################

16:16:41.718 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:42.529 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:42.530 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:42.530 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:42.530 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 19
16:16:42.530 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:42.733 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:42.733 [main] [30mTRACE[m  - ##############################################################
16:16:42.733 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:42.733 [main] [30mTRACE[m  - ##############################################################
16:16:42.733 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:42.733 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:42.734 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:42.734 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:42.734 [main] [30mTRACE[m  - ############################################################
16:16:42.734 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:42.734 [main] [30mTRACE[m  - ############################################################

16:16:42.734 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:42.734 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:42.734 [main] [30mTRACE[m  - ##########################
16:16:42.734 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:42.734 [main] [30mTRACE[m  - ##########################

16:16:42.734 [main] [30mTRACE[m  - ############################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:42.734 [main] [30mTRACE[m  - ############################
16:16:42.734 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:42.734 [main] [30mTRACE[m  - #####################################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:42.734 [main] [30mTRACE[m  - #####################################
16:16:42.734 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:42.734 [main] [30mTRACE[m  - ###########################################################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:42.734 [main] [30mTRACE[m  - ###########################################################
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:42.735 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, C, B, B, A, B]
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:42.735 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:42.735 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:42.735 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:42.735 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
16:16:42.735 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:42.735 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:42.735 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:42.735 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:42.735 [main] [30mTRACE[m  - ###############################################
16:16:42.735 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.735 [main] [30mTRACE[m  - ###############################################
16:16:42.736 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.736 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.736 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.736 [main] [30mTRACE[m  - #############################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.736 [main] [30mTRACE[m  - #############################################

16:16:42.736 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:42.736 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:42.736 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:42.736 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:42.736 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:42.736 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:42.736 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:42.736 [main] [30mTRACE[m  - #########################################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:42.736 [main] [30mTRACE[m  - #########################################################

16:16:42.736 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:42.736 [main] [30mTRACE[m  - ###################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:42.736 [main] [30mTRACE[m  - ###################################

16:16:42.737 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.737 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:42.737 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.737 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:42.737 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  19
16:16:42.737 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, B, B, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, B, B, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
16:16:42.737 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:42.739 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, true]
16:16:42.739 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
16:16:42.739 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:42.739 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################

16:16:42.739 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:42.739 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDBBAB
16:16:42.739 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDBBAB
16:16:42.942 [main] [30mTRACE[m  - ####################################################
16:16:42.942 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:42.942 [main] [30mTRACE[m  - ####################################################
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, B, B, A, B]
16:16:42.942 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:42.942 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:42.943 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:42.943 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, true]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:42.943 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:42.943 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.943 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.943 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:42.943 [main] [30mTRACE[m  - ###############################################
16:16:42.943 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.943 [main] [30mTRACE[m  - ###############################################
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.943 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.943 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.943 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.943 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.943 [main] [30mTRACE[m  - #############################################
16:16:42.943 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.943 [main] [30mTRACE[m  - #############################################

16:16:42.944 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:42.944 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:42.944 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.944 [main] [30mTRACE[m  - ###############################################
16:16:42.944 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.944 [main] [30mTRACE[m  - ###############################################
16:16:42.944 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.944 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.944 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.944 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.944 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.944 [main] [30mTRACE[m  - #############################################
16:16:42.944 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.944 [main] [30mTRACE[m  - #############################################

16:16:42.944 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:42.944 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.945 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.945 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.945 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.945 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.945 [main] [30mTRACE[m  - #############################################
16:16:42.945 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - #############################################

16:16:42.945 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:42.945 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:42.945 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:42.945 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.945 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.946 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.946 [main] [30mTRACE[m  - #############################################
16:16:42.946 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.946 [main] [30mTRACE[m  - #############################################

16:16:42.946 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:42.946 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:42.946 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:42.946 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
16:16:42.946 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.946 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:42.946 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.946 [main] [30mTRACE[m  - ###############################################
16:16:42.946 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.946 [main] [30mTRACE[m  - ###############################################
16:16:42.946 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.946 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.946 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.946 [main] [30mTRACE[m  - #############################################
16:16:42.946 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.947 [main] [30mTRACE[m  - #############################################

16:16:42.947 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:42.947 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:42.947 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:42.947 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:42.947 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:42.947 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.947 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:42.947 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:42.947 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
16:16:42.947 [main] [30mTRACE[m  - ###############################################
16:16:42.947 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.947 [main] [30mTRACE[m  - ###############################################
16:16:42.947 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.947 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.947 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.948 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.948 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.948 [main] [30mTRACE[m  - #############################################
16:16:42.948 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.948 [main] [30mTRACE[m  - #############################################

16:16:42.948 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:42.948 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:42.948 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:42.948 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.948 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:42.948 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:42.948 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.948 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:42.949 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:42.949 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:42.949 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.949 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:42.949 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.949 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:42.949 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:42.949 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:42.949 [main] [30mTRACE[m  - ##################################################
16:16:42.949 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:42.949 [main] [30mTRACE[m  - ##################################################

16:16:42.949 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:43.760 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:43.760 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:43.760 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:43.760 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 20
16:16:43.760 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:43.964 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:43.964 [main] [30mTRACE[m  - ##############################################################
16:16:43.964 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:43.964 [main] [30mTRACE[m  - ##############################################################
16:16:43.964 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
16:16:43.964 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:43.964 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:43.964 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:43.964 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:43.964 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:43.965 [main] [30mTRACE[m  - ############################################################
16:16:43.965 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:43.965 [main] [30mTRACE[m  - ############################################################

16:16:43.965 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:43.965 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:43.965 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:43.965 [main] [30mTRACE[m  - ##############################################
16:16:43.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:43.965 [main] [30mTRACE[m  - ##############################################
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:43.965 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:43.965 [main] [30mTRACE[m  - ###############################################
16:16:43.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:43.965 [main] [30mTRACE[m  - ###############################################
16:16:43.965 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:43.965 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:43.965 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.965 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.965 [main] [36mDEBUG[m  - Index de la lettre
16:16:43.966 [main] [30mTRACE[m  - #############################################
16:16:43.966 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:43.966 [main] [30mTRACE[m  - #############################################

16:16:43.966 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:43.966 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:43.966 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:43.966 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:43.966 [main] [30mTRACE[m  - ############################################
16:16:43.967 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:43.967 [main] [30mTRACE[m  - ############################################

16:16:43.967 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:43.967 [main] [30mTRACE[m  - ##########################
16:16:43.967 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:43.967 [main] [30mTRACE[m  - ##########################

16:16:43.967 [main] [30mTRACE[m  - ############################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:43.967 [main] [30mTRACE[m  - ############################
16:16:43.967 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:43.967 [main] [30mTRACE[m  - #####################################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:43.967 [main] [30mTRACE[m  - #####################################
16:16:43.967 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:43.967 [main] [30mTRACE[m  - ###########################################################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:43.967 [main] [30mTRACE[m  - ###########################################################
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:43.967 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, B, B, A, B]
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:43.967 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:43.967 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:43.967 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:43.968 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:43.968 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:43.968 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:43.968 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:43.968 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:43.968 [main] [30mTRACE[m  - ###############################################
16:16:43.968 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:43.968 [main] [30mTRACE[m  - ###############################################
16:16:43.968 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:43.968 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.968 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.968 [main] [36mDEBUG[m  - Index de la lettre
16:16:43.968 [main] [30mTRACE[m  - #############################################
16:16:43.968 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:43.968 [main] [30mTRACE[m  - #############################################

16:16:43.969 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:43.969 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:43.969 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:43.969 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:43.969 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:43.969 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:43.969 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:43.969 [main] [30mTRACE[m  - #########################################################
16:16:43.969 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:43.969 [main] [30mTRACE[m  - #########################################################

16:16:43.969 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:43.969 [main] [30mTRACE[m  - ###################################
16:16:43.969 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:43.969 [main] [30mTRACE[m  - ###################################

16:16:43.969 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.969 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:43.969 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.969 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:43.970 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  20
16:16:43.970 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, C, B, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, C, B, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
16:16:43.970 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:43.971 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:43.971 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:43.971 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:43.971 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################

16:16:43.972 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:43.972 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDCBAB
16:16:43.972 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDCBAB
16:16:44.173 [main] [30mTRACE[m  - ####################################################
16:16:44.173 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:44.173 [main] [30mTRACE[m  - ####################################################
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, C, B, A, B]
16:16:44.173 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:44.173 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:44.173 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:44.173 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:44.174 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:44.174 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.174 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:44.174 [main] [30mTRACE[m  - ###############################################
16:16:44.174 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.174 [main] [30mTRACE[m  - ###############################################
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.174 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.174 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.174 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.174 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.174 [main] [30mTRACE[m  - #############################################
16:16:44.174 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.174 [main] [30mTRACE[m  - #############################################

16:16:44.174 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:44.174 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:44.174 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.175 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.175 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.175 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.175 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.175 [main] [30mTRACE[m  - #############################################
16:16:44.175 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - #############################################

16:16:44.175 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:44.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:44.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:44.175 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:44.175 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.175 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.176 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.176 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.176 [main] [30mTRACE[m  - #############################################
16:16:44.176 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - #############################################

16:16:44.176 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:44.176 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:44.176 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:44.176 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:44.176 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.176 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:44.176 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:44.176 [main] [30mTRACE[m  - ###############################################
16:16:44.176 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - ###############################################
16:16:44.176 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.176 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.176 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.176 [main] [30mTRACE[m  - #############################################
16:16:44.176 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - #############################################

16:16:44.177 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:44.177 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:44.177 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:44.177 [main] [30mTRACE[m  - ###############################################
16:16:44.177 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.177 [main] [30mTRACE[m  - ###############################################
16:16:44.177 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.177 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.177 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.177 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.177 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.177 [main] [30mTRACE[m  - #############################################
16:16:44.177 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.177 [main] [30mTRACE[m  - #############################################

16:16:44.177 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:44.177 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.178 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.178 [main] [30mTRACE[m  - ###############################################
16:16:44.178 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.178 [main] [30mTRACE[m  - ###############################################
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.178 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.178 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.178 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.178 [main] [30mTRACE[m  - #############################################
16:16:44.178 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.178 [main] [30mTRACE[m  - #############################################

16:16:44.178 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:44.178 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:44.178 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:44.178 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:44.178 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.178 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.178 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:44.179 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:44.179 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.179 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:44.179 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:44.179 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:44.179 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.179 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:44.179 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.179 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:44.179 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:44.179 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:44.179 [main] [30mTRACE[m  - ##################################################
16:16:44.179 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:44.179 [main] [30mTRACE[m  - ##################################################

16:16:44.179 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:44.991 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:44.991 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:44.991 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:44.991 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 21
16:16:44.991 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:45.194 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:45.194 [main] [30mTRACE[m  - ##############################################################
16:16:45.195 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:45.195 [main] [30mTRACE[m  - ##############################################################
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:45.195 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:45.195 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:45.195 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:45.195 [main] [30mTRACE[m  - ############################################################
16:16:45.195 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:45.195 [main] [30mTRACE[m  - ############################################################

16:16:45.195 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:45.195 [main] [30mTRACE[m  - ##########################
16:16:45.195 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:45.195 [main] [30mTRACE[m  - ##########################

16:16:45.195 [main] [30mTRACE[m  - ############################
16:16:45.195 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:45.195 [main] [30mTRACE[m  - ############################
16:16:45.196 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:45.196 [main] [30mTRACE[m  - #####################################
16:16:45.196 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:45.196 [main] [30mTRACE[m  - #####################################
16:16:45.196 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:45.196 [main] [30mTRACE[m  - ###########################################################
16:16:45.196 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:45.196 [main] [30mTRACE[m  - ###########################################################
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:45.196 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, C, B, A, B]
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:45.196 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:45.196 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:45.196 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:45.196 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:45.197 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:45.197 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:45.197 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:45.197 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:45.197 [main] [30mTRACE[m  - ###############################################
16:16:45.197 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.197 [main] [30mTRACE[m  - ###############################################
16:16:45.197 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.197 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.197 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.197 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.197 [main] [30mTRACE[m  - #############################################
16:16:45.197 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.197 [main] [30mTRACE[m  - #############################################

16:16:45.197 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:45.197 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:45.197 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:45.197 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:45.197 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:45.197 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:45.198 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:45.198 [main] [30mTRACE[m  - #########################################################
16:16:45.198 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:45.198 [main] [30mTRACE[m  - #########################################################

16:16:45.198 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:45.198 [main] [30mTRACE[m  - ###################################
16:16:45.198 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:45.198 [main] [30mTRACE[m  - ###################################

16:16:45.198 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.198 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:45.198 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.198 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:45.198 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  21
16:16:45.198 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, D, B, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, D, B, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:45.198 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:45.200 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:45.201 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:45.201 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:45.201 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################

16:16:45.201 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:45.201 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDDBAB
16:16:45.201 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDDBAB
16:16:45.403 [main] [30mTRACE[m  - ####################################################
16:16:45.404 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:45.404 [main] [30mTRACE[m  - ####################################################
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, D, B, A, B]
16:16:45.404 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:45.404 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:45.404 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:45.404 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:45.404 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.404 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.404 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.405 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.405 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.405 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.405 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.405 [main] [30mTRACE[m  - #############################################
16:16:45.405 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - #############################################

16:16:45.405 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:45.405 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:45.405 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:45.405 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:45.405 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.405 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.405 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.406 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.406 [main] [30mTRACE[m  - #############################################
16:16:45.406 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.406 [main] [30mTRACE[m  - #############################################

16:16:45.406 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:45.406 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:45.406 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:45.406 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:45.406 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.406 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:45.406 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:45.406 [main] [30mTRACE[m  - ###############################################
16:16:45.406 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.406 [main] [30mTRACE[m  - ###############################################
16:16:45.406 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.406 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.406 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.406 [main] [30mTRACE[m  - #############################################
16:16:45.406 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - #############################################

16:16:45.407 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:45.407 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:45.407 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:45.407 [main] [30mTRACE[m  - ###############################################
16:16:45.407 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - ###############################################
16:16:45.407 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.407 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.407 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.407 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.407 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.407 [main] [30mTRACE[m  - #############################################
16:16:45.407 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - #############################################

16:16:45.407 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:45.407 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.408 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.408 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.408 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.408 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.408 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.408 [main] [30mTRACE[m  - #############################################
16:16:45.408 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.408 [main] [30mTRACE[m  - #############################################

16:16:45.408 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:45.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:45.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:45.408 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.409 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.409 [main] [30mTRACE[m  - ###############################################
16:16:45.409 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.409 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.409 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.409 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.409 [main] [30mTRACE[m  - #############################################
16:16:45.409 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.409 [main] [30mTRACE[m  - #############################################

16:16:45.409 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:45.409 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:45.409 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.409 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.409 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:45.409 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:45.410 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:45.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:45.410 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:45.410 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.410 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:45.410 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:45.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:45.410 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:45.410 [main] [30mTRACE[m  - ##################################################
16:16:45.410 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:45.410 [main] [30mTRACE[m  - ##################################################

16:16:45.410 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:46.222 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:46.222 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:46.222 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:46.222 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 22
16:16:46.222 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:46.425 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:46.425 [main] [30mTRACE[m  - ##############################################################
16:16:46.425 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:46.425 [main] [30mTRACE[m  - ##############################################################
16:16:46.425 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:46.425 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:46.425 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:46.426 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:46.426 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:46.426 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:46.426 [main] [30mTRACE[m  - ############################################################
16:16:46.426 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:46.426 [main] [30mTRACE[m  - ############################################################

16:16:46.426 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:46.426 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:46.426 [main] [30mTRACE[m  - ##########################
16:16:46.426 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:46.426 [main] [30mTRACE[m  - ##########################

16:16:46.426 [main] [30mTRACE[m  - ############################
16:16:46.426 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:46.426 [main] [30mTRACE[m  - ############################
16:16:46.426 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:46.426 [main] [30mTRACE[m  - #####################################
16:16:46.426 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:46.427 [main] [30mTRACE[m  - #####################################
16:16:46.427 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:46.427 [main] [30mTRACE[m  - ###########################################################
16:16:46.427 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:46.427 [main] [30mTRACE[m  - ###########################################################
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:46.427 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, D, B, A, B]
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:46.427 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:46.427 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:46.427 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:46.427 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:46.427 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.428 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:46.428 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:46.428 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:46.428 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:46.428 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:46.428 [main] [30mTRACE[m  - ###############################################
16:16:46.428 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.428 [main] [30mTRACE[m  - ###############################################
16:16:46.428 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.428 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.428 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.428 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.428 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.428 [main] [30mTRACE[m  - #############################################
16:16:46.428 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.428 [main] [30mTRACE[m  - #############################################

16:16:46.428 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:46.428 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:46.428 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:46.428 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:46.428 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:46.428 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:46.428 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:46.429 [main] [30mTRACE[m  - #########################################################
16:16:46.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:46.429 [main] [30mTRACE[m  - #########################################################

16:16:46.429 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:46.429 [main] [30mTRACE[m  - ###################################
16:16:46.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:46.429 [main] [30mTRACE[m  - ###################################

16:16:46.429 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.429 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:46.429 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.429 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:46.429 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  22
16:16:46.429 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, B, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, B, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:46.429 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:46.431 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:46.431 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:46.431 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:46.431 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################

16:16:46.431 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:46.432 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEBAB
16:16:46.432 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEBAB
16:16:46.634 [main] [30mTRACE[m  - ####################################################
16:16:46.634 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:46.634 [main] [30mTRACE[m  - ####################################################
16:16:46.634 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.634 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
16:16:46.635 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:46.635 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:46.635 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:46.635 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:46.635 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.635 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.635 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.636 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.636 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.636 [main] [30mTRACE[m  - #############################################
16:16:46.636 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - #############################################

16:16:46.636 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:46.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:46.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:46.636 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:46.636 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.636 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.636 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.637 [main] [30mTRACE[m  - #############################################
16:16:46.637 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.637 [main] [30mTRACE[m  - #############################################

16:16:46.637 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:46.637 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:46.637 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:46.637 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:46.637 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.637 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:46.637 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:46.637 [main] [30mTRACE[m  - ###############################################
16:16:46.637 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.637 [main] [30mTRACE[m  - ###############################################
16:16:46.637 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.637 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.637 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.637 [main] [30mTRACE[m  - #############################################
16:16:46.637 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - #############################################

16:16:46.638 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:46.638 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.638 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:46.638 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:46.638 [main] [30mTRACE[m  - ###############################################
16:16:46.638 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - ###############################################
16:16:46.638 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.638 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.638 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.638 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.638 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.638 [main] [30mTRACE[m  - #############################################
16:16:46.638 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - #############################################

16:16:46.638 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:46.639 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:46.639 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.639 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:46.639 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:46.639 [main] [30mTRACE[m  - ###############################################
16:16:46.639 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.639 [main] [30mTRACE[m  - ###############################################
16:16:46.639 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.639 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.639 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.639 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.639 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.639 [main] [30mTRACE[m  - #############################################
16:16:46.639 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.639 [main] [30mTRACE[m  - #############################################

16:16:46.639 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:46.639 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:46.640 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:46.640 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.640 [main] [30mTRACE[m  - ###############################################
16:16:46.640 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.640 [main] [30mTRACE[m  - ###############################################
16:16:46.640 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.640 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.640 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.640 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.640 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.640 [main] [30mTRACE[m  - #############################################
16:16:46.640 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.640 [main] [30mTRACE[m  - #############################################

16:16:46.640 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:46.640 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:46.640 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.641 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:46.641 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:46.641 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
16:16:46.641 [main] [30mTRACE[m  - ###############################################
16:16:46.641 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.641 [main] [30mTRACE[m  - ###############################################
16:16:46.641 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.641 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.641 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.641 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.641 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.641 [main] [30mTRACE[m  - #############################################
16:16:46.641 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.641 [main] [30mTRACE[m  - #############################################

16:16:46.641 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
16:16:46.641 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:46.641 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:46.641 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:46.641 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:46.641 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.641 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:46.642 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.642 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:46.642 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.642 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:46.642 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:46.642 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:46.642 [main] [30mTRACE[m  - ##################################################
16:16:46.642 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:46.642 [main] [30mTRACE[m  - ##################################################

16:16:46.642 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:47.452 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:47.452 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:47.452 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:47.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 23
16:16:47.452 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:47.656 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:47.656 [main] [30mTRACE[m  - ##############################################################
16:16:47.656 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:47.656 [main] [30mTRACE[m  - ##############################################################
16:16:47.656 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:47.656 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:47.656 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:47.656 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:47.657 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:47.657 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:47.657 [main] [30mTRACE[m  - ############################################################
16:16:47.657 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:47.657 [main] [30mTRACE[m  - ############################################################

16:16:47.657 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:47.657 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:47.657 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:47.657 [main] [30mTRACE[m  - ##############################################
16:16:47.657 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:47.657 [main] [30mTRACE[m  - ##############################################
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:47.657 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:47.657 [main] [30mTRACE[m  - ###############################################
16:16:47.657 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.657 [main] [30mTRACE[m  - ###############################################
16:16:47.657 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.658 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.658 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.658 [main] [30mTRACE[m  - #############################################
16:16:47.658 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.658 [main] [30mTRACE[m  - #############################################

16:16:47.658 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.659 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.659 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.659 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:47.659 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:47.659 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.659 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:47.659 [main] [30mTRACE[m  - ############################################
16:16:47.659 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:47.659 [main] [30mTRACE[m  - ############################################

16:16:47.659 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:47.659 [main] [30mTRACE[m  - ##########################
16:16:47.659 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:47.659 [main] [30mTRACE[m  - ##########################

16:16:47.659 [main] [30mTRACE[m  - ############################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:47.659 [main] [30mTRACE[m  - ############################
16:16:47.659 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:47.659 [main] [30mTRACE[m  - #####################################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:47.659 [main] [30mTRACE[m  - #####################################
16:16:47.659 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:47.659 [main] [30mTRACE[m  - ###########################################################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:47.660 [main] [30mTRACE[m  - ###########################################################
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:47.660 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.660 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:47.660 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:47.660 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:47.660 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:47.660 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:47.660 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:47.660 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:47.660 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:47.661 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:47.661 [main] [30mTRACE[m  - ###############################################
16:16:47.661 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.661 [main] [30mTRACE[m  - ###############################################
16:16:47.661 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.661 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.661 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.661 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.661 [main] [30mTRACE[m  - #############################################
16:16:47.661 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.661 [main] [30mTRACE[m  - #############################################

16:16:47.661 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:47.661 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:47.661 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:47.661 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:47.661 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:47.661 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:47.661 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:47.661 [main] [30mTRACE[m  - #########################################################
16:16:47.662 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:47.662 [main] [30mTRACE[m  - #########################################################

16:16:47.662 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:47.662 [main] [30mTRACE[m  - ###################################
16:16:47.662 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:47.662 [main] [30mTRACE[m  - ###################################

16:16:47.662 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.662 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:47.662 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.662 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:47.662 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  23
16:16:47.662 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, C, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, C, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:47.662 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:47.664 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:47.664 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:47.664 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:47.664 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################

16:16:47.664 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:47.664 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDECAB
16:16:47.665 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDECAB
16:16:47.870 [main] [30mTRACE[m  - ####################################################
16:16:47.870 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:47.870 [main] [30mTRACE[m  - ####################################################
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
16:16:47.870 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:47.871 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:47.871 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:47.871 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:47.871 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:47.871 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.871 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.871 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:47.871 [main] [30mTRACE[m  - ###############################################
16:16:47.871 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.871 [main] [30mTRACE[m  - ###############################################
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.871 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.872 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.872 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.872 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.872 [main] [30mTRACE[m  - #############################################
16:16:47.872 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.872 [main] [30mTRACE[m  - #############################################

16:16:47.872 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:47.872 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:47.872 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:47.872 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:47.872 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.872 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:47.872 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:47.872 [main] [30mTRACE[m  - ###############################################
16:16:47.872 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.872 [main] [30mTRACE[m  - ###############################################
16:16:47.872 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.872 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.873 [main] [30mTRACE[m  - #############################################
16:16:47.873 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - #############################################

16:16:47.873 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:47.873 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:47.873 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.873 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:47.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:47.873 [main] [30mTRACE[m  - ###############################################
16:16:47.873 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - ###############################################
16:16:47.873 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.873 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.873 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.873 [main] [30mTRACE[m  - #############################################
16:16:47.873 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - #############################################

16:16:47.873 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:47.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:47.874 [main] [30mTRACE[m  - ###############################################
16:16:47.874 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.874 [main] [30mTRACE[m  - ###############################################
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.874 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.874 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.874 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.874 [main] [30mTRACE[m  - #############################################
16:16:47.874 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.874 [main] [30mTRACE[m  - #############################################

16:16:47.874 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:47.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.875 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.875 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.875 [main] [30mTRACE[m  - #############################################
16:16:47.875 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - #############################################

16:16:47.875 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:47.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:47.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:47.875 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:47.875 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.876 [main] [30mTRACE[m  - #############################################
16:16:47.876 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.876 [main] [30mTRACE[m  - #############################################

16:16:47.876 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:47.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:47.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:47.876 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:47.876 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.876 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:47.876 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:47.876 [main] [30mTRACE[m  - ###############################################
16:16:47.876 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.876 [main] [30mTRACE[m  - ###############################################
16:16:47.876 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.876 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.876 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.877 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.877 [main] [30mTRACE[m  - #############################################
16:16:47.877 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.877 [main] [30mTRACE[m  - #############################################

16:16:47.877 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:47.877 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:47.877 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:47.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:47.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:47.877 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:47.877 [main] [30mTRACE[m  - ##################################################
16:16:47.877 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:47.877 [main] [30mTRACE[m  - ##################################################

16:16:47.877 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:48.689 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:48.689 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:48.689 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:48.690 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 24
16:16:48.690 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:48.892 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:48.892 [main] [30mTRACE[m  - ##############################################################
16:16:48.892 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:48.892 [main] [30mTRACE[m  - ##############################################################
16:16:48.892 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:48.892 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:48.893 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:48.893 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:48.893 [main] [30mTRACE[m  - ############################################################
16:16:48.893 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:48.893 [main] [30mTRACE[m  - ############################################################

16:16:48.893 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:48.893 [main] [30mTRACE[m  - ##########################
16:16:48.893 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:48.893 [main] [30mTRACE[m  - ##########################

16:16:48.893 [main] [30mTRACE[m  - ############################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:48.893 [main] [30mTRACE[m  - ############################
16:16:48.893 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:48.893 [main] [30mTRACE[m  - #####################################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:48.893 [main] [30mTRACE[m  - #####################################
16:16:48.893 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:48.893 [main] [30mTRACE[m  - ###########################################################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:48.893 [main] [30mTRACE[m  - ###########################################################
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:48.893 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:48.893 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:48.893 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:48.893 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:48.893 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:48.894 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:48.894 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:48.894 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:48.894 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:48.894 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:48.894 [main] [30mTRACE[m  - ###############################################
16:16:48.894 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:48.894 [main] [30mTRACE[m  - ###############################################
16:16:48.894 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:48.894 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:48.894 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:48.894 [main] [36mDEBUG[m  - Index de la lettre
16:16:48.894 [main] [30mTRACE[m  - #############################################
16:16:48.894 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:48.894 [main] [30mTRACE[m  - #############################################

16:16:48.894 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:48.894 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:48.894 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:48.894 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:48.894 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:48.895 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:48.895 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:48.895 [main] [30mTRACE[m  - #########################################################
16:16:48.895 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:48.895 [main] [30mTRACE[m  - #########################################################

16:16:48.895 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:48.895 [main] [30mTRACE[m  - ###################################
16:16:48.895 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:48.895 [main] [30mTRACE[m  - ###################################

16:16:48.895 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.895 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:48.895 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.895 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:48.895 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  24
16:16:48.895 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, D, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, D, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:48.895 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:48.897 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:48.897 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:48.897 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:48.897 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################

16:16:48.897 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:48.897 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEDAB
16:16:48.897 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEDAB
16:16:49.101 [main] [30mTRACE[m  - ####################################################
16:16:49.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:49.101 [main] [30mTRACE[m  - ####################################################
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
16:16:49.101 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:49.101 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:49.101 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:49.101 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:49.101 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:49.102 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:49.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.102 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.102 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.102 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.102 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.102 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.102 [main] [30mTRACE[m  - #############################################
16:16:49.102 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - #############################################

16:16:49.102 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:49.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:49.102 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.103 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.103 [main] [30mTRACE[m  - #############################################
16:16:49.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - #############################################

16:16:49.103 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:49.103 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:49.103 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.103 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.103 [main] [30mTRACE[m  - #############################################
16:16:49.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - #############################################

16:16:49.103 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:49.104 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.104 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.104 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.104 [main] [30mTRACE[m  - #############################################
16:16:49.104 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - #############################################

16:16:49.104 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:49.104 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:49.104 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.104 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.104 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.104 [main] [30mTRACE[m  - #############################################
16:16:49.104 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - #############################################

16:16:49.105 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:49.105 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.105 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.105 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.105 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.105 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.105 [main] [30mTRACE[m  - #############################################
16:16:49.105 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - #############################################

16:16:49.105 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:49.105 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.106 [main] [30mTRACE[m  - ###############################################
16:16:49.106 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.106 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.106 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.106 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.106 [main] [30mTRACE[m  - #############################################
16:16:49.106 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.106 [main] [30mTRACE[m  - #############################################

16:16:49.106 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:49.106 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:49.106 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:49.106 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:49.106 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:49.106 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:49.106 [main] [30mTRACE[m  - ##################################################
16:16:49.106 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:49.106 [main] [30mTRACE[m  - ##################################################

16:16:49.106 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:49.920 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:49.920 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:49.920 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:49.920 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 25
16:16:49.920 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:50.121 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:50.121 [main] [30mTRACE[m  - ##############################################################
16:16:50.121 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:50.121 [main] [30mTRACE[m  - ##############################################################
16:16:50.121 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:50.121 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:50.121 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:50.122 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:50.122 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:50.122 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:50.122 [main] [30mTRACE[m  - ############################################################
16:16:50.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:50.122 [main] [30mTRACE[m  - ############################################################

16:16:50.122 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:50.122 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:50.122 [main] [30mTRACE[m  - ##########################
16:16:50.122 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:50.122 [main] [30mTRACE[m  - ##########################

16:16:50.122 [main] [30mTRACE[m  - ############################
16:16:50.122 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:50.122 [main] [30mTRACE[m  - ############################
16:16:50.122 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:50.122 [main] [30mTRACE[m  - #####################################
16:16:50.123 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:50.123 [main] [30mTRACE[m  - #####################################
16:16:50.123 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:50.123 [main] [30mTRACE[m  - ###########################################################
16:16:50.123 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:50.123 [main] [30mTRACE[m  - ###########################################################
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:50.123 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:50.123 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:50.123 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:50.123 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:50.123 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:50.123 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:50.123 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:50.123 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:50.123 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:50.123 [main] [30mTRACE[m  - ###############################################
16:16:50.124 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.124 [main] [30mTRACE[m  - ###############################################
16:16:50.124 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.124 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.124 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.124 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.124 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.124 [main] [30mTRACE[m  - #############################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.124 [main] [30mTRACE[m  - #############################################

16:16:50.124 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:50.124 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:50.124 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:50.124 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:50.124 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:50.124 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:50.124 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:50.124 [main] [30mTRACE[m  - #########################################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:50.124 [main] [30mTRACE[m  - #########################################################

16:16:50.124 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:50.124 [main] [30mTRACE[m  - ###################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:50.124 [main] [30mTRACE[m  - ###################################

16:16:50.124 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.124 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:50.124 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.124 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:50.124 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:50.125 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  25
16:16:50.125 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, E, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, E, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:50.125 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:50.127 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:50.127 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:50.127 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:50.127 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################

16:16:50.127 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:50.127 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEEAB
16:16:50.127 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEEAB
16:16:50.331 [main] [30mTRACE[m  - ####################################################
16:16:50.332 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:50.332 [main] [30mTRACE[m  - ####################################################
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
16:16:50.332 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:50.332 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:50.332 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:50.332 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:50.332 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.332 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.332 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.332 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.332 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.332 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.332 [main] [30mTRACE[m  - #############################################
16:16:50.332 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.332 [main] [30mTRACE[m  - #############################################

16:16:50.332 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:50.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:50.332 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.333 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.333 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.333 [main] [30mTRACE[m  - #############################################
16:16:50.333 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - #############################################

16:16:50.333 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:50.333 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:50.333 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:50.333 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:50.333 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.333 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.333 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.333 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.333 [main] [30mTRACE[m  - #############################################
16:16:50.333 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - #############################################

16:16:50.333 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:50.334 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.334 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.334 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.334 [main] [30mTRACE[m  - #############################################
16:16:50.334 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - #############################################

16:16:50.334 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:50.334 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.334 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.334 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.334 [main] [30mTRACE[m  - #############################################
16:16:50.334 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - #############################################

16:16:50.334 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:50.335 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.335 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.335 [main] [30mTRACE[m  - #############################################
16:16:50.335 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - #############################################

16:16:50.335 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:50.335 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.335 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.335 [main] [30mTRACE[m  - #############################################
16:16:50.335 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - #############################################

16:16:50.335 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:50.335 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:50.335 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:50.335 [main] [30mTRACE[m  - ##################################################
16:16:50.335 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:50.335 [main] [30mTRACE[m  - ##################################################

16:16:50.335 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:51.150 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:51.151 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:51.151 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:51.151 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 26
16:16:51.151 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:51.353 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:51.353 [main] [30mTRACE[m  - ##############################################################
16:16:51.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:51.353 [main] [30mTRACE[m  - ##############################################################
16:16:51.353 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:51.353 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:51.353 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:51.354 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:51.354 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:51.354 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:51.354 [main] [30mTRACE[m  - ############################################################
16:16:51.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:51.354 [main] [30mTRACE[m  - ############################################################

16:16:51.354 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:51.354 [main] [30mTRACE[m  - ##########################
16:16:51.354 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:51.354 [main] [30mTRACE[m  - ##########################

16:16:51.354 [main] [30mTRACE[m  - ############################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:51.354 [main] [30mTRACE[m  - ############################
16:16:51.354 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:51.354 [main] [30mTRACE[m  - #####################################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:51.354 [main] [30mTRACE[m  - #####################################
16:16:51.354 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:51.354 [main] [30mTRACE[m  - ###########################################################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:51.354 [main] [30mTRACE[m  - ###########################################################
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:51.354 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:51.355 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:51.355 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:51.355 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:51.355 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:51.355 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:51.355 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:51.355 [main] [30mTRACE[m  - ###############################################
16:16:51.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.355 [main] [30mTRACE[m  - ###############################################
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.355 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.356 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.356 [main] [30mTRACE[m  - #############################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.356 [main] [30mTRACE[m  - #############################################

16:16:51.356 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:51.356 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:51.356 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:51.356 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:51.356 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:51.356 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:51.356 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:51.356 [main] [30mTRACE[m  - #########################################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:51.356 [main] [30mTRACE[m  - #########################################################

16:16:51.356 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:51.356 [main] [30mTRACE[m  - ###################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:51.356 [main] [30mTRACE[m  - ###################################

16:16:51.356 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.356 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:51.356 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.356 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:51.356 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:51.356 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  26
16:16:51.356 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:51.356 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:51.357 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:51.357 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:51.358 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:51.358 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:51.358 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:51.358 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################

16:16:51.358 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:51.358 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
16:16:51.358 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEFAB
16:16:51.562 [main] [30mTRACE[m  - ####################################################
16:16:51.562 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:51.562 [main] [30mTRACE[m  - ####################################################
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, F, A, B]
16:16:51.563 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:51.563 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:51.563 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:51.563 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:51.563 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.563 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.563 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:51.563 [main] [30mTRACE[m  - ###############################################
16:16:51.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.563 [main] [30mTRACE[m  - ###############################################
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.563 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.563 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.563 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.563 [main] [30mTRACE[m  - #############################################
16:16:51.563 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - #############################################

16:16:51.564 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:51.564 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:51.564 [main] [30mTRACE[m  - ###############################################
16:16:51.564 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - ###############################################
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.564 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.564 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.564 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.564 [main] [30mTRACE[m  - #############################################
16:16:51.564 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - #############################################

16:16:51.564 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:51.564 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.565 [main] [30mTRACE[m  - #############################################
16:16:51.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - #############################################

16:16:51.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:51.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:51.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:51.565 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:51.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.565 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.565 [main] [30mTRACE[m  - #############################################
16:16:51.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - #############################################

16:16:51.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:51.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.566 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.566 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.566 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.566 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.566 [main] [30mTRACE[m  - #############################################
16:16:51.566 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - #############################################

16:16:51.566 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:51.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.567 [main] [30mTRACE[m  - #############################################
16:16:51.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - #############################################

16:16:51.567 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:51.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:51.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:51.567 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:51.567 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.567 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:51.567 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:51.567 [main] [30mTRACE[m  - ###############################################
16:16:51.567 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - ###############################################
16:16:51.567 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.567 [main] [30mTRACE[m  - #############################################
16:16:51.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - #############################################

16:16:51.568 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:51.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:51.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:51.568 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:51.568 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:51.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.568 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:51.568 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [8, 0, 0]
16:16:51.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : F
16:16:51.568 [main] [30mTRACE[m  - ###############################################
16:16:51.568 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.568 [main] [30mTRACE[m  - ###############################################
16:16:51.568 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.569 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.569 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.569 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.569 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.569 [main] [30mTRACE[m  - #############################################
16:16:51.569 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.569 [main] [30mTRACE[m  - #############################################

16:16:51.569 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 5
16:16:51.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:51.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:51.569 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 1]
16:16:51.569 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:51.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.569 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [8, 0, 0]
16:16:51.569 [main] [30mTRACE[m  - ##################################################
16:16:51.569 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:51.569 [main] [30mTRACE[m  - ##################################################

16:16:51.569 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:52.381 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:52.381 [main] [32mINFO [m  - SI - Mode "D√©fense"
16:16:54.413 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
16:16:54.413 [main] [30mTRACE[m  - ##########################
16:16:54.413 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
16:16:54.413 [main] [30mTRACE[m  - ##########################
16:16:54.413 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
16:16:54.413 [main] [30mTRACE[m  - ####################################################################
16:16:54.413 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
16:16:54.413 [main] [30mTRACE[m  - ####################################################################
16:16:54.820 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:16:54.820 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:16:54.820 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:16:56.975 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:16:56.975 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
