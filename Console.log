13:36:49.953 [main] [30mTRACE[m  - #######################################
13:36:49.957 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
13:36:49.958 [main] [30mTRACE[m  - #######################################
13:36:49.958 [main] [30mTRACE[m  - ######################################################################################
13:36:49.958 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
13:36:49.958 [main] [30mTRACE[m  - ######################################################################################
13:36:49.958 [main] [30mTRACE[m  - #############################################
13:36:49.959 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
13:36:49.959 [main] [30mTRACE[m  - #############################################
13:36:49.961 [main] [30mTRACE[m  - ###########################################
13:36:49.961 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
13:36:49.961 [main] [30mTRACE[m  - ###########################################

13:36:49.962 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
13:36:49.963 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
13:36:49.964 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
13:36:49.964 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
13:36:49.965 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
13:36:49.965 [main] [30mTRACE[m  - #########################################################
13:36:49.965 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
13:36:49.965 [main] [30mTRACE[m  - #########################################################
13:36:49.966 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
13:36:49.966 [main] [32mINFO [m  - FOR - Lancement boucle infini
13:36:49.967 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
13:36:49.967 [main] [32mINFO [m  - IF - Premier tour
13:36:52.504 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
13:36:52.504 [main] [30mTRACE[m  - ###########################################################
13:36:52.504 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
13:36:52.504 [main] [30mTRACE[m  - ###########################################################
13:36:52.505 [main] [30mTRACE[m  - #######################################
13:36:52.505 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
13:36:52.505 [main] [30mTRACE[m  - #######################################
13:36:52.505 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
13:36:52.505 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
13:36:52.506 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
13:36:53.332 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:53.340 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:53.341 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:36:56.892 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:36:56.893 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
13:36:56.895 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
13:36:56.896 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:36:56.896 [main] [32mINFO [m  - CASE - "Games"
13:36:56.897 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:36:56.897 [main] [32mINFO [m  - CASE - 'R'
13:36:57.103 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
13:36:57.104 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
13:36:57.104 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:36:57.916 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:57.916 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:57.916 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:36:58.978 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:36:58.979 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:36:58.980 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
13:36:58.980 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:36:58.980 [main] [32mINFO [m  - CASE - "Comfirm"
13:36:58.980 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:36:58.981 [main] [32mINFO [m  - CASE - 'O'
13:36:58.983 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:36:58.984 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
13:36:58.984 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
13:36:58.984 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
13:36:59.998 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:36:59.998 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:36:59.998 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:37:04.921 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:37:04.924 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 1
13:37:04.927 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 1
13:37:04.927 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:37:04.927 [main] [32mINFO [m  - CASE - "Modes"
13:37:04.927 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:37:04.927 [main] [32mINFO [m  - CASE - '1'
13:37:05.133 [main] [36mDEBUG[m  - M√†J - (String) Choix : Challenger
13:37:05.134 [main] [36mDEBUG[m  - str_ModeChoise : Challenger
13:37:05.134 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:37:05.946 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:37:05.946 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:37:05.946 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:37:06.990 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:37:06.991 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:37:06.992 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
13:37:06.993 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:37:06.993 [main] [32mINFO [m  - CASE - "Comfirm"
13:37:06.993 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:37:06.994 [main] [32mINFO [m  - CASE - 'O'
13:37:06.995 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:37:06.996 [main] [36mDEBUG[m  - str_ConfirmChoise : O
13:37:06.997 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
13:37:06.998 [main] [36mDEBUG[m  - (String) Choix du mode : Challenger
13:37:09.274 [main] [30mTRACE[m  - #####################################
13:37:09.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
13:37:09.274 [main] [30mTRACE[m  - #####################################

13:37:09.274 [main] [30mTRACE[m  - ################################################################################################
13:37:09.274 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
13:37:09.274 [main] [30mTRACE[m  - ################################################################################################
13:37:09.275 [main] [32mINFO [m  - SWITCH - Choix du jeu
13:37:09.275 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
13:37:09.291 [main] [32mINFO [m  - Instance "recherchePlusMoins"
13:37:09.291 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
13:37:09.291 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
13:37:09.291 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
13:37:09.292 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
13:37:09.293 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
13:37:09.293 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
13:37:09.293 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
13:37:09.294 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
13:37:09.294 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
13:37:09.295 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
13:37:09.296 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
13:37:09.296 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
13:37:09.296 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
13:37:09.296 [main] [32mINFO [m  - Lancement du compteur de tours
13:37:09.297 [main] [30mTRACE[m  - ###############################
13:37:09.297 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:09.297 [main] [30mTRACE[m  - ###############################
13:37:09.297 [main] [32mINFO [m  - // IF - Premier tour
13:37:09.503 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.504 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 0, 0, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 0, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 0, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.505 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 0, 0, 0, 0]
13:37:09.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.506 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 0, 0, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 0, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 6, 0]
13:37:09.507 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
13:37:09.507 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:09.508 [main] [36mDEBUG[m  - Nombre al√©atoire g√©n√©r√© : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:09.509 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te al√©atoire : [I@4bc222e
13:37:10.729 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:10.731 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:10.738 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:10.740 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:10.741 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:10.743 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:10.744 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:10.946 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:10.947 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:10.947 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:10.947 [main] [32mINFO [m  - try
13:37:13.378 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:13.378 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:13.379 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:13.380 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:13.380 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:13.381 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:13.382 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:13.383 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:13.384 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:13.385 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:13.386 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:13.386 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:13.387 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:13.387 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:13.389 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:13.389 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:13.390 [main] [36mDEBUG[m  - int_IStart : 7
13:37:13.399 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.399 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.603 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:13.604 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:13.604 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:13.604 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.605 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:13.606 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:13.814 [main] [30mTRACE[m  - ###############################
13:37:13.815 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:13.815 [main] [30mTRACE[m  - ###############################
13:37:13.815 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:13.815 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:13.816 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:13.816 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:13.816 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:14.021 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:14.021 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:14.022 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:14.023 [main] [32mINFO [m  - try
13:37:14.801 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:14.801 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:14.802 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:14.802 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:14.802 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:14.802 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:14.803 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:14.803 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:14.803 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:14.803 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:14.804 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:14.806 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:14.806 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:14.806 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:14.807 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:14.807 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:14.807 [main] [36mDEBUG[m  - int_IStart : 7
13:37:14.807 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:14.807 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:14.807 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:15.235 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:15.235 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:15.235 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:15.235 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.236 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:15.237 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:15.442 [main] [30mTRACE[m  - ###############################
13:37:15.444 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:15.445 [main] [30mTRACE[m  - ###############################
13:37:15.445 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:15.445 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:15.445 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:15.446 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:15.447 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:15.654 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:15.654 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:15.655 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:15.655 [main] [32mINFO [m  - try
13:37:16.058 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:16.058 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:16.058 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:16.059 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:16.059 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:16.059 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:16.060 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:16.060 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:16.060 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:16.060 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:16.064 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:16.064 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:16.064 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:16.064 [main] [36mDEBUG[m  - int_IStart : 7
13:37:16.064 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.064 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.064 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:16.471 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:16.471 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:16.472 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:16.472 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.472 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:16.473 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:16.678 [main] [30mTRACE[m  - ###############################
13:37:16.678 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:16.678 [main] [30mTRACE[m  - ###############################
13:37:16.678 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:16.679 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:16.679 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:16.679 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:16.679 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:16.884 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:16.884 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:16.884 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:16.884 [main] [32mINFO [m  - try
13:37:17.841 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:17.841 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:17.841 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:17.842 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:17.842 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:17.843 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:17.843 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:17.843 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:17.843 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:17.843 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:17.843 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:17.843 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:17.843 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:17.844 [main] [36mDEBUG[m  - int_IStart : 7
13:37:17.844 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:17.845 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:17.846 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:18.253 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:18.254 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:18.254 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:18.254 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:18.254 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.255 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:18.256 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:18.456 [main] [30mTRACE[m  - ###############################
13:37:18.456 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:18.457 [main] [30mTRACE[m  - ###############################
13:37:18.457 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:18.457 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:18.457 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:18.457 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:18.457 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:18.662 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:18.663 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:18.663 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:18.663 [main] [32mINFO [m  - try
13:37:19.569 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:19.570 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:19.570 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:19.570 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:19.570 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:19.571 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:19.571 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:19.571 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:19.571 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:19.572 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:19.572 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:19.572 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:19.572 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:19.572 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:19.573 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:19.575 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:19.575 [main] [36mDEBUG[m  - int_IStart : 7
13:37:19.575 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.575 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.575 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:19.984 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:19.984 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:19.984 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:19.984 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.984 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:19.985 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:20.189 [main] [30mTRACE[m  - ###############################
13:37:20.190 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:20.190 [main] [30mTRACE[m  - ###############################
13:37:20.190 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:20.190 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:20.191 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:20.191 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:20.191 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:20.396 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:20.396 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:20.396 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:20.396 [main] [32mINFO [m  - try
13:37:21.349 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:21.349 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:21.350 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:21.350 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:21.351 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:21.351 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:21.351 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:21.351 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:21.351 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:21.352 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:21.353 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:21.354 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:21.354 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:21.354 [main] [36mDEBUG[m  - int_IStart : 7
13:37:21.354 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.354 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.354 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:21.760 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:21.760 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:21.761 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:21.761 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.761 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:21.762 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:21.965 [main] [30mTRACE[m  - ###############################
13:37:21.965 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:21.965 [main] [30mTRACE[m  - ###############################
13:37:21.965 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:21.966 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:21.966 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:21.966 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:21.966 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:22.173 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:22.174 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:22.174 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:22.174 [main] [32mINFO [m  - try
13:37:23.088 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:23.096 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:23.097 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:23.097 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:23.097 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:23.098 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:23.098 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:23.098 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:23.099 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:23.100 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:23.100 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:23.100 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:23.100 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:23.100 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:23.100 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:23.100 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:23.101 [main] [36mDEBUG[m  - int_IStart : 7
13:37:23.101 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.101 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.101 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:23.507 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:23.507 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:23.508 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:23.508 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.508 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:23.509 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:23.714 [main] [30mTRACE[m  - ###############################
13:37:23.715 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:23.715 [main] [30mTRACE[m  - ###############################
13:37:23.715 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:23.715 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:23.715 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:23.715 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:23.715 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:23.920 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:23.920 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:23.921 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:23.921 [main] [32mINFO [m  - try
13:37:24.914 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:24.915 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:24.915 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:24.915 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:24.915 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:24.915 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:24.916 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:24.916 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:24.916 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:24.916 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:24.916 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:24.917 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:24.917 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:24.917 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:24.917 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:24.917 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:24.917 [main] [36mDEBUG[m  - int_IStart : 7
13:37:24.918 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:24.918 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:24.919 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:25.324 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:25.324 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:25.324 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:25.325 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.325 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:25.326 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:25.527 [main] [30mTRACE[m  - ###############################
13:37:25.528 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:25.528 [main] [30mTRACE[m  - ###############################
13:37:25.528 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:25.528 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:25.528 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:25.528 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:25.528 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:25.731 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:25.732 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:25.732 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:25.732 [main] [32mINFO [m  - try
13:37:26.484 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:26.484 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:26.485 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:26.485 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:26.485 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:26.486 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:26.488 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:26.489 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:26.489 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:26.490 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:26.490 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:26.490 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:26.490 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:26.490 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:26.491 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:26.491 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:26.491 [main] [36mDEBUG[m  - int_IStart : 7
13:37:26.491 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.491 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.491 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:26.897 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:26.898 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:26.898 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:26.898 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.898 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:26.899 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:27.104 [main] [30mTRACE[m  - ###############################
13:37:27.104 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:37:27.104 [main] [30mTRACE[m  - ###############################
13:37:27.104 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
13:37:27.105 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
13:37:27.105 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
13:37:27.105 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:37:27.105 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:27.310 [main] [32mINFO [m  - Initialise le scanner pour la proposition
13:37:27.310 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
13:37:27.311 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
13:37:27.311 [main] [32mINFO [m  - try
13:37:28.264 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 1
13:37:28.264 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
13:37:28.264 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
13:37:28.264 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:28.265 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
13:37:28.265 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
13:37:28.265 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
13:37:28.265 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
13:37:28.265 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
13:37:28.266 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
13:37:28.266 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
13:37:28.266 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
13:37:28.267 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
13:37:28.268 [main] [36mDEBUG[m  - int_IStart : 7
13:37:28.268 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.268 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.268 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
13:37:28.674 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 0, 0, 0, 0, 0, 0, 1]
13:37:28.674 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [2, 3, 7, 8, 7, 3, 6, 6]
13:37:28.674 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
13:37:28.674 [main] [32mINFO [m  - FOR - Pour chaque unit√©
13:37:28.674 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.674 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
13:37:28.675 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
13:37:28.877 [main] [32mINFO [m  - IF - La partie n'est pas gagn√©e
13:37:28.878 [main] [32mINFO [m  - SWITCH - Mode du jeu "Recherche +/-"
13:37:28.878 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:37:31.112 [main] [30mTRACE[m  - #############################
13:37:31.112 [main] [30mTRACE[m  - ### END ### Mode "Challenger"
13:37:31.112 [main] [30mTRACE[m  - #############################
13:37:31.112 [main] [32mINFO [m  - Lancement du jeu "Recherche +/-"
13:37:31.112 [main] [30mTRACE[m  - ####################################################################
13:37:31.113 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
13:37:31.113 [main] [30mTRACE[m  - ####################################################################
13:37:31.519 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:37:31.519 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:37:31.519 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:11.680 [main] [30mTRACE[m  - #######################################
13:46:11.684 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
13:46:11.684 [main] [30mTRACE[m  - #######################################
13:46:11.685 [main] [30mTRACE[m  - ######################################################################################
13:46:11.685 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
13:46:11.685 [main] [30mTRACE[m  - ######################################################################################
13:46:11.685 [main] [30mTRACE[m  - #############################################
13:46:11.685 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
13:46:11.685 [main] [30mTRACE[m  - #############################################
13:46:11.687 [main] [30mTRACE[m  - ###########################################
13:46:11.687 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
13:46:11.687 [main] [30mTRACE[m  - ###########################################

13:46:11.688 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
13:46:11.689 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
13:46:11.689 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
13:46:11.690 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
13:46:11.691 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
13:46:11.692 [main] [30mTRACE[m  - #########################################################
13:46:11.692 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
13:46:11.692 [main] [30mTRACE[m  - #########################################################
13:46:11.692 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
13:46:11.693 [main] [32mINFO [m  - FOR - Lancement boucle infini
13:46:11.693 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
13:46:11.693 [main] [32mINFO [m  - IF - Premier tour
13:46:14.239 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
13:46:14.240 [main] [30mTRACE[m  - ###########################################################
13:46:14.240 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
13:46:14.240 [main] [30mTRACE[m  - ###########################################################
13:46:14.240 [main] [30mTRACE[m  - #######################################
13:46:14.240 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
13:46:14.241 [main] [30mTRACE[m  - #######################################
13:46:14.241 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
13:46:14.241 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
13:46:14.242 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
13:46:15.067 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:15.067 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:15.068 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:17.383 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:17.387 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
13:46:17.388 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
13:46:17.388 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:17.389 [main] [32mINFO [m  - CASE - "Games"
13:46:17.390 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:17.595 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
13:46:17.596 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
13:46:17.596 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:46:18.407 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:18.408 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:18.408 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:19.339 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:19.340 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:46:19.341 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
13:46:19.342 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:19.342 [main] [32mINFO [m  - CASE - "Comfirm"
13:46:19.343 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:19.343 [main] [32mINFO [m  - CASE - 'O'
13:46:19.344 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:46:19.344 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
13:46:19.345 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
13:46:19.345 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
13:46:20.358 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:20.358 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:20.359 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:24.604 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:24.609 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 1
13:46:24.611 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 1
13:46:24.612 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:24.613 [main] [32mINFO [m  - CASE - "Modes"
13:46:24.614 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:24.615 [main] [32mINFO [m  - CASE - '1'
13:46:24.817 [main] [36mDEBUG[m  - M√†J - (String) Choix : Challenger
13:46:24.817 [main] [36mDEBUG[m  - str_ModeChoise : Challenger
13:46:24.817 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:46:25.630 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:46:25.630 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:46:25.631 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:46:27.059 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:46:27.060 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:46:27.061 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
13:46:27.061 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:46:27.062 [main] [32mINFO [m  - CASE - "Comfirm"
13:46:27.063 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:46:27.063 [main] [32mINFO [m  - CASE - 'O'
13:46:27.064 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:46:27.065 [main] [36mDEBUG[m  - str_ConfirmChoise : O
13:46:27.066 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
13:46:27.067 [main] [36mDEBUG[m  - (String) Choix du mode : Challenger
13:46:29.330 [main] [30mTRACE[m  - #####################################
13:46:29.330 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
13:46:29.330 [main] [30mTRACE[m  - #####################################

13:46:29.331 [main] [30mTRACE[m  - ################################################################################################
13:46:29.331 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
13:46:29.331 [main] [30mTRACE[m  - ################################################################################################
13:46:29.331 [main] [32mINFO [m  - SWITCH - Choix du jeu
13:46:29.331 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
13:46:29.356 [main] [32mINFO [m  - Instance "Mastermind"
13:46:29.356 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
13:46:29.356 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
13:46:29.357 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:46:29.357 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
13:46:29.358 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
13:46:29.358 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:46:29.359 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.359 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
13:46:29.360 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
13:46:29.361 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
13:46:29.364 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
13:46:29.364 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
13:46:29.365 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:46:29.365 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:46:29.365 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:46:29.366 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:46:29.367 [main] [32mINFO [m  - Lancement du compteur de tours
13:46:29.367 [main] [30mTRACE[m  - ###############################
13:46:29.367 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:46:29.367 [main] [30mTRACE[m  - ###############################
13:46:29.367 [main] [30mTRACE[m  - ###################################################
13:46:29.368 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_array_ch_RandomLetter()
13:46:29.368 [main] [30mTRACE[m  - ###################################################
13:46:29.368 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
13:46:29.368 [main] [32mINFO [m  - Initialisation (char[]) Combinaison secr√®te
13:46:29.369 [main] [36mDEBUG[m  - Injection (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:46:29.369 [main] [30mTRACE[m  - #################################################
13:46:29.369 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_array_ch_RandomLetter()
13:46:29.369 [main] [30mTRACE[m  - #################################################

13:46:29.369 [main] [32mINFO [m  - G√©n√©ration de la combinaison secr√®te
13:46:29.369 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:46:29.370 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [0, 3, 2, 1, 1, 1]
13:46:30.814 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:46:30.815 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:46:30.815 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:46:30.815 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:46:30.815 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:46:31.016 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:46:31.016 [main] [30mTRACE[m  - #####################################
13:46:31.017 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:46:31.017 [main] [30mTRACE[m  - #####################################
13:46:31.018 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:46:31.018 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:05.103 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:05.106 [main] [32mINFO [m  - Instance "Pattern"
13:48:05.106 [main] [32mINFO [m  - Instance "Matcher"
13:48:05.106 [main] [32mINFO [m  - IF - Match
13:48:05.107 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:05.107 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:05.108 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:05.108 [main] [30mTRACE[m  - ###################################
13:48:05.108 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:05.109 [main] [30mTRACE[m  - ###################################

13:48:05.109 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:05.109 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:05.109 [main] [30mTRACE[m  - ##########################################
13:48:05.109 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:05.110 [main] [30mTRACE[m  - ##########################################
13:48:05.110 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:05.110 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:05.111 [main] [30mTRACE[m  - ########################################
13:48:05.111 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:05.111 [main] [30mTRACE[m  - ########################################

13:48:05.111 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:05.111 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:05.111 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:05.111 [main] [30mTRACE[m  - ##############################################
13:48:05.112 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:05.112 [main] [30mTRACE[m  - ##############################################
13:48:05.112 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:05.112 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:05.113 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:05.113 [main] [30mTRACE[m  - ##########################################
13:48:05.113 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:05.113 [main] [30mTRACE[m  - ##########################################

13:48:05.113 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:05.114 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:05.114 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:05.114 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:05.116 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:05.116 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:05.117 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:05.117 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:05.117 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:05.118 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:05.118 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:05.125 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:05.126 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:05.328 [main] [30mTRACE[m  - ####################################################
13:48:05.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:05.329 [main] [30mTRACE[m  - ####################################################
13:48:05.329 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:05.330 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:05.330 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:05.331 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:05.331 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:05.331 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:05.333 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:05.333 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:05.334 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:05.334 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:05.335 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.335 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.335 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:05.335 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.336 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.336 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.337 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:05.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.337 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:05.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:05.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:05.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:05.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.340 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:05.340 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.340 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.340 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:05.340 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.340 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.341 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:05.341 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.341 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.341 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:05.341 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.341 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.341 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:05.341 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.342 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.342 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:05.342 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.342 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.342 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:05.342 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.343 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:05.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.343 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.343 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:05.343 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:05.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:05.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:05.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:05.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:05.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:05.344 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:05.344 [main] [30mTRACE[m  - ##################################################
13:48:05.344 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:05.344 [main] [30mTRACE[m  - ##################################################

13:48:05.345 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:06.158 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:06.158 [main] [30mTRACE[m  - ###############################
13:48:06.159 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:06.159 [main] [30mTRACE[m  - ###############################
13:48:06.360 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:06.360 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:06.360 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:06.361 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:06.361 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:06.565 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:06.565 [main] [30mTRACE[m  - #####################################
13:48:06.566 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:06.566 [main] [30mTRACE[m  - #####################################
13:48:06.566 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:06.566 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:08.220 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:08.220 [main] [32mINFO [m  - Instance "Pattern"
13:48:08.220 [main] [32mINFO [m  - Instance "Matcher"
13:48:08.220 [main] [32mINFO [m  - IF - Match
13:48:08.220 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:08.220 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:08.221 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:08.221 [main] [30mTRACE[m  - ###################################
13:48:08.221 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:08.221 [main] [30mTRACE[m  - ###################################

13:48:08.221 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:08.221 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:08.221 [main] [30mTRACE[m  - ##########################################
13:48:08.221 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:08.222 [main] [30mTRACE[m  - ##########################################
13:48:08.222 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:08.224 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:08.224 [main] [30mTRACE[m  - ########################################
13:48:08.224 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:08.224 [main] [30mTRACE[m  - ########################################

13:48:08.224 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:08.224 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:08.224 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:08.224 [main] [30mTRACE[m  - ##############################################
13:48:08.225 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:08.225 [main] [30mTRACE[m  - ##############################################
13:48:08.225 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:08.225 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:08.225 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:08.225 [main] [30mTRACE[m  - ##########################################
13:48:08.225 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:08.226 [main] [30mTRACE[m  - ##########################################

13:48:08.226 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:08.226 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:08.226 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:08.227 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:08.227 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:08.228 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:08.229 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:08.230 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:08.230 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:08.230 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:08.230 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:08.231 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:08.231 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:08.436 [main] [30mTRACE[m  - ####################################################
13:48:08.436 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:08.436 [main] [30mTRACE[m  - ####################################################
13:48:08.436 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:08.436 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:08.437 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:08.437 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:08.437 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:08.437 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:08.438 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:08.438 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.438 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.439 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:08.439 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.439 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.439 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:08.439 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.439 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:08.440 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.440 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.440 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:08.440 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.440 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.440 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:08.440 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.440 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:08.441 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.441 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.441 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:08.441 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.441 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:08.442 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.442 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.442 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:08.442 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.442 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.442 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:08.442 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.442 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.443 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:08.443 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.443 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.443 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:08.443 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.444 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.444 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:08.444 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.444 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.444 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:08.445 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:08.445 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:08.445 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:08.445 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:08.445 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:08.445 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:08.445 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:08.446 [main] [30mTRACE[m  - ##################################################
13:48:08.446 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:08.446 [main] [30mTRACE[m  - ##################################################

13:48:08.446 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:09.254 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:09.254 [main] [30mTRACE[m  - ###############################
13:48:09.254 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:09.254 [main] [30mTRACE[m  - ###############################
13:48:09.461 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:09.461 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:09.461 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:09.461 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:09.461 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:09.662 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:09.662 [main] [30mTRACE[m  - #####################################
13:48:09.662 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:09.662 [main] [30mTRACE[m  - #####################################
13:48:09.663 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:09.663 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:10.903 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:10.903 [main] [32mINFO [m  - Instance "Pattern"
13:48:10.904 [main] [32mINFO [m  - Instance "Matcher"
13:48:10.904 [main] [32mINFO [m  - IF - Match
13:48:10.904 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:10.904 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:10.905 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:10.905 [main] [30mTRACE[m  - ###################################
13:48:10.905 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:10.906 [main] [30mTRACE[m  - ###################################

13:48:10.906 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:10.906 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:10.906 [main] [30mTRACE[m  - ##########################################
13:48:10.906 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:10.906 [main] [30mTRACE[m  - ##########################################
13:48:10.906 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:10.906 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:10.907 [main] [30mTRACE[m  - ########################################
13:48:10.907 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:10.908 [main] [30mTRACE[m  - ########################################

13:48:10.908 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:10.908 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:10.908 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:10.908 [main] [30mTRACE[m  - ##############################################
13:48:10.908 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:10.908 [main] [30mTRACE[m  - ##############################################
13:48:10.908 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:10.909 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:10.909 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:10.909 [main] [30mTRACE[m  - ##########################################
13:48:10.909 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:10.909 [main] [30mTRACE[m  - ##########################################

13:48:10.909 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:10.909 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:10.909 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:10.909 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:10.909 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:10.909 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:10.910 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:10.910 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:10.910 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:10.910 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:10.910 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:10.911 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:10.911 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:11.114 [main] [30mTRACE[m  - ####################################################
13:48:11.115 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:11.115 [main] [30mTRACE[m  - ####################################################
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:11.115 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:11.116 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:11.116 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:11.116 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:11.116 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:11.116 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:11.117 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:11.117 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.117 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.118 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.118 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:11.118 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.118 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.118 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:11.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.119 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:11.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.119 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:11.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:11.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:11.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:11.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.122 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.122 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:11.122 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.122 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.122 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:11.123 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.123 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.123 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:11.124 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.125 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.125 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:11.125 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.125 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.125 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:11.126 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.126 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.126 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:11.127 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.127 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.127 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:11.127 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:11.127 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:11.127 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:11.127 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:11.127 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:11.128 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:11.128 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:11.128 [main] [30mTRACE[m  - ##################################################
13:48:11.128 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:11.128 [main] [30mTRACE[m  - ##################################################

13:48:11.128 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:11.939 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:11.939 [main] [30mTRACE[m  - ###############################
13:48:11.939 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:11.940 [main] [30mTRACE[m  - ###############################
13:48:12.142 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:12.142 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:12.142 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:12.142 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:12.143 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:12.345 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:12.346 [main] [30mTRACE[m  - #####################################
13:48:12.346 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:12.346 [main] [30mTRACE[m  - #####################################
13:48:12.346 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:12.346 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:13.198 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:13.199 [main] [32mINFO [m  - Instance "Pattern"
13:48:13.199 [main] [32mINFO [m  - Instance "Matcher"
13:48:13.199 [main] [32mINFO [m  - IF - Match
13:48:13.199 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:13.199 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:13.199 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:13.199 [main] [30mTRACE[m  - ###################################
13:48:13.199 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:13.200 [main] [30mTRACE[m  - ###################################

13:48:13.200 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:13.200 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:13.200 [main] [30mTRACE[m  - ##########################################
13:48:13.200 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:13.200 [main] [30mTRACE[m  - ##########################################
13:48:13.200 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:13.200 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:13.200 [main] [30mTRACE[m  - ########################################
13:48:13.201 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:13.201 [main] [30mTRACE[m  - ########################################

13:48:13.202 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:13.203 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:13.203 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:13.203 [main] [30mTRACE[m  - ##############################################
13:48:13.203 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:13.203 [main] [30mTRACE[m  - ##############################################
13:48:13.203 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:13.204 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:13.204 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:13.204 [main] [30mTRACE[m  - ##########################################
13:48:13.204 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:13.204 [main] [30mTRACE[m  - ##########################################

13:48:13.205 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:13.205 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:13.205 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:13.205 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:13.205 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:13.206 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:13.206 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:13.206 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:13.208 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:13.208 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:13.208 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:13.208 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:13.208 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:13.413 [main] [30mTRACE[m  - ####################################################
13:48:13.414 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:13.414 [main] [30mTRACE[m  - ####################################################
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:13.414 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:13.414 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:13.414 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:13.415 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:13.415 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.415 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.416 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.416 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:13.416 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.416 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.416 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:13.416 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.416 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.416 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:13.417 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.417 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:13.417 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.417 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.417 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:13.417 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.417 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:13.417 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.418 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:13.418 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.418 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.418 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:13.418 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.419 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:13.419 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.420 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:13.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:13.421 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.421 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:13.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:13.422 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.422 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:13.422 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:13.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:13.423 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:13.423 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:13.423 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:13.423 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:13.423 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:13.423 [main] [30mTRACE[m  - ##################################################
13:48:13.424 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:13.424 [main] [30mTRACE[m  - ##################################################

13:48:13.424 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:14.238 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:14.238 [main] [30mTRACE[m  - ###############################
13:48:14.238 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:14.238 [main] [30mTRACE[m  - ###############################
13:48:14.441 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:14.441 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:14.441 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:14.441 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:14.441 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:14.644 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:14.644 [main] [30mTRACE[m  - #####################################
13:48:14.645 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:14.645 [main] [30mTRACE[m  - #####################################
13:48:14.645 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:14.645 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:15.413 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:15.413 [main] [32mINFO [m  - Instance "Pattern"
13:48:15.413 [main] [32mINFO [m  - Instance "Matcher"
13:48:15.413 [main] [32mINFO [m  - IF - Match
13:48:15.413 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:15.413 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:15.413 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:15.414 [main] [30mTRACE[m  - ###################################
13:48:15.414 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:15.414 [main] [30mTRACE[m  - ###################################

13:48:15.414 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:15.414 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:15.414 [main] [30mTRACE[m  - ##########################################
13:48:15.414 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:15.415 [main] [30mTRACE[m  - ##########################################
13:48:15.416 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:15.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:15.417 [main] [30mTRACE[m  - ########################################
13:48:15.417 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:15.417 [main] [30mTRACE[m  - ########################################

13:48:15.417 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:15.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:15.417 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:15.417 [main] [30mTRACE[m  - ##############################################
13:48:15.417 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:15.418 [main] [30mTRACE[m  - ##############################################
13:48:15.418 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:15.418 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:15.418 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:15.418 [main] [30mTRACE[m  - ##########################################
13:48:15.418 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:15.418 [main] [30mTRACE[m  - ##########################################

13:48:15.418 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:15.418 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:15.418 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:15.418 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:15.418 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:15.418 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:15.419 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:15.419 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:15.419 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:15.419 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:15.419 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:15.420 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:15.421 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:15.625 [main] [30mTRACE[m  - ####################################################
13:48:15.625 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:15.625 [main] [30mTRACE[m  - ####################################################
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:15.625 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:15.625 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:15.625 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:15.626 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:15.626 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.626 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.627 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.627 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:15.627 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.627 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.628 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:15.628 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.628 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.628 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:15.628 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.628 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.628 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:15.629 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.629 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:15.629 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.629 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.629 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:15.629 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.629 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:15.633 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.634 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.634 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:15.634 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.634 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.634 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:15.634 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.634 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.634 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:15.635 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:15.635 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.635 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.635 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:15.635 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:15.635 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.636 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:15.636 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:15.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:15.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:15.636 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:15.636 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:15.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:15.636 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:15.636 [main] [30mTRACE[m  - ##################################################
13:48:15.637 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:15.637 [main] [30mTRACE[m  - ##################################################

13:48:15.637 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:16.449 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:16.449 [main] [30mTRACE[m  - ###############################
13:48:16.450 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:16.450 [main] [30mTRACE[m  - ###############################
13:48:16.653 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:16.653 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:16.653 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:16.653 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:16.653 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:16.855 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:16.856 [main] [30mTRACE[m  - #####################################
13:48:16.856 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:16.856 [main] [30mTRACE[m  - #####################################
13:48:16.856 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:16.856 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:17.011 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:48:17.012 [main] [32mINFO [m  - Instance "Pattern"
13:48:17.012 [main] [32mINFO [m  - Instance "Matcher"
13:48:17.012 [main] [33mWARN [m  - ELSE - Error
13:48:17.013 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:48:17.216 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:17.216 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:48:17.216 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:17.216 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:17.418 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:48:18.693 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:18.694 [main] [32mINFO [m  - Instance "Pattern"
13:48:18.694 [main] [32mINFO [m  - Instance "Matcher"
13:48:18.694 [main] [32mINFO [m  - IF - Match
13:48:18.694 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:18.694 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:18.694 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:18.694 [main] [30mTRACE[m  - ###################################
13:48:18.695 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:18.695 [main] [30mTRACE[m  - ###################################

13:48:18.695 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:18.695 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:18.695 [main] [30mTRACE[m  - ##########################################
13:48:18.695 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:18.695 [main] [30mTRACE[m  - ##########################################
13:48:18.695 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:18.695 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:18.695 [main] [30mTRACE[m  - ########################################
13:48:18.695 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:18.697 [main] [30mTRACE[m  - ########################################

13:48:18.697 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:18.697 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:18.698 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:18.698 [main] [30mTRACE[m  - ##############################################
13:48:18.698 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:18.698 [main] [30mTRACE[m  - ##############################################
13:48:18.698 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:18.698 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:18.698 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:18.698 [main] [30mTRACE[m  - ##########################################
13:48:18.698 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:18.698 [main] [30mTRACE[m  - ##########################################

13:48:18.699 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:18.699 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:18.699 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:18.699 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:18.699 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:18.699 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:18.699 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:18.699 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:18.700 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:18.700 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:18.701 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:18.702 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:18.702 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:18.905 [main] [30mTRACE[m  - ####################################################
13:48:18.905 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:18.905 [main] [30mTRACE[m  - ####################################################
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:18.905 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:18.906 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:18.906 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:18.906 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:18.906 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:18.906 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.906 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:18.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.906 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.906 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:18.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:18.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:18.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:18.907 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:18.908 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.908 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:18.908 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.908 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:18.908 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.908 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:18.908 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.908 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:18.909 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.909 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.909 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:18.909 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.909 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.909 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:18.909 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:18.909 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:18.909 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:18.909 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:18.909 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:18.909 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:18.910 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:18.910 [main] [30mTRACE[m  - ##################################################
13:48:18.910 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:18.910 [main] [30mTRACE[m  - ##################################################

13:48:18.910 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:19.723 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:19.724 [main] [30mTRACE[m  - ###############################
13:48:19.724 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:19.724 [main] [30mTRACE[m  - ###############################
13:48:19.927 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:19.927 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:19.927 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:19.927 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:19.927 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:20.132 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:20.132 [main] [30mTRACE[m  - #####################################
13:48:20.133 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:20.133 [main] [30mTRACE[m  - #####################################
13:48:20.133 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:20.133 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:21.300 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:21.300 [main] [32mINFO [m  - Instance "Pattern"
13:48:21.300 [main] [32mINFO [m  - Instance "Matcher"
13:48:21.301 [main] [32mINFO [m  - IF - Match
13:48:21.301 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:21.301 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:21.301 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:21.301 [main] [30mTRACE[m  - ###################################
13:48:21.301 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:21.301 [main] [30mTRACE[m  - ###################################

13:48:21.301 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:21.301 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:21.301 [main] [30mTRACE[m  - ##########################################
13:48:21.301 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:21.301 [main] [30mTRACE[m  - ##########################################
13:48:21.302 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:21.302 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:21.302 [main] [30mTRACE[m  - ########################################
13:48:21.302 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:21.302 [main] [30mTRACE[m  - ########################################

13:48:21.302 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:21.302 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:21.302 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:21.303 [main] [30mTRACE[m  - ##############################################
13:48:21.303 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:21.303 [main] [30mTRACE[m  - ##############################################
13:48:21.303 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:21.304 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:21.305 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:21.305 [main] [30mTRACE[m  - ##########################################
13:48:21.305 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:21.305 [main] [30mTRACE[m  - ##########################################

13:48:21.305 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:21.305 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:21.305 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:21.306 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:21.306 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:21.306 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:21.306 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:21.306 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:21.306 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:21.306 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:21.306 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:21.306 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:21.306 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:21.511 [main] [30mTRACE[m  - ####################################################
13:48:21.511 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:21.512 [main] [30mTRACE[m  - ####################################################
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:21.512 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:21.512 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:21.512 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:21.512 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:21.513 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.513 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.513 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.513 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:21.513 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.514 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.514 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:21.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.514 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:21.514 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.514 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.514 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:21.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:21.515 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.515 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.515 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:21.515 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.515 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:21.515 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.515 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.516 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:21.516 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.516 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.516 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:21.516 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.516 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.516 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:21.516 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.516 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.516 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:21.517 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.517 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.517 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:21.517 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.517 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:21.523 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.523 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:21.523 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:21.523 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:21.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:21.523 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:21.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:21.524 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:21.524 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:21.524 [main] [30mTRACE[m  - ##################################################
13:48:21.524 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:21.524 [main] [30mTRACE[m  - ##################################################

13:48:21.524 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:22.338 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:22.338 [main] [30mTRACE[m  - ###############################
13:48:22.338 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:22.338 [main] [30mTRACE[m  - ###############################
13:48:22.542 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:22.542 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:22.542 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:22.543 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:22.543 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:22.749 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:22.749 [main] [30mTRACE[m  - #####################################
13:48:22.749 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:22.750 [main] [30mTRACE[m  - #####################################
13:48:22.750 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:22.750 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:23.911 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:23.914 [main] [32mINFO [m  - Instance "Pattern"
13:48:23.914 [main] [32mINFO [m  - Instance "Matcher"
13:48:23.915 [main] [32mINFO [m  - IF - Match
13:48:23.915 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:23.915 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:23.915 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:23.915 [main] [30mTRACE[m  - ###################################
13:48:23.915 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:23.915 [main] [30mTRACE[m  - ###################################

13:48:23.915 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:23.915 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:23.915 [main] [30mTRACE[m  - ##########################################
13:48:23.915 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:23.915 [main] [30mTRACE[m  - ##########################################
13:48:23.915 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:23.915 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:23.915 [main] [30mTRACE[m  - ########################################
13:48:23.915 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:23.915 [main] [30mTRACE[m  - ########################################

13:48:23.915 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:23.915 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:23.916 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:23.916 [main] [30mTRACE[m  - ##############################################
13:48:23.916 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:23.916 [main] [30mTRACE[m  - ##############################################
13:48:23.916 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:23.916 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:23.916 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:23.916 [main] [30mTRACE[m  - ##########################################
13:48:23.916 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:23.916 [main] [30mTRACE[m  - ##########################################

13:48:23.916 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:23.916 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:23.916 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:23.916 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:23.916 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:23.916 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:23.916 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:23.916 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:23.916 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:23.916 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:23.916 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:23.916 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:23.916 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:24.118 [main] [30mTRACE[m  - ####################################################
13:48:24.118 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:24.118 [main] [30mTRACE[m  - ####################################################
13:48:24.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:24.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:24.119 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:24.119 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:24.119 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:24.119 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.119 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:24.119 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.119 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.119 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:24.119 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.120 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:24.120 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.120 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.120 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:24.120 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.120 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:24.121 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:24.121 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:24.121 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:24.121 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:24.121 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:24.121 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:24.122 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:24.122 [main] [30mTRACE[m  - ##################################################
13:48:24.122 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:24.122 [main] [30mTRACE[m  - ##################################################

13:48:24.122 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:24.937 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:24.937 [main] [30mTRACE[m  - ###############################
13:48:24.937 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:24.937 [main] [30mTRACE[m  - ###############################
13:48:25.141 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:25.141 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:25.141 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:25.141 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:25.141 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:25.343 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:25.343 [main] [30mTRACE[m  - #####################################
13:48:25.343 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:25.343 [main] [30mTRACE[m  - #####################################
13:48:25.343 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:25.343 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:26.397 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:26.397 [main] [32mINFO [m  - Instance "Pattern"
13:48:26.397 [main] [32mINFO [m  - Instance "Matcher"
13:48:26.397 [main] [32mINFO [m  - IF - Match
13:48:26.398 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:26.398 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:26.398 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:26.398 [main] [30mTRACE[m  - ###################################
13:48:26.398 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:26.398 [main] [30mTRACE[m  - ###################################

13:48:26.398 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:26.398 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:26.398 [main] [30mTRACE[m  - ##########################################
13:48:26.398 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:26.398 [main] [30mTRACE[m  - ##########################################
13:48:26.398 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:26.398 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:26.398 [main] [30mTRACE[m  - ########################################
13:48:26.399 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:26.399 [main] [30mTRACE[m  - ########################################

13:48:26.399 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:26.399 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:26.399 [main] [30mTRACE[m  - ##############################################
13:48:26.399 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:26.399 [main] [30mTRACE[m  - ##############################################
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:26.399 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:26.399 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:26.399 [main] [30mTRACE[m  - ##########################################
13:48:26.399 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:26.400 [main] [30mTRACE[m  - ##########################################

13:48:26.400 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:26.400 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:26.400 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:26.400 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:26.400 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:26.400 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:26.400 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:26.400 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:26.400 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:26.400 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:26.400 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:26.401 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:26.401 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:26.602 [main] [30mTRACE[m  - ####################################################
13:48:26.602 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:26.602 [main] [30mTRACE[m  - ####################################################
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:26.602 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:26.603 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:26.603 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:26.603 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:26.603 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:26.603 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:26.603 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.603 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.603 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.603 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.604 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.604 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:26.604 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.604 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.604 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:26.604 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.605 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.605 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:26.605 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.605 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.605 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:26.605 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:26.606 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:26.606 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:26.606 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:26.606 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:26.606 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:26.606 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:26.606 [main] [30mTRACE[m  - ##################################################
13:48:26.606 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:26.606 [main] [30mTRACE[m  - ##################################################

13:48:26.606 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:27.421 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:27.421 [main] [30mTRACE[m  - ###############################
13:48:27.421 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:27.421 [main] [30mTRACE[m  - ###############################
13:48:27.624 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:27.624 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:27.625 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:27.625 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:27.625 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:27.827 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:27.828 [main] [30mTRACE[m  - #####################################
13:48:27.828 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:27.828 [main] [30mTRACE[m  - #####################################
13:48:27.828 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:27.828 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:30.467 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:30.468 [main] [32mINFO [m  - Instance "Pattern"
13:48:30.468 [main] [32mINFO [m  - Instance "Matcher"
13:48:30.468 [main] [32mINFO [m  - IF - Match
13:48:30.468 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:30.468 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:30.468 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:30.468 [main] [30mTRACE[m  - ###################################
13:48:30.468 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:30.468 [main] [30mTRACE[m  - ###################################

13:48:30.468 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:30.468 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:30.468 [main] [30mTRACE[m  - ##########################################
13:48:30.468 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:30.468 [main] [30mTRACE[m  - ##########################################
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:30.469 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:30.469 [main] [30mTRACE[m  - ########################################
13:48:30.469 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:30.469 [main] [30mTRACE[m  - ########################################

13:48:30.469 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:30.469 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:30.469 [main] [30mTRACE[m  - ##############################################
13:48:30.469 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:30.469 [main] [30mTRACE[m  - ##############################################
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:30.469 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:30.470 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:30.470 [main] [30mTRACE[m  - ##########################################
13:48:30.470 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:30.470 [main] [30mTRACE[m  - ##########################################

13:48:30.470 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:30.470 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:30.470 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:30.470 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:30.470 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:30.471 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:30.471 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:30.472 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:30.472 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:30.472 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:30.472 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:30.473 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:30.473 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:30.678 [main] [30mTRACE[m  - ####################################################
13:48:30.678 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:30.678 [main] [30mTRACE[m  - ####################################################
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:30.678 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:30.679 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:30.679 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:30.679 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:30.679 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.679 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.679 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:30.679 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.679 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:30.680 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.680 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.680 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:30.680 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.680 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.680 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.681 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.681 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:30.681 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.681 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:30.681 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:30.681 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:30.682 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:30.682 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:30.682 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:30.682 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:30.682 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:30.682 [main] [30mTRACE[m  - ##################################################
13:48:30.682 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:30.682 [main] [30mTRACE[m  - ##################################################

13:48:30.682 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:31.499 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:31.499 [main] [30mTRACE[m  - ###############################
13:48:31.499 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:31.499 [main] [30mTRACE[m  - ###############################
13:48:31.700 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:31.700 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:31.700 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:31.700 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:31.700 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:31.902 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:31.902 [main] [30mTRACE[m  - #####################################
13:48:31.902 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:31.902 [main] [30mTRACE[m  - #####################################
13:48:31.903 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:31.903 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:43.046 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:43.046 [main] [32mINFO [m  - Instance "Pattern"
13:48:43.046 [main] [32mINFO [m  - Instance "Matcher"
13:48:43.046 [main] [32mINFO [m  - IF - Match
13:48:43.046 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:43.047 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:43.047 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:43.047 [main] [30mTRACE[m  - ###################################
13:48:43.047 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:43.047 [main] [30mTRACE[m  - ###################################

13:48:43.047 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:43.047 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:43.047 [main] [30mTRACE[m  - ##########################################
13:48:43.047 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:43.047 [main] [30mTRACE[m  - ##########################################
13:48:43.047 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:43.047 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:43.047 [main] [30mTRACE[m  - ########################################
13:48:43.047 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:43.047 [main] [30mTRACE[m  - ########################################

13:48:43.047 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:43.047 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:43.047 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:43.047 [main] [30mTRACE[m  - ##############################################
13:48:43.047 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:43.048 [main] [30mTRACE[m  - ##############################################
13:48:43.048 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:43.048 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:43.048 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:43.048 [main] [30mTRACE[m  - ##########################################
13:48:43.048 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:43.048 [main] [30mTRACE[m  - ##########################################

13:48:43.048 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:43.048 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:43.048 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:43.048 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:43.049 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:43.050 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:43.050 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:43.050 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:43.050 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:43.050 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:43.051 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:43.051 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:43.051 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:43.252 [main] [30mTRACE[m  - ####################################################
13:48:43.252 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:43.252 [main] [30mTRACE[m  - ####################################################
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:43.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:43.253 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:43.253 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:43.253 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:43.253 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:43.253 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.253 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:43.253 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:43.254 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.254 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.254 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:43.254 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.254 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.255 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:43.255 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.255 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.255 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:43.255 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.255 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.256 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:43.256 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.256 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.256 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:43.256 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:43.256 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:43.256 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:43.256 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:43.256 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:43.256 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:43.256 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:43.256 [main] [30mTRACE[m  - ##################################################
13:48:43.256 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:43.256 [main] [30mTRACE[m  - ##################################################

13:48:43.256 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:44.069 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:44.069 [main] [30mTRACE[m  - ###############################
13:48:44.069 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:44.069 [main] [30mTRACE[m  - ###############################
13:48:44.274 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:44.274 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:44.274 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:44.274 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:44.274 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:44.476 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:44.477 [main] [30mTRACE[m  - #####################################
13:48:44.477 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:44.477 [main] [30mTRACE[m  - #####################################
13:48:44.477 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:44.477 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:45.134 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:45.134 [main] [32mINFO [m  - Instance "Pattern"
13:48:45.134 [main] [32mINFO [m  - Instance "Matcher"
13:48:45.134 [main] [32mINFO [m  - IF - Match
13:48:45.134 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:45.134 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:45.134 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:45.134 [main] [30mTRACE[m  - ###################################
13:48:45.134 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:45.134 [main] [30mTRACE[m  - ###################################

13:48:45.134 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:45.134 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:45.134 [main] [30mTRACE[m  - ##########################################
13:48:45.134 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:45.135 [main] [30mTRACE[m  - ##########################################
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:45.135 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:45.135 [main] [30mTRACE[m  - ########################################
13:48:45.135 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:45.135 [main] [30mTRACE[m  - ########################################

13:48:45.135 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:45.135 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:45.135 [main] [30mTRACE[m  - ##############################################
13:48:45.135 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:45.135 [main] [30mTRACE[m  - ##############################################
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:45.135 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:45.135 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:45.136 [main] [30mTRACE[m  - ##########################################
13:48:45.136 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:45.136 [main] [30mTRACE[m  - ##########################################

13:48:45.136 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:45.136 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:45.136 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:45.136 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:45.137 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:45.137 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:45.138 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:45.138 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:45.138 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:45.138 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:45.138 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:45.138 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:45.138 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:45.342 [main] [30mTRACE[m  - ####################################################
13:48:45.342 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:45.342 [main] [30mTRACE[m  - ####################################################
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:45.342 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:45.342 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:45.343 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:45.343 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:45.343 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.343 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.343 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:45.343 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.343 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:45.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.344 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:45.344 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.344 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.344 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:45.344 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.344 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.345 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.345 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.345 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:45.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.345 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:45.345 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.346 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.346 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:45.346 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.346 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.346 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:45.346 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:45.346 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:45.346 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:45.346 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:45.346 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:45.346 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:45.346 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:45.346 [main] [30mTRACE[m  - ##################################################
13:48:45.346 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:45.346 [main] [30mTRACE[m  - ##################################################

13:48:45.346 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:46.160 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:46.160 [main] [30mTRACE[m  - ###############################
13:48:46.160 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:46.160 [main] [30mTRACE[m  - ###############################
13:48:46.363 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:46.363 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:46.363 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:46.364 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:46.364 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:46.569 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:46.569 [main] [30mTRACE[m  - #####################################
13:48:46.569 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:46.569 [main] [30mTRACE[m  - #####################################
13:48:46.569 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:46.569 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:48.241 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:48.242 [main] [32mINFO [m  - Instance "Pattern"
13:48:48.242 [main] [32mINFO [m  - Instance "Matcher"
13:48:48.242 [main] [32mINFO [m  - IF - Match
13:48:48.242 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:48.242 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:48.242 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:48.242 [main] [30mTRACE[m  - ###################################
13:48:48.242 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:48.242 [main] [30mTRACE[m  - ###################################

13:48:48.242 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:48.242 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:48.242 [main] [30mTRACE[m  - ##########################################
13:48:48.242 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:48.242 [main] [30mTRACE[m  - ##########################################
13:48:48.242 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:48.242 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:48.242 [main] [30mTRACE[m  - ########################################
13:48:48.242 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:48.242 [main] [30mTRACE[m  - ########################################

13:48:48.242 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:48.242 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:48.242 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:48.242 [main] [30mTRACE[m  - ##############################################
13:48:48.243 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:48.243 [main] [30mTRACE[m  - ##############################################
13:48:48.243 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:48.243 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:48.243 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:48.243 [main] [30mTRACE[m  - ##########################################
13:48:48.243 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:48.243 [main] [30mTRACE[m  - ##########################################

13:48:48.243 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:48.243 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:48.243 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:48.243 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:48.243 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:48.243 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:48.243 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:48.243 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:48.243 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:48.243 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:48.243 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:48.245 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:48.245 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:48.447 [main] [30mTRACE[m  - ####################################################
13:48:48.447 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:48.447 [main] [30mTRACE[m  - ####################################################
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:48.447 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:48.447 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:48.447 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:48.448 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:48.448 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:48.448 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.448 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.448 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:48.448 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.448 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.448 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:48.449 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:48.449 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:48.449 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:48.449 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:48.449 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:48.449 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:48.449 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:48.449 [main] [30mTRACE[m  - ##################################################
13:48:48.449 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:48.449 [main] [30mTRACE[m  - ##################################################

13:48:48.449 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:49.263 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:49.263 [main] [30mTRACE[m  - ###############################
13:48:49.263 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:49.264 [main] [30mTRACE[m  - ###############################
13:48:49.469 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:49.469 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:49.469 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:49.469 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:49.469 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:49.673 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:49.673 [main] [30mTRACE[m  - #####################################
13:48:49.673 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:49.673 [main] [30mTRACE[m  - #####################################
13:48:49.673 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:49.673 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:50.819 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:50.819 [main] [32mINFO [m  - Instance "Pattern"
13:48:50.819 [main] [32mINFO [m  - Instance "Matcher"
13:48:50.820 [main] [32mINFO [m  - IF - Match
13:48:50.820 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:50.820 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:50.820 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:50.820 [main] [30mTRACE[m  - ###################################
13:48:50.820 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:50.820 [main] [30mTRACE[m  - ###################################

13:48:50.820 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:50.820 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:50.820 [main] [30mTRACE[m  - ##########################################
13:48:50.820 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:50.820 [main] [30mTRACE[m  - ##########################################
13:48:50.820 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:50.820 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:50.820 [main] [30mTRACE[m  - ########################################
13:48:50.820 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:50.820 [main] [30mTRACE[m  - ########################################

13:48:50.820 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:50.820 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:50.820 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:50.821 [main] [30mTRACE[m  - ##############################################
13:48:50.821 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:50.821 [main] [30mTRACE[m  - ##############################################
13:48:50.821 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:50.821 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:50.821 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:50.821 [main] [30mTRACE[m  - ##########################################
13:48:50.821 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:50.821 [main] [30mTRACE[m  - ##########################################

13:48:50.821 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:50.821 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:50.821 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:50.821 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:50.821 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:50.821 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:50.821 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:50.821 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:50.821 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:50.821 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:50.822 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:50.822 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:50.822 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:51.023 [main] [30mTRACE[m  - ####################################################
13:48:51.023 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:51.023 [main] [30mTRACE[m  - ####################################################
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:51.024 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:51.024 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:51.024 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:51.024 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:51.025 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:51.025 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.025 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:51.025 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.026 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:51.026 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.026 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.026 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:51.026 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.026 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:51.027 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.027 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:51.027 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:51.027 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:51.027 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:51.027 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:51.027 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:51.027 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:51.027 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:51.027 [main] [30mTRACE[m  - ##################################################
13:48:51.027 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:51.027 [main] [30mTRACE[m  - ##################################################

13:48:51.027 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:51.839 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:51.839 [main] [30mTRACE[m  - ###############################
13:48:51.839 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:51.839 [main] [30mTRACE[m  - ###############################
13:48:52.041 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:52.041 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:52.041 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:52.041 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:52.041 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:52.244 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:52.244 [main] [30mTRACE[m  - #####################################
13:48:52.244 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:52.244 [main] [30mTRACE[m  - #####################################
13:48:52.244 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:52.244 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:53.300 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:53.302 [main] [32mINFO [m  - Instance "Pattern"
13:48:53.303 [main] [32mINFO [m  - Instance "Matcher"
13:48:53.303 [main] [32mINFO [m  - IF - Match
13:48:53.304 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:53.304 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:53.304 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:53.304 [main] [30mTRACE[m  - ###################################
13:48:53.304 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:53.304 [main] [30mTRACE[m  - ###################################

13:48:53.304 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:53.304 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:53.304 [main] [30mTRACE[m  - ##########################################
13:48:53.304 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:53.304 [main] [30mTRACE[m  - ##########################################
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:53.304 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:53.304 [main] [30mTRACE[m  - ########################################
13:48:53.304 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:53.304 [main] [30mTRACE[m  - ########################################

13:48:53.304 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:53.304 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:53.304 [main] [30mTRACE[m  - ##############################################
13:48:53.304 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:53.304 [main] [30mTRACE[m  - ##############################################
13:48:53.304 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:53.305 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:53.305 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:53.305 [main] [30mTRACE[m  - ##########################################
13:48:53.305 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:53.305 [main] [30mTRACE[m  - ##########################################

13:48:53.305 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:53.305 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:53.305 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:53.305 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:53.305 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:53.305 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:53.305 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:53.305 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:53.305 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:53.305 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:53.305 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:53.306 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:53.307 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:53.509 [main] [30mTRACE[m  - ####################################################
13:48:53.509 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:53.509 [main] [30mTRACE[m  - ####################################################
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:53.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:53.510 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:53.510 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:53.510 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:53.510 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:53.510 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.510 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.510 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:53.510 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.510 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.511 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:53.511 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:53.511 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:53.512 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:53.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:53.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:53.512 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:53.512 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:53.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:53.512 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:53.513 [main] [30mTRACE[m  - ##################################################
13:48:53.513 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:53.513 [main] [30mTRACE[m  - ##################################################

13:48:53.513 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:54.328 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:54.328 [main] [30mTRACE[m  - ###############################
13:48:54.328 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:54.328 [main] [30mTRACE[m  - ###############################
13:48:54.531 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:54.531 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:54.531 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:54.531 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:54.531 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:54.735 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:54.735 [main] [30mTRACE[m  - #####################################
13:48:54.735 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:54.735 [main] [30mTRACE[m  - #####################################
13:48:54.735 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:54.735 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:55.753 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:55.753 [main] [32mINFO [m  - Instance "Pattern"
13:48:55.753 [main] [32mINFO [m  - Instance "Matcher"
13:48:55.753 [main] [32mINFO [m  - IF - Match
13:48:55.753 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:55.753 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:55.753 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:55.753 [main] [30mTRACE[m  - ###################################
13:48:55.753 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:55.753 [main] [30mTRACE[m  - ###################################

13:48:55.754 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:55.754 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:55.754 [main] [30mTRACE[m  - ##########################################
13:48:55.754 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:55.754 [main] [30mTRACE[m  - ##########################################
13:48:55.754 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:55.754 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:55.754 [main] [30mTRACE[m  - ########################################
13:48:55.754 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:55.754 [main] [30mTRACE[m  - ########################################

13:48:55.754 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:55.754 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:55.754 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:55.754 [main] [30mTRACE[m  - ##############################################
13:48:55.755 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:55.755 [main] [30mTRACE[m  - ##############################################
13:48:55.755 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:55.755 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:55.755 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:55.755 [main] [30mTRACE[m  - ##########################################
13:48:55.755 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:55.755 [main] [30mTRACE[m  - ##########################################

13:48:55.755 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:55.755 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:55.755 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:55.755 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:55.755 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:55.757 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:55.758 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:55.758 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:55.758 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:55.758 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:55.758 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:55.758 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:55.758 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:55.959 [main] [30mTRACE[m  - ####################################################
13:48:55.959 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:55.959 [main] [30mTRACE[m  - ####################################################
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:55.959 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:55.959 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:55.960 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:55.960 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:55.960 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.960 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:55.960 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.960 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.960 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:55.960 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.960 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.960 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.961 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:55.961 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.961 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.961 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:55.961 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.961 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:55.962 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:55.962 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:55.962 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:55.962 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:55.962 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:55.962 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:55.962 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:55.962 [main] [30mTRACE[m  - ##################################################
13:48:55.962 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:55.963 [main] [30mTRACE[m  - ##################################################

13:48:55.963 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:56.772 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:56.772 [main] [30mTRACE[m  - ###############################
13:48:56.772 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:56.772 [main] [30mTRACE[m  - ###############################
13:48:56.975 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:56.975 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:56.975 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:56.975 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:56.976 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:57.181 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:57.181 [main] [30mTRACE[m  - #####################################
13:48:57.181 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:57.181 [main] [30mTRACE[m  - #####################################
13:48:57.181 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:57.181 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:48:58.451 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:48:58.452 [main] [32mINFO [m  - Instance "Pattern"
13:48:58.452 [main] [32mINFO [m  - Instance "Matcher"
13:48:58.452 [main] [32mINFO [m  - IF - Match
13:48:58.452 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:48:58.452 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:48:58.452 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:48:58.452 [main] [30mTRACE[m  - ###################################
13:48:58.452 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:48:58.452 [main] [30mTRACE[m  - ###################################

13:48:58.452 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:48:58.452 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:48:58.452 [main] [30mTRACE[m  - ##########################################
13:48:58.452 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:48:58.452 [main] [30mTRACE[m  - ##########################################
13:48:58.452 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:48:58.453 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:48:58.453 [main] [30mTRACE[m  - ########################################
13:48:58.453 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:48:58.453 [main] [30mTRACE[m  - ########################################

13:48:58.453 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:48:58.453 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:48:58.453 [main] [30mTRACE[m  - ##############################################
13:48:58.453 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:48:58.453 [main] [30mTRACE[m  - ##############################################
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:48:58.453 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:48:58.453 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:48:58.453 [main] [30mTRACE[m  - ##########################################
13:48:58.453 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:48:58.453 [main] [30mTRACE[m  - ##########################################

13:48:58.453 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:48:58.453 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:48:58.454 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:48:58.454 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:48:58.454 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:48:58.455 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:48:58.455 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:48:58.455 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:48:58.455 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:48:58.456 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:48:58.456 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:48:58.456 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:48:58.456 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:48:58.661 [main] [30mTRACE[m  - ####################################################
13:48:58.661 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:48:58.661 [main] [30mTRACE[m  - ####################################################
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:48:58.661 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:48:58.661 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:48:58.661 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:48:58.661 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:48:58.661 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:48:58.662 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.662 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.662 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:48:58.662 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.662 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.662 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:48:58.662 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.662 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:48:58.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:48:58.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:48:58.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:48:58.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:48:58.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:48:58.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:48:58.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:48:58.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:48:58.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:48:58.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:48:58.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:48:58.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:48:58.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:48:58.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:48:58.666 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:48:58.666 [main] [30mTRACE[m  - ##################################################
13:48:58.666 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:48:58.666 [main] [30mTRACE[m  - ##################################################

13:48:58.666 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:48:59.477 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:48:59.477 [main] [30mTRACE[m  - ###############################
13:48:59.477 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:48:59.477 [main] [30mTRACE[m  - ###############################
13:48:59.682 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:48:59.682 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:48:59.682 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:48:59.682 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:48:59.682 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:48:59.883 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:48:59.884 [main] [30mTRACE[m  - #####################################
13:48:59.884 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:48:59.884 [main] [30mTRACE[m  - #####################################
13:48:59.884 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:48:59.884 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:01.065 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:01.065 [main] [32mINFO [m  - Instance "Pattern"
13:49:01.065 [main] [32mINFO [m  - Instance "Matcher"
13:49:01.065 [main] [32mINFO [m  - IF - Match
13:49:01.066 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:01.066 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:01.066 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:01.066 [main] [30mTRACE[m  - ###################################
13:49:01.066 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:01.066 [main] [30mTRACE[m  - ###################################

13:49:01.066 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:01.066 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:01.066 [main] [30mTRACE[m  - ##########################################
13:49:01.066 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:01.066 [main] [30mTRACE[m  - ##########################################
13:49:01.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:01.066 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:01.066 [main] [30mTRACE[m  - ########################################
13:49:01.066 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:01.066 [main] [30mTRACE[m  - ########################################

13:49:01.066 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:01.067 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:01.067 [main] [30mTRACE[m  - ##############################################
13:49:01.067 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:01.067 [main] [30mTRACE[m  - ##############################################
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:01.067 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:01.067 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:01.067 [main] [30mTRACE[m  - ##########################################
13:49:01.067 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:01.067 [main] [30mTRACE[m  - ##########################################

13:49:01.068 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:01.068 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:01.068 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:01.068 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:01.068 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:01.069 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:01.069 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:01.069 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:01.069 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:01.069 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:01.070 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:01.070 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:01.070 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:01.274 [main] [30mTRACE[m  - ####################################################
13:49:01.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:01.274 [main] [30mTRACE[m  - ####################################################
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:01.274 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:01.274 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:01.274 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:01.274 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:01.274 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.275 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.275 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.275 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:01.275 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.275 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.275 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:01.275 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.276 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:01.276 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.276 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.276 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:01.276 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.276 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:01.277 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.277 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.277 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:01.277 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.277 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:01.277 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:01.277 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:01.277 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:01.277 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:01.277 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:01.277 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:01.277 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:01.277 [main] [30mTRACE[m  - ##################################################
13:49:01.277 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:01.277 [main] [30mTRACE[m  - ##################################################

13:49:01.277 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:02.089 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:02.089 [main] [30mTRACE[m  - ###############################
13:49:02.089 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:02.089 [main] [30mTRACE[m  - ###############################
13:49:02.293 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:02.294 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:02.294 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:02.294 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:02.294 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:02.499 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:02.499 [main] [30mTRACE[m  - #####################################
13:49:02.499 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:02.499 [main] [30mTRACE[m  - #####################################
13:49:02.499 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:02.499 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:03.665 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:03.665 [main] [32mINFO [m  - Instance "Pattern"
13:49:03.665 [main] [32mINFO [m  - Instance "Matcher"
13:49:03.665 [main] [32mINFO [m  - IF - Match
13:49:03.665 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:03.665 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:03.665 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:03.665 [main] [30mTRACE[m  - ###################################
13:49:03.665 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:03.666 [main] [30mTRACE[m  - ###################################

13:49:03.666 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:03.666 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:03.666 [main] [30mTRACE[m  - ##########################################
13:49:03.666 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:03.666 [main] [30mTRACE[m  - ##########################################
13:49:03.666 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:03.666 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:03.666 [main] [30mTRACE[m  - ########################################
13:49:03.666 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:03.666 [main] [30mTRACE[m  - ########################################

13:49:03.667 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:03.667 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:03.667 [main] [30mTRACE[m  - ##############################################
13:49:03.667 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:03.667 [main] [30mTRACE[m  - ##############################################
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:03.667 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:03.667 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:03.667 [main] [30mTRACE[m  - ##########################################
13:49:03.667 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:03.667 [main] [30mTRACE[m  - ##########################################

13:49:03.667 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:03.667 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:03.667 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:03.667 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:03.667 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:03.668 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:03.668 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:03.668 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:03.668 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:03.669 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:03.669 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:03.670 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:03.670 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:03.872 [main] [30mTRACE[m  - ####################################################
13:49:03.872 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:03.872 [main] [30mTRACE[m  - ####################################################
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:03.872 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:03.872 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:03.872 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:03.872 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:03.873 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:03.873 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.873 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.873 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:03.873 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:03.874 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:03.874 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.874 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:03.875 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:03.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:03.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:03.875 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:03.875 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:03.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:03.876 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:03.876 [main] [30mTRACE[m  - ##################################################
13:49:03.876 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:03.876 [main] [30mTRACE[m  - ##################################################

13:49:03.876 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:04.690 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:04.690 [main] [30mTRACE[m  - ###############################
13:49:04.690 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:04.690 [main] [30mTRACE[m  - ###############################
13:49:04.893 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:04.894 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:04.894 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:04.894 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:04.894 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:05.098 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:05.098 [main] [30mTRACE[m  - #####################################
13:49:05.098 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:05.098 [main] [30mTRACE[m  - #####################################
13:49:05.098 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:05.098 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:05.837 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:05.838 [main] [32mINFO [m  - Instance "Pattern"
13:49:05.838 [main] [32mINFO [m  - Instance "Matcher"
13:49:05.838 [main] [32mINFO [m  - IF - Match
13:49:05.838 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:05.838 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:05.838 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:05.838 [main] [30mTRACE[m  - ###################################
13:49:05.838 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:05.838 [main] [30mTRACE[m  - ###################################

13:49:05.838 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:05.838 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:05.838 [main] [30mTRACE[m  - ##########################################
13:49:05.838 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:05.839 [main] [30mTRACE[m  - ##########################################
13:49:05.839 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:05.839 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:05.839 [main] [30mTRACE[m  - ########################################
13:49:05.839 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:05.839 [main] [30mTRACE[m  - ########################################

13:49:05.839 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:05.839 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:05.839 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:05.840 [main] [30mTRACE[m  - ##############################################
13:49:05.840 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:05.840 [main] [30mTRACE[m  - ##############################################
13:49:05.840 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:05.840 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:05.840 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:05.840 [main] [30mTRACE[m  - ##########################################
13:49:05.840 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:05.840 [main] [30mTRACE[m  - ##########################################

13:49:05.840 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:05.840 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:05.841 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:05.842 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:05.842 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:05.842 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:05.842 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:05.842 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:05.842 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:05.842 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:05.843 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:05.843 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:05.843 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:06.044 [main] [30mTRACE[m  - ####################################################
13:49:06.044 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:06.044 [main] [30mTRACE[m  - ####################################################
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:06.044 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:06.044 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:06.044 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:06.044 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:06.044 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:06.045 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.045 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:06.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.045 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.045 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:06.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:06.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:06.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:06.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:06.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:06.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:06.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:06.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:06.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:06.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:06.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:06.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:06.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:06.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:06.048 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:06.048 [main] [30mTRACE[m  - ##################################################
13:49:06.048 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:06.048 [main] [30mTRACE[m  - ##################################################

13:49:06.048 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:06.862 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:06.862 [main] [30mTRACE[m  - ###############################
13:49:06.862 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:06.863 [main] [30mTRACE[m  - ###############################
13:49:07.066 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:07.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:07.066 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:07.066 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:07.066 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:07.268 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:07.268 [main] [30mTRACE[m  - #####################################
13:49:07.268 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:07.268 [main] [30mTRACE[m  - #####################################
13:49:07.268 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:07.268 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:08.182 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:08.183 [main] [32mINFO [m  - Instance "Pattern"
13:49:08.183 [main] [32mINFO [m  - Instance "Matcher"
13:49:08.183 [main] [32mINFO [m  - IF - Match
13:49:08.183 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:08.183 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:08.183 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:08.183 [main] [30mTRACE[m  - ###################################
13:49:08.184 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:08.184 [main] [30mTRACE[m  - ###################################

13:49:08.184 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:08.184 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:08.184 [main] [30mTRACE[m  - ##########################################
13:49:08.184 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:08.184 [main] [30mTRACE[m  - ##########################################
13:49:08.184 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:08.184 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:08.184 [main] [30mTRACE[m  - ########################################
13:49:08.184 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:08.184 [main] [30mTRACE[m  - ########################################

13:49:08.184 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:08.184 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:08.185 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:08.185 [main] [30mTRACE[m  - ##############################################
13:49:08.185 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:08.185 [main] [30mTRACE[m  - ##############################################
13:49:08.185 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:08.185 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:08.185 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:08.185 [main] [30mTRACE[m  - ##########################################
13:49:08.185 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:08.185 [main] [30mTRACE[m  - ##########################################

13:49:08.185 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:08.185 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:08.185 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:08.185 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:08.185 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:08.185 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:08.185 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:08.186 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:08.186 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:08.186 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:08.186 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:08.186 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:08.187 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:08.388 [main] [30mTRACE[m  - ####################################################
13:49:08.388 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:08.388 [main] [30mTRACE[m  - ####################################################
13:49:08.388 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:08.388 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:08.389 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:08.389 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:08.389 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:08.389 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.389 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.389 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:08.389 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.390 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:08.390 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.390 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.390 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:08.390 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.390 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.391 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.391 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:08.391 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.391 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.391 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:08.391 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:08.392 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:08.392 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:08.392 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:08.392 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:08.392 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:08.392 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:08.392 [main] [30mTRACE[m  - ##################################################
13:49:08.392 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:08.392 [main] [30mTRACE[m  - ##################################################

13:49:08.392 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:09.207 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:09.207 [main] [30mTRACE[m  - ###############################
13:49:09.207 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:09.207 [main] [30mTRACE[m  - ###############################
13:49:09.410 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:09.411 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:09.411 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:09.411 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:09.411 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:09.616 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:09.616 [main] [30mTRACE[m  - #####################################
13:49:09.616 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:09.616 [main] [30mTRACE[m  - #####################################
13:49:09.616 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:09.616 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:10.535 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:10.536 [main] [32mINFO [m  - Instance "Pattern"
13:49:10.536 [main] [32mINFO [m  - Instance "Matcher"
13:49:10.536 [main] [32mINFO [m  - IF - Match
13:49:10.536 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:10.536 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:10.536 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:10.536 [main] [30mTRACE[m  - ###################################
13:49:10.536 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:10.536 [main] [30mTRACE[m  - ###################################

13:49:10.536 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:10.537 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:10.537 [main] [30mTRACE[m  - ##########################################
13:49:10.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:10.537 [main] [30mTRACE[m  - ##########################################
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:10.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:10.537 [main] [30mTRACE[m  - ########################################
13:49:10.537 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:10.537 [main] [30mTRACE[m  - ########################################

13:49:10.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:10.537 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:10.537 [main] [30mTRACE[m  - ##############################################
13:49:10.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:10.537 [main] [30mTRACE[m  - ##############################################
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:10.537 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:10.537 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:10.538 [main] [30mTRACE[m  - ##########################################
13:49:10.538 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:10.538 [main] [30mTRACE[m  - ##########################################

13:49:10.538 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:10.538 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:10.538 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:10.538 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:10.538 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:10.538 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:10.538 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:10.538 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:10.538 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:10.538 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:10.538 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:10.539 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:10.539 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:10.745 [main] [30mTRACE[m  - ####################################################
13:49:10.745 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:10.745 [main] [30mTRACE[m  - ####################################################
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:10.746 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:10.746 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:10.746 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:10.746 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:10.746 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.746 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:10.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:10.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:10.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:10.748 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:10.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:10.748 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:10.748 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:10.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:10.749 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:10.749 [main] [30mTRACE[m  - ##################################################
13:49:10.749 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:10.749 [main] [30mTRACE[m  - ##################################################

13:49:10.749 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:11.565 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:11.565 [main] [30mTRACE[m  - ###############################
13:49:11.565 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:11.565 [main] [30mTRACE[m  - ###############################
13:49:11.767 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:11.767 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:11.767 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:11.767 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:11.767 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:11.970 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:11.970 [main] [30mTRACE[m  - #####################################
13:49:11.970 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:11.970 [main] [30mTRACE[m  - #####################################
13:49:11.970 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:11.970 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:12.840 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:12.840 [main] [32mINFO [m  - Instance "Pattern"
13:49:12.840 [main] [32mINFO [m  - Instance "Matcher"
13:49:12.840 [main] [32mINFO [m  - IF - Match
13:49:12.841 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:12.841 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:12.841 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:12.841 [main] [30mTRACE[m  - ###################################
13:49:12.841 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:12.841 [main] [30mTRACE[m  - ###################################

13:49:12.841 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:12.841 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:12.841 [main] [30mTRACE[m  - ##########################################
13:49:12.841 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:12.841 [main] [30mTRACE[m  - ##########################################
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:12.841 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:12.841 [main] [30mTRACE[m  - ########################################
13:49:12.841 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:12.841 [main] [30mTRACE[m  - ########################################

13:49:12.841 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:12.841 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:12.841 [main] [30mTRACE[m  - ##############################################
13:49:12.841 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:12.841 [main] [30mTRACE[m  - ##############################################
13:49:12.841 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:12.842 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:12.842 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:12.842 [main] [30mTRACE[m  - ##########################################
13:49:12.842 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:12.842 [main] [30mTRACE[m  - ##########################################

13:49:12.842 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:12.842 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:12.842 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:12.842 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:12.842 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:12.842 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:12.842 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:12.842 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:12.842 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:12.843 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:12.843 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:12.843 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:12.843 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:13.044 [main] [30mTRACE[m  - ####################################################
13:49:13.044 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:13.044 [main] [30mTRACE[m  - ####################################################
13:49:13.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:13.045 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:13.045 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:13.045 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:13.045 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:13.045 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.045 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:13.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:13.046 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:13.046 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.046 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:13.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:13.047 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.047 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:13.047 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:13.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:13.048 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:13.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:13.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:13.048 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:13.048 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:13.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:13.048 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:13.048 [main] [30mTRACE[m  - ##################################################
13:49:13.048 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:13.048 [main] [30mTRACE[m  - ##################################################

13:49:13.049 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:13.862 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:13.862 [main] [30mTRACE[m  - ###############################
13:49:13.862 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:13.862 [main] [30mTRACE[m  - ###############################
13:49:14.066 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:14.066 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:14.066 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:14.066 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:14.066 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:14.271 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:14.271 [main] [30mTRACE[m  - #####################################
13:49:14.271 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:14.271 [main] [30mTRACE[m  - #####################################
13:49:14.272 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:14.272 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:14.989 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:14.989 [main] [32mINFO [m  - Instance "Pattern"
13:49:14.989 [main] [32mINFO [m  - Instance "Matcher"
13:49:14.989 [main] [32mINFO [m  - IF - Match
13:49:14.989 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:14.989 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:14.989 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:14.989 [main] [30mTRACE[m  - ###################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:14.990 [main] [30mTRACE[m  - ###################################

13:49:14.990 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:14.990 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:14.990 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:14.990 [main] [30mTRACE[m  - ########################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:14.990 [main] [30mTRACE[m  - ########################################

13:49:14.990 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:14.990 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:14.990 [main] [30mTRACE[m  - ##############################################
13:49:14.990 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:14.990 [main] [30mTRACE[m  - ##############################################
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:14.990 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:14.990 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:14.990 [main] [30mTRACE[m  - ##########################################
13:49:14.990 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:14.990 [main] [30mTRACE[m  - ##########################################

13:49:14.991 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:14.991 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:14.991 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:14.991 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:14.991 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:14.991 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:14.991 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:14.991 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:14.991 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:14.991 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:14.991 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:14.991 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:14.991 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:15.192 [main] [30mTRACE[m  - ####################################################
13:49:15.193 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:15.193 [main] [30mTRACE[m  - ####################################################
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:15.193 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:15.193 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:15.193 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:15.193 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:15.194 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.194 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.194 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:15.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:15.195 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.195 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.195 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:15.195 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.195 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.195 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:15.195 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.195 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.195 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:15.195 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.196 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.196 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:15.196 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.196 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.196 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:15.196 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.196 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.196 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:15.196 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:15.197 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.197 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.197 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:15.197 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:15.197 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:15.197 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:15.197 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:15.197 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:15.197 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:15.197 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:15.197 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:15.198 [main] [30mTRACE[m  - ##################################################
13:49:15.198 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:15.198 [main] [30mTRACE[m  - ##################################################

13:49:15.198 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:16.010 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:16.010 [main] [30mTRACE[m  - ###############################
13:49:16.010 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:16.010 [main] [30mTRACE[m  - ###############################
13:49:16.213 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:16.214 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:16.214 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:16.214 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:16.214 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:16.417 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:16.417 [main] [30mTRACE[m  - #####################################
13:49:16.417 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:16.417 [main] [30mTRACE[m  - #####################################
13:49:16.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:16.417 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:17.159 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:17.160 [main] [32mINFO [m  - Instance "Pattern"
13:49:17.160 [main] [32mINFO [m  - Instance "Matcher"
13:49:17.160 [main] [32mINFO [m  - IF - Match
13:49:17.160 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:17.160 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:17.160 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:17.160 [main] [30mTRACE[m  - ###################################
13:49:17.160 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:17.160 [main] [30mTRACE[m  - ###################################

13:49:17.160 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:17.160 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:17.160 [main] [30mTRACE[m  - ##########################################
13:49:17.160 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:17.160 [main] [30mTRACE[m  - ##########################################
13:49:17.160 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:17.161 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:17.161 [main] [30mTRACE[m  - ########################################
13:49:17.161 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:17.161 [main] [30mTRACE[m  - ########################################

13:49:17.161 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:17.161 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:17.161 [main] [30mTRACE[m  - ##############################################
13:49:17.161 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:17.161 [main] [30mTRACE[m  - ##############################################
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:17.161 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:17.161 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:17.161 [main] [30mTRACE[m  - ##########################################
13:49:17.161 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:17.161 [main] [30mTRACE[m  - ##########################################

13:49:17.161 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:17.161 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:17.161 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:17.162 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:17.162 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:17.162 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:17.162 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:17.162 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:17.162 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:17.162 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:17.162 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:17.163 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:17.163 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:17.368 [main] [30mTRACE[m  - ####################################################
13:49:17.368 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:17.369 [main] [30mTRACE[m  - ####################################################
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:17.369 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:17.369 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:17.369 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:17.369 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:17.369 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.369 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:17.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.370 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:17.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:17.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:17.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.372 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.372 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:17.372 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.372 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.372 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:17.372 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:17.372 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:17.372 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:17.372 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:17.372 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:17.372 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:17.372 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:17.372 [main] [30mTRACE[m  - ##################################################
13:49:17.372 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:17.372 [main] [30mTRACE[m  - ##################################################

13:49:17.372 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:18.187 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:18.187 [main] [30mTRACE[m  - ###############################
13:49:18.187 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:18.187 [main] [30mTRACE[m  - ###############################
13:49:18.390 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:18.390 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:18.390 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:18.390 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:18.390 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:18.594 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:18.594 [main] [30mTRACE[m  - #####################################
13:49:18.594 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:18.594 [main] [30mTRACE[m  - #####################################
13:49:18.594 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:18.594 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:19.459 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:19.459 [main] [32mINFO [m  - Instance "Pattern"
13:49:19.459 [main] [32mINFO [m  - Instance "Matcher"
13:49:19.459 [main] [32mINFO [m  - IF - Match
13:49:19.459 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:19.459 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:19.459 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:19.459 [main] [30mTRACE[m  - ###################################
13:49:19.459 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:19.459 [main] [30mTRACE[m  - ###################################

13:49:19.459 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:19.459 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:19.459 [main] [30mTRACE[m  - ##########################################
13:49:19.459 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:19.459 [main] [30mTRACE[m  - ##########################################
13:49:19.459 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:19.459 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:19.459 [main] [30mTRACE[m  - ########################################
13:49:19.459 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:19.459 [main] [30mTRACE[m  - ########################################

13:49:19.459 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:19.459 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:19.459 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:19.459 [main] [30mTRACE[m  - ##############################################
13:49:19.459 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:19.460 [main] [30mTRACE[m  - ##############################################
13:49:19.460 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:19.460 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:19.460 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:19.460 [main] [30mTRACE[m  - ##########################################
13:49:19.460 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:19.460 [main] [30mTRACE[m  - ##########################################

13:49:19.460 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:19.460 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:19.460 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:19.460 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:19.460 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:19.460 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:19.460 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:19.460 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:19.460 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:19.460 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:19.460 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:19.460 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:19.460 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:19.662 [main] [30mTRACE[m  - ####################################################
13:49:19.662 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:19.662 [main] [30mTRACE[m  - ####################################################
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:19.662 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:19.662 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:19.662 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:19.663 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.663 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.663 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:19.663 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.663 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.663 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:19.664 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.664 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.664 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:19.664 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.664 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.664 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:19.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.665 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:19.665 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.665 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.665 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:19.665 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.665 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.666 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:19.666 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.666 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:19.666 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:19.666 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:19.666 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:19.666 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:19.666 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:19.666 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:19.666 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:19.666 [main] [30mTRACE[m  - ##################################################
13:49:19.666 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:19.666 [main] [30mTRACE[m  - ##################################################

13:49:19.666 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:20.480 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:20.480 [main] [30mTRACE[m  - ###############################
13:49:20.480 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:20.480 [main] [30mTRACE[m  - ###############################
13:49:20.683 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:20.684 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:20.684 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:20.684 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:20.684 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:20.886 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:20.887 [main] [30mTRACE[m  - #####################################
13:49:20.887 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:20.887 [main] [30mTRACE[m  - #####################################
13:49:20.887 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:20.887 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:21.774 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:21.774 [main] [32mINFO [m  - Instance "Pattern"
13:49:21.774 [main] [32mINFO [m  - Instance "Matcher"
13:49:21.774 [main] [32mINFO [m  - IF - Match
13:49:21.774 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:21.774 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:21.774 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:21.775 [main] [30mTRACE[m  - ###################################
13:49:21.775 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:21.775 [main] [30mTRACE[m  - ###################################

13:49:21.775 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:21.775 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:21.775 [main] [30mTRACE[m  - ##########################################
13:49:21.775 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:21.775 [main] [30mTRACE[m  - ##########################################
13:49:21.775 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:21.775 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:21.775 [main] [30mTRACE[m  - ########################################
13:49:21.775 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:21.776 [main] [30mTRACE[m  - ########################################

13:49:21.776 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:21.776 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:21.776 [main] [30mTRACE[m  - ##############################################
13:49:21.776 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:21.776 [main] [30mTRACE[m  - ##############################################
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:21.776 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:21.776 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:21.776 [main] [30mTRACE[m  - ##########################################
13:49:21.776 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:21.776 [main] [30mTRACE[m  - ##########################################

13:49:21.776 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:21.777 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:21.777 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:21.777 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:21.777 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:21.777 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:21.777 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:21.777 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:21.777 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:21.777 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:21.777 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:21.777 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:21.777 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:21.979 [main] [30mTRACE[m  - ####################################################
13:49:21.979 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:21.979 [main] [30mTRACE[m  - ####################################################
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:21.979 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:21.979 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:21.979 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:21.979 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:21.979 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:21.980 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.980 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.980 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:21.980 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.980 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.980 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:21.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:21.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:21.981 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:21.982 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:21.982 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.982 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:21.982 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:21.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:21.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:21.982 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:21.982 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:21.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:21.982 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:21.982 [main] [30mTRACE[m  - ##################################################
13:49:21.982 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:21.982 [main] [30mTRACE[m  - ##################################################

13:49:21.982 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:22.792 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:22.793 [main] [30mTRACE[m  - ###############################
13:49:22.793 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:22.793 [main] [30mTRACE[m  - ###############################
13:49:22.994 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:23.013 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:23.013 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:23.013 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:23.013 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:23.218 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:23.219 [main] [30mTRACE[m  - #####################################
13:49:23.219 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:23.219 [main] [30mTRACE[m  - #####################################
13:49:23.219 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:23.219 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:23.761 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:23.761 [main] [32mINFO [m  - Instance "Pattern"
13:49:23.761 [main] [32mINFO [m  - Instance "Matcher"
13:49:23.761 [main] [32mINFO [m  - IF - Match
13:49:23.761 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:23.761 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:23.761 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:23.761 [main] [30mTRACE[m  - ###################################
13:49:23.761 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:23.761 [main] [30mTRACE[m  - ###################################

13:49:23.761 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:23.762 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:23.762 [main] [30mTRACE[m  - ##########################################
13:49:23.762 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:23.762 [main] [30mTRACE[m  - ##########################################
13:49:23.762 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:23.762 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:23.762 [main] [30mTRACE[m  - ########################################
13:49:23.762 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:23.762 [main] [30mTRACE[m  - ########################################

13:49:23.762 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:23.762 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:23.762 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:23.762 [main] [30mTRACE[m  - ##############################################
13:49:23.763 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:23.763 [main] [30mTRACE[m  - ##############################################
13:49:23.763 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:23.763 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:23.763 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:23.763 [main] [30mTRACE[m  - ##########################################
13:49:23.763 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:23.763 [main] [30mTRACE[m  - ##########################################

13:49:23.763 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:23.763 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:23.763 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:23.763 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:23.765 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:23.765 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:23.765 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:23.765 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:23.765 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:23.765 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:23.765 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:23.766 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:23.766 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:23.967 [main] [30mTRACE[m  - ####################################################
13:49:23.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:23.967 [main] [30mTRACE[m  - ####################################################
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:23.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:23.968 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:23.968 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:23.968 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:23.968 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.968 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:23.968 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.968 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.968 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:23.968 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.968 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:23.969 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.969 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:23.969 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:23.970 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:23.970 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:23.970 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:23.970 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:23.970 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:23.970 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:23.971 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:23.971 [main] [30mTRACE[m  - ##################################################
13:49:23.971 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:23.971 [main] [30mTRACE[m  - ##################################################

13:49:23.971 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:24.782 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:24.782 [main] [30mTRACE[m  - ###############################
13:49:24.782 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:24.782 [main] [30mTRACE[m  - ###############################
13:49:24.985 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:24.985 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:24.985 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:24.985 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:24.985 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:25.189 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:25.189 [main] [30mTRACE[m  - #####################################
13:49:25.189 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:25.189 [main] [30mTRACE[m  - #####################################
13:49:25.189 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:25.190 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:25.746 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:25.747 [main] [32mINFO [m  - Instance "Pattern"
13:49:25.747 [main] [32mINFO [m  - Instance "Matcher"
13:49:25.747 [main] [32mINFO [m  - IF - Match
13:49:25.747 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:25.747 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:25.747 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:25.747 [main] [30mTRACE[m  - ###################################
13:49:25.747 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:25.747 [main] [30mTRACE[m  - ###################################

13:49:25.747 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:25.747 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:25.747 [main] [30mTRACE[m  - ##########################################
13:49:25.747 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:25.747 [main] [30mTRACE[m  - ##########################################
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:25.748 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:25.748 [main] [30mTRACE[m  - ########################################
13:49:25.748 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:25.748 [main] [30mTRACE[m  - ########################################

13:49:25.748 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:25.748 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:25.748 [main] [30mTRACE[m  - ##############################################
13:49:25.748 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:25.748 [main] [30mTRACE[m  - ##############################################
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:25.748 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:25.748 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:25.748 [main] [30mTRACE[m  - ##########################################
13:49:25.748 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:25.748 [main] [30mTRACE[m  - ##########################################

13:49:25.748 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:25.748 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:25.748 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:25.749 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:25.749 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:25.749 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:25.749 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:25.749 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:25.749 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:25.749 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:25.749 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:25.749 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:25.749 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:25.954 [main] [30mTRACE[m  - ####################################################
13:49:25.954 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:25.955 [main] [30mTRACE[m  - ####################################################
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:25.955 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:25.955 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:25.955 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:25.955 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:25.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:25.956 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:25.957 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:25.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:25.958 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.958 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.958 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:25.958 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:25.958 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:25.958 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:25.958 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:25.958 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:25.958 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:25.958 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:25.958 [main] [30mTRACE[m  - ##################################################
13:49:25.958 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:25.958 [main] [30mTRACE[m  - ##################################################

13:49:25.958 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:26.773 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:26.773 [main] [30mTRACE[m  - ###############################
13:49:26.773 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:26.773 [main] [30mTRACE[m  - ###############################
13:49:26.976 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:26.977 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:26.977 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:26.977 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:26.977 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:27.179 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:27.180 [main] [30mTRACE[m  - #####################################
13:49:27.180 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:27.180 [main] [30mTRACE[m  - #####################################
13:49:27.180 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:27.180 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:28.282 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:28.282 [main] [32mINFO [m  - Instance "Pattern"
13:49:28.282 [main] [32mINFO [m  - Instance "Matcher"
13:49:28.282 [main] [32mINFO [m  - IF - Match
13:49:28.283 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:28.283 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:28.283 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:28.283 [main] [30mTRACE[m  - ###################################
13:49:28.283 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:28.283 [main] [30mTRACE[m  - ###################################

13:49:28.283 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:28.283 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:28.283 [main] [30mTRACE[m  - ##########################################
13:49:28.283 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:28.283 [main] [30mTRACE[m  - ##########################################
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:28.283 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:28.283 [main] [30mTRACE[m  - ########################################
13:49:28.283 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:28.283 [main] [30mTRACE[m  - ########################################

13:49:28.283 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:28.283 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:28.283 [main] [30mTRACE[m  - ##############################################
13:49:28.283 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:28.283 [main] [30mTRACE[m  - ##############################################
13:49:28.283 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:28.284 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:28.284 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:28.284 [main] [30mTRACE[m  - ##########################################
13:49:28.284 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:28.284 [main] [30mTRACE[m  - ##########################################

13:49:28.284 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:28.284 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:28.284 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:28.284 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:28.284 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:28.285 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:28.285 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:28.285 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:28.286 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:28.286 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:28.287 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:28.287 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:28.287 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:28.498 [main] [30mTRACE[m  - ####################################################
13:49:28.498 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:28.498 [main] [30mTRACE[m  - ####################################################
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:28.498 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:28.498 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:28.498 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:28.498 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:28.498 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.499 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.499 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:28.499 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.499 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.499 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:28.499 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:28.500 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.500 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.500 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:28.500 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:28.500 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:28.500 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:28.500 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:28.500 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:28.500 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:28.500 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:28.500 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:28.500 [main] [30mTRACE[m  - ##################################################
13:49:28.500 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:28.500 [main] [30mTRACE[m  - ##################################################

13:49:28.500 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:29.310 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:29.310 [main] [30mTRACE[m  - ###############################
13:49:29.311 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:29.311 [main] [30mTRACE[m  - ###############################
13:49:29.513 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:29.513 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:29.513 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:29.513 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:29.513 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:29.717 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:29.717 [main] [30mTRACE[m  - #####################################
13:49:29.717 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:29.717 [main] [30mTRACE[m  - #####################################
13:49:29.717 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:29.717 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:31.415 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:31.416 [main] [32mINFO [m  - Instance "Pattern"
13:49:31.416 [main] [32mINFO [m  - Instance "Matcher"
13:49:31.416 [main] [32mINFO [m  - IF - Match
13:49:31.416 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:31.416 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:31.416 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:31.416 [main] [30mTRACE[m  - ###################################
13:49:31.416 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:31.416 [main] [30mTRACE[m  - ###################################

13:49:31.416 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:31.416 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:31.416 [main] [30mTRACE[m  - ##########################################
13:49:31.416 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:31.416 [main] [30mTRACE[m  - ##########################################
13:49:31.416 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:31.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:31.416 [main] [30mTRACE[m  - ########################################
13:49:31.416 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:31.416 [main] [30mTRACE[m  - ########################################

13:49:31.416 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:31.417 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:31.417 [main] [30mTRACE[m  - ##############################################
13:49:31.417 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:31.417 [main] [30mTRACE[m  - ##############################################
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:31.417 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:31.417 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:31.417 [main] [30mTRACE[m  - ##########################################
13:49:31.417 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:31.417 [main] [30mTRACE[m  - ##########################################

13:49:31.417 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:31.417 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:31.417 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:31.417 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:31.417 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:31.417 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:31.417 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:31.418 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:31.418 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:31.418 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:31.418 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:31.419 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:31.419 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:31.620 [main] [30mTRACE[m  - ####################################################
13:49:31.621 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:31.621 [main] [30mTRACE[m  - ####################################################
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:31.621 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:31.621 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:31.621 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:31.621 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:31.621 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.621 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:31.622 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.622 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.622 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:31.622 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.622 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.623 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:31.623 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.623 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.623 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:31.623 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:31.623 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:31.624 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:31.624 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:31.624 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:31.624 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:31.624 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:31.624 [main] [30mTRACE[m  - ##################################################
13:49:31.624 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:31.624 [main] [30mTRACE[m  - ##################################################

13:49:31.624 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:32.433 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:32.433 [main] [30mTRACE[m  - ###############################
13:49:32.433 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:32.433 [main] [30mTRACE[m  - ###############################
13:49:32.636 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:32.636 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:32.636 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:32.636 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:32.636 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:32.841 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:32.841 [main] [30mTRACE[m  - #####################################
13:49:32.841 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:32.841 [main] [30mTRACE[m  - #####################################
13:49:32.842 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:32.842 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:34.274 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:34.274 [main] [32mINFO [m  - Instance "Pattern"
13:49:34.274 [main] [32mINFO [m  - Instance "Matcher"
13:49:34.274 [main] [32mINFO [m  - IF - Match
13:49:34.274 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:34.274 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:34.274 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:34.275 [main] [30mTRACE[m  - ###################################
13:49:34.275 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:34.275 [main] [30mTRACE[m  - ###################################

13:49:34.275 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:34.275 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.275 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:34.275 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:34.275 [main] [30mTRACE[m  - ########################################
13:49:34.275 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:34.275 [main] [30mTRACE[m  - ########################################

13:49:34.275 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:34.275 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:34.275 [main] [30mTRACE[m  - ##############################################
13:49:34.275 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:34.275 [main] [30mTRACE[m  - ##############################################
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:34.275 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:34.275 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:34.275 [main] [30mTRACE[m  - ##########################################
13:49:34.276 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:34.276 [main] [30mTRACE[m  - ##########################################

13:49:34.276 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:34.276 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:34.276 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:34.276 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:34.276 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:34.276 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:34.276 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:34.276 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:34.276 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:34.277 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:34.277 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:34.277 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:34.278 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:34.482 [main] [30mTRACE[m  - ####################################################
13:49:34.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:34.482 [main] [30mTRACE[m  - ####################################################
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:34.482 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:34.482 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:34.482 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:34.482 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:34.482 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:34.483 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.483 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:34.483 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.484 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:34.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.484 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:34.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:34.484 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:34.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:34.485 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:34.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:34.485 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.485 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:34.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:34.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:34.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:34.486 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:34.486 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:34.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:34.487 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:34.487 [main] [30mTRACE[m  - ##################################################
13:49:34.487 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:34.488 [main] [30mTRACE[m  - ##################################################

13:49:34.488 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:35.301 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:35.301 [main] [30mTRACE[m  - ###############################
13:49:35.301 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:35.301 [main] [30mTRACE[m  - ###############################
13:49:35.504 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:35.504 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:35.504 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:35.504 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:35.504 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:35.707 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:35.708 [main] [30mTRACE[m  - #####################################
13:49:35.708 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:35.708 [main] [30mTRACE[m  - #####################################
13:49:35.708 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:35.708 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:37.329 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:49:37.329 [main] [32mINFO [m  - Instance "Pattern"
13:49:37.330 [main] [32mINFO [m  - Instance "Matcher"
13:49:37.330 [main] [33mWARN [m  - ELSE - Error
13:49:37.330 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:49:37.534 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:37.534 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:49:37.534 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:37.534 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:37.739 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:49:38.824 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:38.824 [main] [32mINFO [m  - Instance "Pattern"
13:49:38.824 [main] [32mINFO [m  - Instance "Matcher"
13:49:38.824 [main] [32mINFO [m  - IF - Match
13:49:38.824 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:38.825 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:38.825 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:38.825 [main] [30mTRACE[m  - ###################################
13:49:38.825 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:38.825 [main] [30mTRACE[m  - ###################################

13:49:38.825 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:38.825 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:38.825 [main] [30mTRACE[m  - ##########################################
13:49:38.825 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:38.825 [main] [30mTRACE[m  - ##########################################
13:49:38.825 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:38.825 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:38.825 [main] [30mTRACE[m  - ########################################
13:49:38.825 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:38.825 [main] [30mTRACE[m  - ########################################

13:49:38.825 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:38.825 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:38.825 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:38.825 [main] [30mTRACE[m  - ##############################################
13:49:38.825 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:38.826 [main] [30mTRACE[m  - ##############################################
13:49:38.826 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:38.826 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:38.826 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:38.826 [main] [30mTRACE[m  - ##########################################
13:49:38.826 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:38.826 [main] [30mTRACE[m  - ##########################################

13:49:38.826 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:38.826 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:38.826 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:38.826 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:38.826 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:38.826 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:38.826 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:38.826 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:38.826 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:38.827 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:38.827 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:38.827 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:38.828 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:39.033 [main] [30mTRACE[m  - ####################################################
13:49:39.033 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:39.033 [main] [30mTRACE[m  - ####################################################
13:49:39.033 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:39.033 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:39.034 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:39.034 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:39.034 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:39.034 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:39.034 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.034 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.034 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:39.035 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.035 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:39.035 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:39.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:39.036 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.037 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:39.037 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:39.037 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:39.037 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:39.037 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:39.037 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:39.037 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:39.037 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:39.037 [main] [30mTRACE[m  - ##################################################
13:49:39.037 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:39.037 [main] [30mTRACE[m  - ##################################################

13:49:39.037 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:39.852 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:39.852 [main] [30mTRACE[m  - ###############################
13:49:39.852 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:39.852 [main] [30mTRACE[m  - ###############################
13:49:40.055 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:40.055 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:40.055 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:40.055 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:40.055 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:40.259 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:40.259 [main] [30mTRACE[m  - #####################################
13:49:40.259 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:40.259 [main] [30mTRACE[m  - #####################################
13:49:40.259 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:40.259 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:41.502 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:41.502 [main] [32mINFO [m  - Instance "Pattern"
13:49:41.502 [main] [32mINFO [m  - Instance "Matcher"
13:49:41.502 [main] [32mINFO [m  - IF - Match
13:49:41.502 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:41.502 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:41.502 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:41.502 [main] [30mTRACE[m  - ###################################
13:49:41.503 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:41.503 [main] [30mTRACE[m  - ###################################

13:49:41.503 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:41.503 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:41.503 [main] [30mTRACE[m  - ##########################################
13:49:41.503 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:41.503 [main] [30mTRACE[m  - ##########################################
13:49:41.503 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:41.503 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:41.503 [main] [30mTRACE[m  - ########################################
13:49:41.503 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:41.503 [main] [30mTRACE[m  - ########################################

13:49:41.503 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:41.503 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:41.503 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:41.503 [main] [30mTRACE[m  - ##############################################
13:49:41.504 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:41.504 [main] [30mTRACE[m  - ##############################################
13:49:41.504 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:41.504 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:41.504 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:41.504 [main] [30mTRACE[m  - ##########################################
13:49:41.504 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:41.504 [main] [30mTRACE[m  - ##########################################

13:49:41.504 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:41.504 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:41.504 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:41.504 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:41.504 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:41.504 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:41.504 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:41.504 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:41.504 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:41.504 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:41.504 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:41.505 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:41.505 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:41.710 [main] [30mTRACE[m  - ####################################################
13:49:41.710 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:41.710 [main] [30mTRACE[m  - ####################################################
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:41.710 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:41.710 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:41.710 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:41.711 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:41.711 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:41.711 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.711 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.711 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.711 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:41.712 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.712 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:41.712 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.712 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.712 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:41.713 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.713 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:41.713 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.713 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:41.713 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:41.714 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:41.714 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:41.714 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:41.714 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:41.715 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:41.715 [main] [30mTRACE[m  - ##################################################
13:49:41.715 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:41.715 [main] [30mTRACE[m  - ##################################################

13:49:41.715 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:42.528 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:42.528 [main] [30mTRACE[m  - ###############################
13:49:42.528 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:42.528 [main] [30mTRACE[m  - ###############################
13:49:42.731 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:42.732 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:42.732 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:42.732 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:42.732 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:42.935 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:42.935 [main] [30mTRACE[m  - #####################################
13:49:42.935 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:42.935 [main] [30mTRACE[m  - #####################################
13:49:42.935 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:42.935 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:43.536 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:43.537 [main] [32mINFO [m  - Instance "Pattern"
13:49:43.537 [main] [32mINFO [m  - Instance "Matcher"
13:49:43.537 [main] [32mINFO [m  - IF - Match
13:49:43.537 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:43.537 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:43.537 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:43.537 [main] [30mTRACE[m  - ###################################
13:49:43.537 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:43.537 [main] [30mTRACE[m  - ###################################

13:49:43.537 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:43.537 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:43.537 [main] [30mTRACE[m  - ##########################################
13:49:43.537 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:43.537 [main] [30mTRACE[m  - ##########################################
13:49:43.537 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:43.537 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:43.537 [main] [30mTRACE[m  - ########################################
13:49:43.537 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:43.537 [main] [30mTRACE[m  - ########################################

13:49:43.538 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:43.538 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:43.538 [main] [30mTRACE[m  - ##############################################
13:49:43.538 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:43.538 [main] [30mTRACE[m  - ##############################################
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:43.538 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:43.538 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:43.538 [main] [30mTRACE[m  - ##########################################
13:49:43.538 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:43.538 [main] [30mTRACE[m  - ##########################################

13:49:43.538 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:43.538 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:43.538 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:43.538 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:43.539 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:43.539 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:43.539 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:43.539 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:43.539 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:43.539 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:43.539 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:43.539 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:43.539 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:43.742 [main] [30mTRACE[m  - ####################################################
13:49:43.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:43.742 [main] [30mTRACE[m  - ####################################################
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:43.742 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:43.742 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:43.742 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:43.742 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:43.743 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.743 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:43.743 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:43.743 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.743 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.743 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:43.744 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:43.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:43.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:43.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:43.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:43.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:43.745 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:43.745 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:43.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:43.745 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:43.745 [main] [30mTRACE[m  - ##################################################
13:49:43.745 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:43.745 [main] [30mTRACE[m  - ##################################################

13:49:43.745 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:44.560 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:44.560 [main] [30mTRACE[m  - ###############################
13:49:44.560 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:44.560 [main] [30mTRACE[m  - ###############################
13:49:44.763 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:44.763 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:44.764 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:44.764 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:44.764 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:44.969 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:44.969 [main] [30mTRACE[m  - #####################################
13:49:44.969 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:44.969 [main] [30mTRACE[m  - #####################################
13:49:44.969 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:44.969 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:46.124 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:46.124 [main] [32mINFO [m  - Instance "Pattern"
13:49:46.124 [main] [32mINFO [m  - Instance "Matcher"
13:49:46.124 [main] [32mINFO [m  - IF - Match
13:49:46.124 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:46.124 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:46.124 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:46.124 [main] [30mTRACE[m  - ###################################
13:49:46.124 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:46.125 [main] [30mTRACE[m  - ###################################

13:49:46.125 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:46.125 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:46.125 [main] [30mTRACE[m  - ##########################################
13:49:46.125 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:46.125 [main] [30mTRACE[m  - ##########################################
13:49:46.125 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:46.125 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:46.125 [main] [30mTRACE[m  - ########################################
13:49:46.125 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:46.125 [main] [30mTRACE[m  - ########################################

13:49:46.125 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:46.125 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:46.125 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:46.125 [main] [30mTRACE[m  - ##############################################
13:49:46.126 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:46.126 [main] [30mTRACE[m  - ##############################################
13:49:46.126 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:46.126 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:46.126 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:46.126 [main] [30mTRACE[m  - ##########################################
13:49:46.126 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:46.126 [main] [30mTRACE[m  - ##########################################

13:49:46.126 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:46.126 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:46.126 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:46.126 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:46.126 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:46.127 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:46.127 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:46.127 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:46.127 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:46.127 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:46.132 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:46.132 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:46.132 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:46.336 [main] [30mTRACE[m  - ####################################################
13:49:46.336 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:46.337 [main] [30mTRACE[m  - ####################################################
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:46.337 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:46.337 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:46.337 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:46.337 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:46.337 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.337 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.338 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.338 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:46.338 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.338 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.338 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:46.338 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.339 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:46.339 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.339 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.339 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:46.339 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:46.339 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:46.340 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:46.340 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:46.340 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:46.340 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:46.340 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:46.340 [main] [30mTRACE[m  - ##################################################
13:49:46.340 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:46.340 [main] [30mTRACE[m  - ##################################################

13:49:46.340 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:47.155 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:47.155 [main] [30mTRACE[m  - ###############################
13:49:47.155 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:47.155 [main] [30mTRACE[m  - ###############################
13:49:47.360 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:47.360 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:47.360 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:47.361 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:47.361 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:47.562 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:47.562 [main] [30mTRACE[m  - #####################################
13:49:47.562 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:47.562 [main] [30mTRACE[m  - #####################################
13:49:47.562 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:47.562 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:48.627 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:48.627 [main] [32mINFO [m  - Instance "Pattern"
13:49:48.627 [main] [32mINFO [m  - Instance "Matcher"
13:49:48.628 [main] [32mINFO [m  - IF - Match
13:49:48.628 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:48.628 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:48.628 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:48.628 [main] [30mTRACE[m  - ###################################
13:49:48.628 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:48.628 [main] [30mTRACE[m  - ###################################

13:49:48.628 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:48.628 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:48.628 [main] [30mTRACE[m  - ##########################################
13:49:48.628 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:48.628 [main] [30mTRACE[m  - ##########################################
13:49:48.628 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:48.628 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:48.628 [main] [30mTRACE[m  - ########################################
13:49:48.628 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:48.628 [main] [30mTRACE[m  - ########################################

13:49:48.628 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:48.628 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:48.628 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:48.628 [main] [30mTRACE[m  - ##############################################
13:49:48.629 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:48.629 [main] [30mTRACE[m  - ##############################################
13:49:48.629 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:48.629 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:48.629 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:48.629 [main] [30mTRACE[m  - ##########################################
13:49:48.629 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:48.629 [main] [30mTRACE[m  - ##########################################

13:49:48.629 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:48.629 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:48.629 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:48.629 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:48.629 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:48.629 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:48.629 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:48.629 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:48.630 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:48.630 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:48.630 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:48.630 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:48.630 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:48.836 [main] [30mTRACE[m  - ####################################################
13:49:48.836 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:48.836 [main] [30mTRACE[m  - ####################################################
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:48.836 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:48.836 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:48.836 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:48.836 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:48.836 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.836 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:48.836 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:48.837 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:48.837 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.837 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:48.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.838 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:48.838 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.839 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:48.839 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.839 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.839 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:48.839 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:48.839 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:48.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:48.839 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:48.839 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:48.839 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:48.839 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:48.839 [main] [30mTRACE[m  - ##################################################
13:49:48.839 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:48.839 [main] [30mTRACE[m  - ##################################################

13:49:48.839 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:49.651 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:49.651 [main] [30mTRACE[m  - ###############################
13:49:49.651 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:49.652 [main] [30mTRACE[m  - ###############################
13:49:49.854 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:49.854 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:49.854 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:49.854 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:49.854 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:50.058 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:50.058 [main] [30mTRACE[m  - #####################################
13:49:50.058 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:50.058 [main] [30mTRACE[m  - #####################################
13:49:50.058 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:50.058 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:51.088 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:51.088 [main] [32mINFO [m  - Instance "Pattern"
13:49:51.088 [main] [32mINFO [m  - Instance "Matcher"
13:49:51.088 [main] [32mINFO [m  - IF - Match
13:49:51.088 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:51.088 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:51.088 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:51.088 [main] [30mTRACE[m  - ###################################
13:49:51.088 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:51.088 [main] [30mTRACE[m  - ###################################

13:49:51.088 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:51.089 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:51.089 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:51.089 [main] [30mTRACE[m  - ########################################
13:49:51.089 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:51.089 [main] [30mTRACE[m  - ########################################

13:49:51.089 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:51.089 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:51.089 [main] [30mTRACE[m  - ##############################################
13:49:51.089 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:51.089 [main] [30mTRACE[m  - ##############################################
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:51.089 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:51.089 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:51.089 [main] [30mTRACE[m  - ##########################################
13:49:51.089 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:51.089 [main] [30mTRACE[m  - ##########################################

13:49:51.089 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:51.089 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:51.090 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:51.090 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:51.090 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:51.090 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:51.090 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:51.090 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:51.090 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:51.090 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:51.091 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:51.092 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:51.092 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:51.294 [main] [30mTRACE[m  - ####################################################
13:49:51.294 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:51.294 [main] [30mTRACE[m  - ####################################################
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:51.294 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:51.294 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:51.294 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:51.294 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:51.295 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.295 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.295 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.295 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.295 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:51.295 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.295 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.295 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:51.295 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:51.296 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.296 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.296 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:51.296 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.296 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.296 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:51.297 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.297 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.297 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:51.297 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:51.297 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:51.297 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:51.297 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:51.297 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:51.297 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:51.297 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:51.297 [main] [30mTRACE[m  - ##################################################
13:49:51.297 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:51.297 [main] [30mTRACE[m  - ##################################################

13:49:51.297 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:52.113 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:52.113 [main] [30mTRACE[m  - ###############################
13:49:52.113 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:52.113 [main] [30mTRACE[m  - ###############################
13:49:52.315 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:52.316 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:52.316 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:52.316 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:52.316 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:52.519 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:52.519 [main] [30mTRACE[m  - #####################################
13:49:52.519 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:52.519 [main] [30mTRACE[m  - #####################################
13:49:52.519 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:52.520 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:52.754 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 
13:49:52.754 [main] [32mINFO [m  - Instance "Pattern"
13:49:52.754 [main] [32mINFO [m  - Instance "Matcher"
13:49:52.755 [main] [33mWARN [m  - ELSE - Error
13:49:52.755 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
13:49:52.956 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:52.964 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
13:49:52.964 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:52.964 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:53.170 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
13:49:53.866 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:53.866 [main] [32mINFO [m  - Instance "Pattern"
13:49:53.866 [main] [32mINFO [m  - Instance "Matcher"
13:49:53.866 [main] [32mINFO [m  - IF - Match
13:49:53.866 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:53.866 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:53.866 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:53.866 [main] [30mTRACE[m  - ###################################
13:49:53.866 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:53.866 [main] [30mTRACE[m  - ###################################

13:49:53.866 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:53.866 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:53.866 [main] [30mTRACE[m  - ##########################################
13:49:53.866 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:53.866 [main] [30mTRACE[m  - ##########################################
13:49:53.866 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:53.866 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:53.866 [main] [30mTRACE[m  - ########################################
13:49:53.866 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:53.866 [main] [30mTRACE[m  - ########################################

13:49:53.866 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:53.866 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:53.866 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:53.867 [main] [30mTRACE[m  - ##############################################
13:49:53.867 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:53.867 [main] [30mTRACE[m  - ##############################################
13:49:53.867 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:53.867 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:53.867 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:53.867 [main] [30mTRACE[m  - ##########################################
13:49:53.867 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:53.867 [main] [30mTRACE[m  - ##########################################

13:49:53.867 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:53.867 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:53.867 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:53.867 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:53.867 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:53.867 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:53.867 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:53.867 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:53.867 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:53.867 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:53.867 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:53.867 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:53.867 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:54.068 [main] [30mTRACE[m  - ####################################################
13:49:54.069 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:54.069 [main] [30mTRACE[m  - ####################################################
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:54.069 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:54.069 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:54.069 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:54.069 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:54.069 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.069 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:54.069 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:54.070 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.070 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.070 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:54.070 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.070 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.070 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.071 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.071 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:54.071 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.071 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.071 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:54.071 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:54.072 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:54.072 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:54.072 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:54.072 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:54.072 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:54.072 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:54.072 [main] [30mTRACE[m  - ##################################################
13:49:54.072 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:54.072 [main] [30mTRACE[m  - ##################################################

13:49:54.072 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:54.887 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:54.888 [main] [30mTRACE[m  - ###############################
13:49:54.888 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
13:49:54.888 [main] [30mTRACE[m  - ###############################
13:49:55.090 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:49:55.090 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:49:55.091 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:49:55.091 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:49:55.091 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:55.293 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:49:55.293 [main] [30mTRACE[m  - #####################################
13:49:55.293 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:49:55.293 [main] [30mTRACE[m  - #####################################
13:49:55.293 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:49:55.294 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:49:56.239 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : aaaaaaaa
13:49:56.239 [main] [32mINFO [m  - Instance "Pattern"
13:49:56.239 [main] [32mINFO [m  - Instance "Matcher"
13:49:56.239 [main] [32mINFO [m  - IF - Match
13:49:56.239 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:49:56.239 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:49:56.239 [main] [36mDEBUG[m  - String() Combinaison : aaaaaaaa
13:49:56.240 [main] [30mTRACE[m  - ###################################
13:49:56.240 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:49:56.240 [main] [30mTRACE[m  - ###################################

13:49:56.240 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:49:56.240 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:49:56.240 [main] [30mTRACE[m  - ##########################################
13:49:56.240 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:49:56.240 [main] [30mTRACE[m  - ##########################################
13:49:56.240 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:49:56.240 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:49:56.240 [main] [30mTRACE[m  - ########################################
13:49:56.240 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:49:56.241 [main] [30mTRACE[m  - ########################################

13:49:56.241 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:49:56.241 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:49:56.241 [main] [30mTRACE[m  - ##############################################
13:49:56.241 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:49:56.241 [main] [30mTRACE[m  - ##############################################
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:49:56.241 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:49:56.241 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:49:56.242 [main] [30mTRACE[m  - ##########################################
13:49:56.242 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:49:56.242 [main] [30mTRACE[m  - ##########################################

13:49:56.242 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:49:56.243 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:49:56.243 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:49:56.243 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:49:56.243 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, A, A, A, A, A, A, A]
13:49:56.243 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, A, A, A, A, A, A, A]
13:49:56.244 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:49:56.244 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:49:56.244 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [8, 0, 0, 0, 0, 0]
13:49:56.244 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [8, 0, 0, 0, 0, 0]
13:49:56.244 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:49:56.244 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAA
13:49:56.245 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:49:56.449 [main] [30mTRACE[m  - ####################################################
13:49:56.449 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:49:56.449 [main] [30mTRACE[m  - ####################################################
13:49:56.449 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:49:56.449 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, E, F, B, B, D, C]
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [0, 3, 2, 1, 1, 1]
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, A]
13:49:56.450 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:49:56.450 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:49:56.450 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:49:56.450 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.451 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.451 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:49:56.451 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.451 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.451 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 1]
13:49:56.451 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.451 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.451 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 2]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 3]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 4]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.452 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.452 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:49:56.452 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.452 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 5]
13:49:56.452 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 6]
13:49:56.453 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 7]
13:49:56.453 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:49:56.453 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:49:56.453 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:49:56.453 [main] [32mINFO [m  - FOR - Chaque unit√©
13:49:56.453 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:49:56.453 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [0, 0, 8]
13:49:56.453 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [0, 0, 8]
13:49:56.453 [main] [30mTRACE[m  - ##################################################
13:49:56.453 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:49:56.453 [main] [30mTRACE[m  - ##################################################

13:49:56.453 [main] [32mINFO [m  - Lancement de la comparaison entre votre proposition et la combinaison secr√®te
13:49:57.264 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:49:57.264 [main] [32mINFO [m  - IF - La partie n'est pas gagn√©e
13:49:57.264 [main] [32mINFO [m  - SWITCH - Mode du jeu "Recherche +/-"
13:49:57.264 [main] [32mINFO [m  - CASE - Mode "Challenger"
13:49:57.264 [main] [36mDEBUG[m  - Incr√©mentation String() : CBEFBBDC
13:49:59.495 [main] [30mTRACE[m  - #############################
13:49:59.496 [main] [30mTRACE[m  - ### END ### Mode "Challenger"
13:49:59.496 [main] [30mTRACE[m  - #############################
13:49:59.496 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
13:49:59.496 [main] [30mTRACE[m  - ####################################################################
13:49:59.496 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
13:49:59.496 [main] [30mTRACE[m  - ####################################################################
13:49:59.904 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:49:59.904 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:49:59.904 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:33.170 [main] [30mTRACE[m  - #######################################
16:15:33.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
16:15:33.176 [main] [30mTRACE[m  - #######################################
16:15:33.176 [main] [30mTRACE[m  - ######################################################################################
16:15:33.176 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
16:15:33.176 [main] [30mTRACE[m  - ######################################################################################
16:15:33.177 [main] [30mTRACE[m  - #############################################
16:15:33.177 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
16:15:33.177 [main] [30mTRACE[m  - #############################################
16:15:33.179 [main] [30mTRACE[m  - ###########################################
16:15:33.179 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
16:15:33.179 [main] [30mTRACE[m  - ###########################################

16:15:33.182 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
16:15:33.182 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
16:15:33.183 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
16:15:33.183 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
16:15:33.184 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
16:15:33.184 [main] [30mTRACE[m  - #########################################################
16:15:33.184 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
16:15:33.184 [main] [30mTRACE[m  - #########################################################
16:15:33.184 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
16:15:33.185 [main] [32mINFO [m  - FOR - Lancement boucle infini
16:15:33.185 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
16:15:33.185 [main] [32mINFO [m  - IF - Premier tour
16:15:35.719 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
16:15:35.921 [main] [30mTRACE[m  - ###########################################################
16:15:35.922 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
16:15:35.922 [main] [30mTRACE[m  - ###########################################################
16:15:35.922 [main] [30mTRACE[m  - #######################################
16:15:35.922 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
16:15:35.922 [main] [30mTRACE[m  - #######################################
16:15:35.923 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
16:15:35.923 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
16:15:35.924 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
16:15:36.741 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:36.741 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:36.742 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:56.193 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:56.195 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
16:15:56.196 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
16:15:56.197 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:56.197 [main] [32mINFO [m  - CASE - "Games"
16:15:56.197 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:56.402 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
16:15:56.403 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
16:15:56.403 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
16:15:57.215 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:57.215 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:57.215 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:57.884 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:57.885 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
16:15:57.887 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
16:15:57.887 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:57.888 [main] [32mINFO [m  - CASE - "Comfirm"
16:15:57.888 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:57.888 [main] [32mINFO [m  - CASE - 'O'
16:15:57.889 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
16:15:57.890 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
16:15:57.890 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
16:15:57.891 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
16:15:58.912 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:15:58.912 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:15:58.912 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:15:59.465 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:15:59.467 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
16:15:59.468 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
16:15:59.468 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:15:59.469 [main] [32mINFO [m  - CASE - "Modes"
16:15:59.469 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:15:59.469 [main] [32mINFO [m  - CASE - '2'
16:15:59.675 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
16:15:59.676 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
16:15:59.676 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
16:16:00.491 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:16:00.492 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:16:00.492 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:16:01.163 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:16:01.164 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
16:16:01.165 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
16:16:01.165 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
16:16:01.166 [main] [32mINFO [m  - CASE - "Comfirm"
16:16:01.166 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
16:16:01.166 [main] [32mINFO [m  - CASE - 'O'
16:16:01.167 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
16:16:01.168 [main] [36mDEBUG[m  - str_ConfirmChoise : O
16:16:01.169 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
16:16:01.170 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
16:16:03.428 [main] [30mTRACE[m  - #####################################
16:16:03.428 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
16:16:03.428 [main] [30mTRACE[m  - #####################################

16:16:03.428 [main] [30mTRACE[m  - ################################################################################################
16:16:03.428 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
16:16:03.428 [main] [30mTRACE[m  - ################################################################################################
16:16:03.428 [main] [32mINFO [m  - SWITCH - Choix du jeu
16:16:03.429 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
16:16:03.441 [main] [32mINFO [m  - Instance "Mastermind"
16:16:03.442 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
16:16:03.442 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
16:16:03.442 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
16:16:03.443 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
16:16:03.443 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
16:16:03.444 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:03.444 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
16:16:03.445 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
16:16:03.446 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
16:16:03.447 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
16:16:03.447 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
16:16:03.447 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
16:16:03.447 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
16:16:03.448 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:03.448 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
16:16:03.449 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:03.449 [main] [32mINFO [m  - Lancement du compteur de tours
16:16:03.449 [main] [30mTRACE[m  - ############################
16:16:03.450 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:03.450 [main] [30mTRACE[m  - ############################
16:16:03.450 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:03.450 [main] [32mINFO [m  - SI - Premier tour
16:16:04.501 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
16:16:04.501 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
16:16:04.501 [main] [32mINFO [m  - SWITCH - Mode des jeux
16:16:04.501 [main] [32mINFO [m  - CASE - Mode "D√©fense"
16:16:04.703 [main] [32mINFO [m  - Lance le scanner pour la combinaison
16:16:04.704 [main] [30mTRACE[m  - #####################################
16:16:04.704 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
16:16:04.704 [main] [30mTRACE[m  - #####################################
16:16:04.705 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
16:16:04.705 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
16:16:19.000 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : abcdefab
16:16:19.002 [main] [32mINFO [m  - Instance "Pattern"
16:16:19.002 [main] [32mINFO [m  - Instance "Matcher"
16:16:19.002 [main] [32mINFO [m  - IF - Match
16:16:19.003 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
16:16:19.003 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
16:16:19.004 [main] [36mDEBUG[m  - String() Combinaison : abcdefab
16:16:19.004 [main] [30mTRACE[m  - ###################################
16:16:19.004 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
16:16:19.005 [main] [30mTRACE[m  - ###################################

16:16:19.005 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
16:16:19.005 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
16:16:19.005 [main] [30mTRACE[m  - ##########################################
16:16:19.006 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
16:16:19.006 [main] [30mTRACE[m  - ##########################################
16:16:19.007 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
16:16:19.007 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
16:16:19.007 [main] [30mTRACE[m  - ########################################
16:16:19.007 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
16:16:19.008 [main] [30mTRACE[m  - ########################################

16:16:19.008 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
16:16:19.008 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
16:16:19.008 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
16:16:19.009 [main] [30mTRACE[m  - ##############################################
16:16:19.009 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
16:16:19.009 [main] [30mTRACE[m  - ##############################################
16:16:19.009 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
16:16:19.010 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
16:16:19.010 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
16:16:19.011 [main] [30mTRACE[m  - ##########################################
16:16:19.011 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
16:16:19.011 [main] [30mTRACE[m  - ##########################################

16:16:19.011 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
16:16:19.011 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
16:16:19.012 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
16:16:19.013 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
16:16:19.014 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, B, C, D, E, F, A, B]
16:16:19.015 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, B, C, D, E, F, A, B]
16:16:19.015 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
16:16:19.015 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
16:16:19.016 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:19.016 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:19.016 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
16:16:19.020 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
16:16:19.020 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
16:16:19.225 [main] [30mTRACE[m  - #####################################
16:16:19.225 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:19.228 [main] [30mTRACE[m  - #####################################
16:16:19.228 [main] [32mINFO [m  - IF - Premier tour
16:16:19.228 [main] [30mTRACE[m  - ##########################################################
16:16:19.229 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_FirstTypeComputerProposal()
16:16:19.229 [main] [30mTRACE[m  - ##########################################################
16:16:19.229 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
16:16:19.229 [main] [32mINFO [m  - Initialisation (char[]) Nouvelle proposition de l'ordinateur
16:16:19.230 [main] [36mDEBUG[m  - Injection (char[]) Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:19.230 [main] [32mINFO [m  - Injection mouvelle proposition de l'ordinateur dans donn√©es de d√©fense
16:16:19.230 [main] [30mTRACE[m  - ########################################################
16:16:19.231 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_FirstTypeComputerProposal()
16:16:19.231 [main] [30mTRACE[m  - ########################################################

16:16:19.231 [main] [32mINFO [m  - Lancement premi√®re proposition de l'ordinateur
16:16:19.231 [main] [30mTRACE[m  - ###################################
16:16:19.231 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:19.231 [main] [30mTRACE[m  - ###################################

16:16:19.231 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.231 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:19.232 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.232 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:19.233 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:19.233 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:19.233 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  0
16:16:19.234 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [ ,  ,  ,  ,  ,  ,  ,  ]
16:16:19.234 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [E, B, C, F, F, C, B, E]
16:16:19.235 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
16:16:19.235 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [0, 0, 0]
16:16:19.235 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
16:16:19.236 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:19.249 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:19.249 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:19.249 [main] [36mDEBUG[m  - ch_PreviousLetter :                            
16:16:19.250 [main] [36mDEBUG[m  - ch_NewLetter :                                 
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################
16:16:19.250 [main] [30mTRACE[m  - ###########################################################################################################

16:16:19.250 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:19.251 [main] [36mDEBUG[m  - Incr√©mentation String() : EBCFFCBE
16:16:19.251 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : EBCFFCBE
16:16:19.462 [main] [30mTRACE[m  - ####################################################
16:16:19.463 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:19.463 [main] [30mTRACE[m  - ####################################################
16:16:19.464 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.464 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:19.465 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:19.466 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:19.466 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:19.467 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:19.467 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:19.467 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:19.468 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:19.469 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.469 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:19.469 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.469 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:19.469 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:19.469 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:19.470 [main] [30mTRACE[m  - ###############################################
16:16:19.470 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:19.470 [main] [30mTRACE[m  - ###############################################
16:16:19.470 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:19.471 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.471 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.472 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.472 [main] [36mDEBUG[m  - Index de la lettre
16:16:19.472 [main] [30mTRACE[m  - #############################################
16:16:19.472 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:19.472 [main] [30mTRACE[m  - #############################################

16:16:19.472 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:19.472 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:19.473 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:19.473 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
16:16:19.473 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:19.473 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:19.473 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:19.473 [main] [30mTRACE[m  - ###############################################
16:16:19.473 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:19.473 [main] [30mTRACE[m  - ###############################################
16:16:19.473 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:19.473 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:19.474 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.474 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.474 [main] [36mDEBUG[m  - Index de la lettre
16:16:19.474 [main] [30mTRACE[m  - #############################################
16:16:19.474 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:19.474 [main] [30mTRACE[m  - #############################################

16:16:19.474 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:19.474 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:19.474 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:19.475 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
16:16:19.475 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:19.475 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.475 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.475 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:19.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:19.476 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.476 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, false, false, false]
16:16:19.477 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:19.477 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.477 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.477 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 1, 0]
16:16:19.477 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.478 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:19.478 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.478 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:19.478 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:19.478 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.479 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, false]
16:16:19.479 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:19.479 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.479 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 1, 1]
16:16:19.479 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.479 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:19.479 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.480 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:19.480 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:19.480 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.480 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.480 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:19.480 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.480 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:19.480 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:19.481 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.481 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.481 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
16:16:19.481 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.481 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:19.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:19.481 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.481 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:19.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, true]
16:16:19.481 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:19.482 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:19.482 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:19.482 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 1, 1]
16:16:19.482 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:19.482 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:19.482 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:19.482 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:19.482 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:19.482 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:19.482 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:19.482 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 3]
16:16:19.483 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:19.483 [main] [30mTRACE[m  - ##################################################
16:16:19.483 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:19.484 [main] [30mTRACE[m  - ##################################################

16:16:19.484 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:20.301 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:20.301 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:20.301 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:20.304 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:20.304 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:20.525 [main] [30mTRACE[m  - ##########################
16:16:20.525 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:20.525 [main] [30mTRACE[m  - ##########################

16:16:20.525 [main] [30mTRACE[m  - ############################
16:16:20.525 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:20.525 [main] [30mTRACE[m  - ############################
16:16:20.525 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:20.525 [main] [30mTRACE[m  - #####################################
16:16:20.526 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:20.526 [main] [30mTRACE[m  - #####################################
16:16:20.526 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:20.526 [main] [30mTRACE[m  - ###########################################################
16:16:20.526 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:20.526 [main] [30mTRACE[m  - ###########################################################
16:16:20.526 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:20.526 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:20.527 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [E, B, C, F, F, C, B, E]
16:16:20.527 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
16:16:20.527 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:20.527 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:20.528 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:20.528 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:20.528 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:20.528 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
16:16:20.528 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:20.528 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:20.529 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:20.529 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:20.529 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:20.529 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:20.529 [main] [30mTRACE[m  - ###############################################
16:16:20.530 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.530 [main] [30mTRACE[m  - ###############################################
16:16:20.530 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.530 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.530 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.530 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.530 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.530 [main] [30mTRACE[m  - #############################################
16:16:20.530 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.530 [main] [30mTRACE[m  - #############################################

16:16:20.530 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:20.530 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:20.530 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:20.530 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:20.530 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:20.530 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:20.531 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:20.531 [main] [30mTRACE[m  - #########################################################
16:16:20.531 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:20.531 [main] [30mTRACE[m  - #########################################################

16:16:20.531 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:20.531 [main] [30mTRACE[m  - ###################################
16:16:20.531 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:20.531 [main] [30mTRACE[m  - ###################################

16:16:20.531 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.531 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:20.531 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.531 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:20.531 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:20.531 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:20.531 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  1
16:16:20.531 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [F, B, C, F, F, C, B, E]
16:16:20.531 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [F, B, C, F, F, C, B, E]
16:16:20.531 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
16:16:20.532 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
16:16:20.532 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
16:16:20.532 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:20.534 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:20.534 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:20.534 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:20.534 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:20.534 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.535 [main] [30mTRACE[m  - ###########################################################################################################
16:16:20.535 [main] [30mTRACE[m  - ###########################################################################################################

16:16:20.535 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:20.535 [main] [36mDEBUG[m  - Incr√©mentation String() : FBCFFCBE
16:16:20.535 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : FBCFFCBE
16:16:20.737 [main] [30mTRACE[m  - ####################################################
16:16:20.737 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:20.737 [main] [30mTRACE[m  - ####################################################
16:16:20.737 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, B, C, F, F, C, B, E]
16:16:20.738 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:20.738 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:20.738 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:20.738 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:20.738 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:20.738 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:20.739 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:20.739 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:20.739 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.739 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:20.739 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.739 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:20.739 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:20.739 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:20.739 [main] [30mTRACE[m  - ###############################################
16:16:20.739 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.740 [main] [30mTRACE[m  - ###############################################
16:16:20.740 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.740 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.740 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.740 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.740 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.740 [main] [30mTRACE[m  - #############################################
16:16:20.740 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.740 [main] [30mTRACE[m  - #############################################

16:16:20.740 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:20.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:20.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
16:16:20.741 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
16:16:20.741 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:20.741 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:20.741 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:20.741 [main] [30mTRACE[m  - ###############################################
16:16:20.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:20.742 [main] [30mTRACE[m  - ###############################################
16:16:20.742 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:20.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:20.742 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.742 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.742 [main] [36mDEBUG[m  - Index de la lettre
16:16:20.743 [main] [30mTRACE[m  - #############################################
16:16:20.743 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:20.743 [main] [30mTRACE[m  - #############################################

16:16:20.743 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:20.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:20.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, false, false, false]
16:16:20.744 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
16:16:20.744 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:20.744 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.744 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:20.744 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.744 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, true, false, false]
16:16:20.745 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:20.745 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.745 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 0, 0, 1]
16:16:20.745 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:20.745 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:20.746 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.746 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.746 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:20.746 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:20.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:20.747 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:20.748 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.749 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:20.749 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.749 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:20.749 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:20.749 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.749 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:20.749 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.749 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, false, true, false, true]
16:16:20.749 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:20.750 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.750 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.750 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 0, 1]
16:16:20.750 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.750 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:20.750 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:20.750 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:20.750 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:20.750 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:20.750 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:20.751 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, false, true, true, false, true]
16:16:20.751 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:20.751 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:20.751 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:20.751 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 0, 1, 1]
16:16:20.751 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:20.751 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:20.751 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:20.751 [main] [30mTRACE[m  - ##################################################
16:16:20.751 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:20.751 [main] [30mTRACE[m  - ##################################################

16:16:20.751 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:21.561 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:21.562 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:21.562 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:21.562 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:21.562 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:21.765 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:21.765 [main] [30mTRACE[m  - ##############################################################
16:16:21.765 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:21.765 [main] [30mTRACE[m  - ##############################################################
16:16:21.766 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:21.766 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:21.767 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:21.767 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:21.767 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:21.768 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:21.768 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:21.768 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:21.769 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:21.769 [main] [30mTRACE[m  - ############################################################
16:16:21.769 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:21.769 [main] [30mTRACE[m  - ############################################################

16:16:21.769 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:21.769 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:21.769 [main] [30mTRACE[m  - ##########################
16:16:21.770 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:21.770 [main] [30mTRACE[m  - ##########################

16:16:21.770 [main] [30mTRACE[m  - ############################
16:16:21.770 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:21.770 [main] [30mTRACE[m  - ############################
16:16:21.770 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:21.771 [main] [30mTRACE[m  - #####################################
16:16:21.771 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:21.771 [main] [30mTRACE[m  - #####################################
16:16:21.771 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:21.771 [main] [30mTRACE[m  - ###########################################################
16:16:21.771 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:21.771 [main] [30mTRACE[m  - ###########################################################
16:16:21.771 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:21.771 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:21.772 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, B, C, F, F, C, B, E]
16:16:21.772 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
16:16:21.772 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:21.772 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:21.772 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:21.772 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:21.772 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:21.772 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
16:16:21.772 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.772 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:21.773 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:21.773 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:21.773 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:21.773 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
16:16:21.773 [main] [30mTRACE[m  - ###############################################
16:16:21.774 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.774 [main] [30mTRACE[m  - ###############################################
16:16:21.774 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.774 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.774 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.774 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.774 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.774 [main] [30mTRACE[m  - #############################################
16:16:21.774 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.774 [main] [30mTRACE[m  - #############################################

16:16:21.774 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:21.774 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:21.774 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:21.774 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:21.775 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:21.775 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:21.775 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:21.775 [main] [30mTRACE[m  - #########################################################
16:16:21.775 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:21.775 [main] [30mTRACE[m  - #########################################################

16:16:21.775 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:21.775 [main] [30mTRACE[m  - ###################################
16:16:21.775 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:21.775 [main] [30mTRACE[m  - ###################################

16:16:21.775 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.775 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:21.775 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.776 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:21.776 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:21.776 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:21.776 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  2
16:16:21.776 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, F, F, C, B, E]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, F, F, C, B, E]
16:16:21.777 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:21.777 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:21.777 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:21.780 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
16:16:21.780 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
16:16:21.780 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
16:16:21.780 [main] [36mDEBUG[m  - ch_NewLetter :                                A
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################
16:16:21.781 [main] [30mTRACE[m  - ###########################################################################################################

16:16:21.781 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:21.781 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCFFCBE
16:16:21.781 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCFFCBE
16:16:21.985 [main] [30mTRACE[m  - ####################################################
16:16:21.986 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:21.986 [main] [30mTRACE[m  - ####################################################
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:21.986 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:21.986 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:21.986 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:21.986 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:21.987 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:21.987 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.987 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:21.987 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.987 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.987 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:21.987 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
16:16:21.988 [main] [30mTRACE[m  - ###############################################
16:16:21.988 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.988 [main] [30mTRACE[m  - ###############################################
16:16:21.988 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.988 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.988 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.988 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.988 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.988 [main] [30mTRACE[m  - #############################################
16:16:21.988 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.988 [main] [30mTRACE[m  - #############################################

16:16:21.988 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
16:16:21.988 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:21.989 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:21.989 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:21.989 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.989 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:21.989 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:21.989 [main] [30mTRACE[m  - ###############################################
16:16:21.989 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.989 [main] [30mTRACE[m  - ###############################################
16:16:21.989 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.989 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.989 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.990 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.990 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.990 [main] [30mTRACE[m  - #############################################
16:16:21.990 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.990 [main] [30mTRACE[m  - #############################################

16:16:21.990 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:21.990 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:21.990 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:21.990 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:21.990 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:21.991 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:21.991 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:21.991 [main] [30mTRACE[m  - ###############################################
16:16:21.991 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:21.991 [main] [30mTRACE[m  - ###############################################
16:16:21.991 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:21.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:21.991 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.991 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.991 [main] [36mDEBUG[m  - Index de la lettre
16:16:21.991 [main] [30mTRACE[m  - #############################################
16:16:21.991 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:21.991 [main] [30mTRACE[m  - #############################################

16:16:21.992 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:21.992 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:21.992 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:21.992 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.992 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.992 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:21.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:21.992 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.992 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:21.993 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:21.993 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.993 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:21.993 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.993 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:21.993 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:21.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:21.993 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:21.994 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:21.994 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.994 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:21.994 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:21.994 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:21.994 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.994 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:21.994 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.994 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.994 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:21.994 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:21.995 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.995 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.995 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:21.995 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.995 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 2]
16:16:21.995 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:21.995 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:21.995 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:21.996 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:21.996 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:21.996 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:21.996 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:21.996 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:21.996 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:21.997 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:21.997 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:21.997 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 2]
16:16:21.997 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
16:16:21.997 [main] [30mTRACE[m  - ##################################################
16:16:21.997 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:21.997 [main] [30mTRACE[m  - ##################################################

16:16:21.997 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:22.810 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:22.810 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:22.810 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:22.810 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:22.810 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:23.012 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:23.013 [main] [30mTRACE[m  - ##############################################################
16:16:23.013 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:23.013 [main] [30mTRACE[m  - ##############################################################
16:16:23.013 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:23.013 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 3, 2]
16:16:23.013 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 3, 2]
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:23.013 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:23.013 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:23.014 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:23.014 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:23.014 [main] [30mTRACE[m  - ############################################################
16:16:23.014 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:23.014 [main] [30mTRACE[m  - ############################################################

16:16:23.015 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:23.015 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:23.015 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:23.015 [main] [30mTRACE[m  - ##############################################
16:16:23.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:23.015 [main] [30mTRACE[m  - ##############################################
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:23.015 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:23.015 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:23.015 [main] [30mTRACE[m  - ###############################################
16:16:23.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.016 [main] [30mTRACE[m  - ###############################################
16:16:23.016 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.016 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.016 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.016 [main] [30mTRACE[m  - #############################################
16:16:23.016 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.016 [main] [30mTRACE[m  - #############################################

16:16:23.016 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:23.016 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.016 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:23.017 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.017 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.017 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.017 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.017 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.018 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.018 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.018 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.018 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.018 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.019 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.019 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.019 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.019 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:23.019 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:23.019 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:23.019 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:23.020 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.020 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:23.020 [main] [30mTRACE[m  - ############################################
16:16:23.020 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:23.020 [main] [30mTRACE[m  - ############################################

16:16:23.020 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:23.020 [main] [30mTRACE[m  - ##########################
16:16:23.020 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:23.021 [main] [30mTRACE[m  - ##########################

16:16:23.021 [main] [30mTRACE[m  - ############################
16:16:23.021 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:23.021 [main] [30mTRACE[m  - ############################
16:16:23.021 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:23.021 [main] [30mTRACE[m  - #####################################
16:16:23.021 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:23.021 [main] [30mTRACE[m  - #####################################
16:16:23.021 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:23.021 [main] [30mTRACE[m  - ###########################################################
16:16:23.022 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:23.022 [main] [30mTRACE[m  - ###########################################################
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:23.022 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:23.022 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.022 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:23.022 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:23.022 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:23.023 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:23.023 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:23.023 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:23.023 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
16:16:23.023 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:23.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:23.023 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:23.023 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:23.023 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:23.023 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:23.023 [main] [30mTRACE[m  - ###############################################
16:16:23.023 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.023 [main] [30mTRACE[m  - ###############################################
16:16:23.024 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.024 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.024 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.024 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.024 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.024 [main] [30mTRACE[m  - #############################################
16:16:23.024 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.024 [main] [30mTRACE[m  - #############################################

16:16:23.024 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:23.024 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:23.024 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:23.024 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:23.025 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:23.025 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:23.025 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:23.025 [main] [30mTRACE[m  - #########################################################
16:16:23.025 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:23.025 [main] [30mTRACE[m  - #########################################################

16:16:23.025 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:23.025 [main] [30mTRACE[m  - ###################################
16:16:23.025 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:23.025 [main] [30mTRACE[m  - ###################################

16:16:23.025 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.025 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:23.025 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.026 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:23.026 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:23.026 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:23.026 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  3
16:16:23.026 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, C, C, F, F, C, B, E]
16:16:23.026 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, C, C, F, F, C, B, E]
16:16:23.026 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:23.026 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
16:16:23.027 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:23.027 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:23.030 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, false, false, false]
16:16:23.030 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
16:16:23.030 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:23.031 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################
16:16:23.031 [main] [30mTRACE[m  - ###########################################################################################################

16:16:23.031 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:23.031 [main] [36mDEBUG[m  - Incr√©mentation String() : ACCFFCBE
16:16:23.031 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ACCFFCBE
16:16:23.233 [main] [30mTRACE[m  - ####################################################
16:16:23.233 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:23.233 [main] [30mTRACE[m  - ####################################################
16:16:23.233 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, C, C, F, F, C, B, E]
16:16:23.234 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:23.234 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:23.234 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:23.234 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:23.234 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:23.234 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:23.234 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.234 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:23.235 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:23.235 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:23.235 [main] [30mTRACE[m  - ###############################################
16:16:23.235 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.235 [main] [30mTRACE[m  - ###############################################
16:16:23.235 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.236 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.236 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.236 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.236 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.236 [main] [30mTRACE[m  - #############################################
16:16:23.236 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.236 [main] [30mTRACE[m  - #############################################

16:16:23.236 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:23.236 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:23.237 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:23.237 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:23.237 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:23.237 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.237 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:23.237 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:23.237 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:23.237 [main] [30mTRACE[m  - ###############################################
16:16:23.237 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:23.237 [main] [30mTRACE[m  - ###############################################
16:16:23.237 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:23.237 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:23.237 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.237 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.237 [main] [36mDEBUG[m  - Index de la lettre
16:16:23.237 [main] [30mTRACE[m  - #############################################
16:16:23.237 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:23.237 [main] [30mTRACE[m  - #############################################

16:16:23.238 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, true, false, false, false, false, false]
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, true, false, false, false, false, false]
16:16:23.238 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 1, 0, 0, 0]
16:16:23.238 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:23.238 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.238 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.238 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:23.238 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:23.238 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.238 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.238 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 1]
16:16:23.239 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.239 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, true, false, false, true, false, false]
16:16:23.239 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.239 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 0, 1]
16:16:23.239 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.239 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 1]
16:16:23.239 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.239 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:23.239 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:23.239 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.239 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.239 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:23.240 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.240 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.240 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:23.240 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:23.240 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.240 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.240 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.240 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:23.240 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:23.240 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:23.241 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.241 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:23.241 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:23.241 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:23.241 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:23.241 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, false]
16:16:23.241 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:23.241 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:23.241 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:23.241 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 1, 1]
16:16:23.241 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:23.242 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:23.242 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:23.242 [main] [30mTRACE[m  - ##################################################
16:16:23.242 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:23.242 [main] [30mTRACE[m  - ##################################################

16:16:23.242 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:24.052 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:24.056 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:24.056 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:24.056 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:24.056 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:24.261 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:24.261 [main] [30mTRACE[m  - ##############################################################
16:16:24.261 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:24.261 [main] [30mTRACE[m  - ##############################################################
16:16:24.261 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
16:16:24.261 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:24.261 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:24.261 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
16:16:24.262 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:24.262 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:24.262 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
16:16:24.262 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
16:16:24.262 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
16:16:24.262 [main] [30mTRACE[m  - ############################################################
16:16:24.262 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:24.262 [main] [30mTRACE[m  - ############################################################

16:16:24.262 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:24.262 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
16:16:24.262 [main] [32mINFO [m  - IF - "‚â†" n'est pas apparu et que "=" a disparu
16:16:24.262 [main] [30mTRACE[m  - ##############################################
16:16:24.262 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_NegativeEquality()
16:16:24.263 [main] [30mTRACE[m  - ##############################################
16:16:24.263 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:24.263 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition : [A, C, C, F, F, C, B, E]
16:16:24.263 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:24.263 [main] [36mDEBUG[m  - R√©cup√©ration (int) Nouvelle position de remplacement : 1
16:16:24.264 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettre pr√©c√©dente : B
16:16:24.264 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.264 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:24.264 [main] [30mTRACE[m  - ###############################################
16:16:24.264 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.264 [main] [30mTRACE[m  - ###############################################
16:16:24.264 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.264 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.264 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.264 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.264 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.264 [main] [30mTRACE[m  - #############################################
16:16:24.264 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.264 [main] [30mTRACE[m  - #############################################

16:16:24.265 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre pr√©c√©dente : 1
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - ELSE - "i" = Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre est pr√©sente √† cette position = 'LETTRE PRECEDENTE'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.265 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
16:16:24.265 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:24.265 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.266 [main] [32mINFO [m  - Injection (boolean[]) Lettres de la combinaison trouv√©es
16:16:24.266 [main] [30mTRACE[m  - ####################################################
16:16:24.266 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:24.266 [main] [30mTRACE[m  - ####################################################
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.266 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:24.266 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:24.266 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:24.266 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.266 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.266 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:24.266 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.266 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.267 [main] [30mTRACE[m  - #############################################
16:16:24.267 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - #############################################

16:16:24.267 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:24.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:24.267 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.267 [main] [30mTRACE[m  - ###############################################
16:16:24.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.268 [main] [30mTRACE[m  - #############################################
16:16:24.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - #############################################

16:16:24.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:24.268 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:24.268 [main] [30mTRACE[m  - ###############################################
16:16:24.268 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - ###############################################
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.268 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.268 [main] [30mTRACE[m  - #############################################
16:16:24.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.268 [main] [30mTRACE[m  - #############################################

16:16:24.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:24.268 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:24.268 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:24.269 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:24.269 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:24.269 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:24.269 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 2]
16:16:24.269 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:24.269 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.269 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:24.270 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:24.270 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.270 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.270 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:24.270 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.270 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 2]
16:16:24.270 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
16:16:24.270 [main] [30mTRACE[m  - ##################################################
16:16:24.270 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:24.270 [main] [30mTRACE[m  - ##################################################

16:16:24.270 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:24.270 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:24.270 [main] [30mTRACE[m  - ############################################
16:16:24.270 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_NegativeEquality()
16:16:24.270 [main] [30mTRACE[m  - ############################################

16:16:24.270 [main] [32mINFO [m  - Lancement √©galit√© n√©gative
16:16:24.270 [main] [30mTRACE[m  - ##########################
16:16:24.270 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:24.270 [main] [30mTRACE[m  - ##########################

16:16:24.270 [main] [30mTRACE[m  - ############################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:24.270 [main] [30mTRACE[m  - ############################
16:16:24.270 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:24.270 [main] [30mTRACE[m  - #####################################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:24.270 [main] [30mTRACE[m  - #####################################
16:16:24.270 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:24.270 [main] [30mTRACE[m  - ###########################################################
16:16:24.270 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:24.271 [main] [30mTRACE[m  - ###########################################################
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:24.271 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, F, F, C, B, E]
16:16:24.271 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.271 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:24.271 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:24.271 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:24.271 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:24.271 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:24.271 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:24.271 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:24.271 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:24.272 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:24.272 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:24.272 [main] [30mTRACE[m  - ###############################################
16:16:24.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.272 [main] [30mTRACE[m  - ###############################################
16:16:24.272 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.272 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.272 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.272 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.272 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.272 [main] [30mTRACE[m  - #############################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.272 [main] [30mTRACE[m  - #############################################

16:16:24.272 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:24.272 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:24.272 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:24.272 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:24.272 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:24.272 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:24.272 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:24.272 [main] [30mTRACE[m  - #########################################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:24.272 [main] [30mTRACE[m  - #########################################################

16:16:24.272 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:24.272 [main] [30mTRACE[m  - ###################################
16:16:24.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:24.272 [main] [30mTRACE[m  - ###################################

16:16:24.272 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.273 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:24.273 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.273 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:24.273 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:24.273 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  4
16:16:24.273 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, D, F, F, C, B, E]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, D, F, F, C, B, E]
16:16:24.273 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:24.273 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, =]
16:16:24.273 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:24.276 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:24.276 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:24.276 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:24.276 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:24.276 [main] [30mTRACE[m  - ###########################################################################################################

16:16:24.276 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:24.276 [main] [36mDEBUG[m  - Incr√©mentation String() : ABDFFCBE
16:16:24.276 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABDFFCBE
16:16:24.481 [main] [30mTRACE[m  - ####################################################
16:16:24.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:24.482 [main] [30mTRACE[m  - ####################################################
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, D, F, F, C, B, E]
16:16:24.482 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:24.482 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:24.482 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:24.482 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.482 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:24.482 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:24.482 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.482 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:24.483 [main] [30mTRACE[m  - ###############################################
16:16:24.483 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.483 [main] [30mTRACE[m  - ###############################################
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.483 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.483 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.483 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.483 [main] [30mTRACE[m  - #############################################
16:16:24.483 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.483 [main] [30mTRACE[m  - #############################################

16:16:24.483 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:24.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.483 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:24.483 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:24.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:24.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.484 [main] [30mTRACE[m  - ###############################################
16:16:24.484 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:24.484 [main] [30mTRACE[m  - ###############################################
16:16:24.484 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:24.484 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:24.484 [main] [30mTRACE[m  - #############################################
16:16:24.484 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:24.484 [main] [30mTRACE[m  - #############################################

16:16:24.484 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:24.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:24.484 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:24.484 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.484 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:24.484 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.484 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
16:16:24.485 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 0, 0]
16:16:24.485 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:24.485 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
16:16:24.485 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:24.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 0, 1]
16:16:24.485 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:24.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
16:16:24.486 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 1, 0, 1]
16:16:24.486 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:24.486 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:24.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:24.486 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
16:16:24.487 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 0, 1]
16:16:24.487 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:24.487 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:24.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
16:16:24.487 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:24.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:24.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:24.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 1, 1]
16:16:24.487 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:24.487 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:24.487 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:24.487 [main] [30mTRACE[m  - ##################################################
16:16:24.487 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:24.488 [main] [30mTRACE[m  - ##################################################

16:16:24.488 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:25.300 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:25.300 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:25.300 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:25.300 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
16:16:25.300 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:25.503 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:25.503 [main] [30mTRACE[m  - ##############################################################
16:16:25.503 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:25.503 [main] [30mTRACE[m  - ##############################################################
16:16:25.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
16:16:25.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:25.504 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 2
16:16:25.504 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:25.504 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:25.504 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:25.504 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:25.504 [main] [30mTRACE[m  - ############################################################
16:16:25.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:25.504 [main] [30mTRACE[m  - ############################################################

16:16:25.504 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:25.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:25.504 [main] [30mTRACE[m  - ##########################
16:16:25.504 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:25.504 [main] [30mTRACE[m  - ##########################

16:16:25.504 [main] [30mTRACE[m  - ############################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:25.504 [main] [30mTRACE[m  - ############################
16:16:25.504 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:25.504 [main] [30mTRACE[m  - #####################################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:25.504 [main] [30mTRACE[m  - #####################################
16:16:25.504 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:25.504 [main] [30mTRACE[m  - ###########################################################
16:16:25.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:25.504 [main] [30mTRACE[m  - ###########################################################
16:16:25.504 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:25.505 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:25.505 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, D, F, F, C, B, E]
16:16:25.505 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:25.505 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:25.505 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:25.505 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:25.505 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:25.505 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:25.505 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:25.505 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:25.505 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:25.505 [main] [30mTRACE[m  - ###############################################
16:16:25.505 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.505 [main] [30mTRACE[m  - ###############################################
16:16:25.505 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.506 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.506 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.506 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.506 [main] [30mTRACE[m  - #############################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.506 [main] [30mTRACE[m  - #############################################

16:16:25.506 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:25.506 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:25.506 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:25.506 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:25.506 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:25.506 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:25.506 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:25.506 [main] [30mTRACE[m  - #########################################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:25.506 [main] [30mTRACE[m  - #########################################################

16:16:25.506 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:25.506 [main] [30mTRACE[m  - ###################################
16:16:25.506 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:25.507 [main] [30mTRACE[m  - ###################################

16:16:25.507 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.507 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:25.507 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.507 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:25.507 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:25.507 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  5
16:16:25.507 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, E, F, F, C, B, E]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, E, F, F, C, B, E]
16:16:25.507 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 3, 2]
16:16:25.507 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 5, 1]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:25.507 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:25.509 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:25.509 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:25.509 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:25.509 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:25.509 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.509 [main] [30mTRACE[m  - ###########################################################################################################
16:16:25.510 [main] [30mTRACE[m  - ###########################################################################################################

16:16:25.510 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:25.510 [main] [36mDEBUG[m  - Incr√©mentation String() : ABEFFCBE
16:16:25.510 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABEFFCBE
16:16:25.712 [main] [30mTRACE[m  - ####################################################
16:16:25.712 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:25.712 [main] [30mTRACE[m  - ####################################################
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, E, F, F, C, B, E]
16:16:25.713 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:25.713 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:25.713 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:25.713 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:25.713 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:25.713 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.713 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:25.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:25.713 [main] [30mTRACE[m  - ###############################################
16:16:25.713 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.713 [main] [30mTRACE[m  - ###############################################
16:16:25.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.714 [main] [30mTRACE[m  - #############################################
16:16:25.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - #############################################

16:16:25.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:25.714 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:25.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:25.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:25.714 [main] [30mTRACE[m  - ###############################################
16:16:25.714 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - ###############################################
16:16:25.714 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:25.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:25.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:25.714 [main] [30mTRACE[m  - #############################################
16:16:25.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:25.714 [main] [30mTRACE[m  - #############################################

16:16:25.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:25.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:25.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:25.715 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, false, false]
16:16:25.715 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 0]
16:16:25.715 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:25.715 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, true, false, false]
16:16:25.715 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:25.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 1]
16:16:25.716 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, false]
16:16:25.716 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 1, 1]
16:16:25.716 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.716 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:25.716 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:25.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:25.716 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:25.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:25.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:25.716 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:25.717 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:25.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:25.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:25.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:25.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:25.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:25.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:25.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 4, 2]
16:16:25.717 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:25.717 [main] [30mTRACE[m  - ##################################################
16:16:25.717 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:25.717 [main] [30mTRACE[m  - ##################################################

16:16:25.717 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:26.530 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:26.530 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:26.531 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:26.531 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 6
16:16:26.531 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:26.734 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:26.734 [main] [30mTRACE[m  - ##############################################################
16:16:26.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:26.734 [main] [30mTRACE[m  - ##############################################################
16:16:26.734 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:26.734 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:26.734 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:26.734 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:26.734 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:26.735 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:26.735 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:26.735 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:26.736 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:26.736 [main] [30mTRACE[m  - ############################################################
16:16:26.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:26.736 [main] [30mTRACE[m  - ############################################################

16:16:26.736 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:26.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:26.736 [main] [30mTRACE[m  - ##########################
16:16:26.736 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:26.736 [main] [30mTRACE[m  - ##########################

16:16:26.736 [main] [30mTRACE[m  - ############################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:26.736 [main] [30mTRACE[m  - ############################
16:16:26.736 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:26.736 [main] [30mTRACE[m  - #####################################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:26.736 [main] [30mTRACE[m  - #####################################
16:16:26.736 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:26.736 [main] [30mTRACE[m  - ###########################################################
16:16:26.736 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:26.736 [main] [30mTRACE[m  - ###########################################################
16:16:26.736 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:26.737 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:26.737 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, E, F, F, C, B, E]
16:16:26.737 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:26.737 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:26.737 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:26.737 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:26.737 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:26.737 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:26.737 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:26.737 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:26.737 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:26.738 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:26.738 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:26.738 [main] [30mTRACE[m  - ###############################################
16:16:26.738 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.738 [main] [30mTRACE[m  - ###############################################
16:16:26.738 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.738 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.738 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.738 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.738 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.738 [main] [30mTRACE[m  - #############################################
16:16:26.738 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.738 [main] [30mTRACE[m  - #############################################

16:16:26.738 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:26.738 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:26.738 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:26.738 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:26.738 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:26.738 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:26.738 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:26.738 [main] [30mTRACE[m  - #########################################################
16:16:26.738 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:26.739 [main] [30mTRACE[m  - #########################################################

16:16:26.739 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:26.739 [main] [30mTRACE[m  - ###################################
16:16:26.739 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:26.739 [main] [30mTRACE[m  - ###################################

16:16:26.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.739 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:26.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.739 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:26.739 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:26.739 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:26.739 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  6
16:16:26.739 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, F, F, F, C, B, E]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, F, F, F, C, B, E]
16:16:26.740 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 5, 1]
16:16:26.740 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 4, 2]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, ‚â†]
16:16:26.740 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:26.743 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:26.743 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:26.743 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:26.743 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################
16:16:26.743 [main] [30mTRACE[m  - ###########################################################################################################

16:16:26.743 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:26.744 [main] [36mDEBUG[m  - Incr√©mentation String() : ABFFFCBE
16:16:26.744 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABFFFCBE
16:16:26.948 [main] [30mTRACE[m  - ####################################################
16:16:26.949 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:26.949 [main] [30mTRACE[m  - ####################################################
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, F, F, F, C, B, E]
16:16:26.949 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:26.949 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:26.949 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:26.949 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:26.949 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:26.949 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:26.949 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.950 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:26.950 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:26.950 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:26.950 [main] [30mTRACE[m  - ###############################################
16:16:26.950 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.950 [main] [30mTRACE[m  - ###############################################
16:16:26.950 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.950 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.950 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.950 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.950 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.950 [main] [30mTRACE[m  - #############################################
16:16:26.950 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.950 [main] [30mTRACE[m  - #############################################

16:16:26.950 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:26.950 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:26.950 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:26.950 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:26.950 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:26.951 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:26.951 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:26.951 [main] [30mTRACE[m  - ###############################################
16:16:26.951 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:26.951 [main] [30mTRACE[m  - ###############################################
16:16:26.951 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:26.951 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:26.951 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.951 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.951 [main] [36mDEBUG[m  - Index de la lettre
16:16:26.951 [main] [30mTRACE[m  - #############################################
16:16:26.951 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:26.951 [main] [30mTRACE[m  - #############################################

16:16:26.951 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:26.951 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:26.951 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:26.951 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:26.951 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:26.951 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.951 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
16:16:26.952 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.952 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 0, 1]
16:16:26.952 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.952 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.952 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.952 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:26.952 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.952 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:26.952 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:26.952 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.953 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:26.953 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:26.953 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.953 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
16:16:26.953 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:26.953 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.953 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 0, 1]
16:16:26.953 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.953 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
16:16:26.953 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:26.953 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
16:16:26.954 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 0, 1]
16:16:26.954 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.954 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:26.954 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:26.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, false, true]
16:16:26.954 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:26.954 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:26.954 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:26.954 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 0, 1, 1]
16:16:26.955 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:26.955 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
16:16:26.955 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:26.955 [main] [30mTRACE[m  - ##################################################
16:16:26.955 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:26.955 [main] [30mTRACE[m  - ##################################################

16:16:26.955 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:27.768 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:27.768 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:27.768 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:27.768 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 7
16:16:27.768 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:27.973 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:27.973 [main] [30mTRACE[m  - ##############################################################
16:16:27.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:27.973 [main] [30mTRACE[m  - ##############################################################
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:27.974 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:27.974 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:27.974 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:27.974 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:27.974 [main] [30mTRACE[m  - ############################################################
16:16:27.974 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:27.974 [main] [30mTRACE[m  - ############################################################

16:16:27.974 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:27.974 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:27.974 [main] [30mTRACE[m  - ##########################
16:16:27.974 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:27.974 [main] [30mTRACE[m  - ##########################

16:16:27.974 [main] [30mTRACE[m  - ############################
16:16:27.974 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:27.974 [main] [30mTRACE[m  - ############################
16:16:27.974 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:27.974 [main] [30mTRACE[m  - #####################################
16:16:27.974 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:27.975 [main] [30mTRACE[m  - #####################################
16:16:27.975 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:27.975 [main] [30mTRACE[m  - ###########################################################
16:16:27.975 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:27.975 [main] [30mTRACE[m  - ###########################################################
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:27.975 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, F, F, F, C, B, E]
16:16:27.975 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, false, false]
16:16:27.975 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:27.975 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:27.975 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:27.975 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:27.975 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:27.975 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:27.975 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:27.975 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:27.975 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:27.975 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
16:16:27.976 [main] [30mTRACE[m  - ###############################################
16:16:27.976 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:27.976 [main] [30mTRACE[m  - ###############################################
16:16:27.976 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:27.976 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:27.976 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:27.976 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:27.976 [main] [36mDEBUG[m  - Index de la lettre
16:16:27.976 [main] [30mTRACE[m  - #############################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:27.976 [main] [30mTRACE[m  - #############################################

16:16:27.976 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:27.976 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:27.976 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:27.976 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:27.976 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:27.976 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:27.976 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:27.976 [main] [30mTRACE[m  - #########################################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:27.976 [main] [30mTRACE[m  - #########################################################

16:16:27.976 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:27.976 [main] [30mTRACE[m  - ###################################
16:16:27.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:27.976 [main] [30mTRACE[m  - ###################################

16:16:27.976 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.976 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:27.976 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.976 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:27.976 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:27.976 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:27.976 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  7
16:16:27.977 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, A, F, F, C, B, E]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, A, F, F, C, B, E]
16:16:27.977 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 4, 2]
16:16:27.977 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 4, 2]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:27.977 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:27.978 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, false, false]
16:16:27.978 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:27.978 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
16:16:27.978 [main] [36mDEBUG[m  - ch_NewLetter :                                A
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################
16:16:27.978 [main] [30mTRACE[m  - ###########################################################################################################

16:16:27.978 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:27.978 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAFFCBE
16:16:27.978 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABAFFCBE
16:16:28.179 [main] [30mTRACE[m  - ####################################################
16:16:28.179 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:28.179 [main] [30mTRACE[m  - ####################################################
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, F, F, C, B, E]
16:16:28.180 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:28.180 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:28.180 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:28.180 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:28.180 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.180 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:28.180 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:28.180 [main] [30mTRACE[m  - ###############################################
16:16:28.180 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:28.180 [main] [30mTRACE[m  - ###############################################
16:16:28.180 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:28.180 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.181 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.181 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.181 [main] [36mDEBUG[m  - Index de la lettre
16:16:28.181 [main] [30mTRACE[m  - #############################################
16:16:28.181 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:28.181 [main] [30mTRACE[m  - #############################################

16:16:28.181 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:28.181 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:28.181 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:28.181 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:28.181 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:28.181 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:28.181 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:28.181 [main] [30mTRACE[m  - ###############################################
16:16:28.181 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:28.181 [main] [30mTRACE[m  - ###############################################
16:16:28.181 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:28.181 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:28.181 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.182 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.182 [main] [36mDEBUG[m  - Index de la lettre
16:16:28.182 [main] [30mTRACE[m  - #############################################
16:16:28.182 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:28.182 [main] [30mTRACE[m  - #############################################

16:16:28.182 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:28.182 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:28.182 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.182 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.182 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.182 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:28.182 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:28.182 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:28.183 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.183 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:28.183 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
16:16:28.183 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.183 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
16:16:28.183 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.183 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
16:16:28.183 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.183 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:28.183 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:28.183 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:28.184 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
16:16:28.184 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
16:16:28.184 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 1]
16:16:28.184 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.184 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:28.184 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.184 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:28.184 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.184 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.184 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
16:16:28.184 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 1]
16:16:28.185 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.185 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:28.185 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:28.185 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:28.185 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, true, true]
16:16:28.185 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:28.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:28.185 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:28.185 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 1]
16:16:28.185 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:28.185 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:28.186 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:28.186 [main] [30mTRACE[m  - ##################################################
16:16:28.186 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:28.186 [main] [30mTRACE[m  - ##################################################

16:16:28.186 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:28.997 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:28.997 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:28.997 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:28.998 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 8
16:16:28.998 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:29.201 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:29.201 [main] [30mTRACE[m  - ##############################################################
16:16:29.201 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:29.201 [main] [30mTRACE[m  - ##############################################################
16:16:29.201 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:29.201 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:29.201 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
16:16:29.201 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:29.202 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
16:16:29.202 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:29.202 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
16:16:29.202 [main] [30mTRACE[m  - ############################################################
16:16:29.202 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:29.202 [main] [30mTRACE[m  - ############################################################

16:16:29.202 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:29.202 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:29.202 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
16:16:29.202 [main] [30mTRACE[m  - ################################################
16:16:29.202 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
16:16:29.202 [main] [30mTRACE[m  - ################################################
16:16:29.203 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:29.203 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 2
16:16:29.203 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : A
16:16:29.203 [main] [30mTRACE[m  - ###############################################
16:16:29.203 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.203 [main] [30mTRACE[m  - ###############################################
16:16:29.203 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.203 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.203 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.203 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.203 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.203 [main] [30mTRACE[m  - #############################################
16:16:29.203 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.203 [main] [30mTRACE[m  - #############################################

16:16:29.204 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 0
16:16:29.204 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
16:16:29.204 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
16:16:29.206 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:29.206 [main] [30mTRACE[m  - ##############################################
16:16:29.206 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
16:16:29.206 [main] [30mTRACE[m  - ##############################################
16:16:29.206 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
16:16:29.207 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:29.207 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.208 [main] [36mDEBUG[m  - (int) Nombre de tours : 5
16:16:29.208 [main] [30mTRACE[m  - ############################################
16:16:29.208 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
16:16:29.208 [main] [30mTRACE[m  - ############################################

16:16:29.208 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 5
16:16:29.209 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
16:16:29.209 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:29.209 [main] [30mTRACE[m  - ########################################################
16:16:29.209 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:29.209 [main] [30mTRACE[m  - ########################################################
16:16:29.209 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:29.210 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:29.210 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
16:16:29.210 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:29.210 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:29.210 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
16:16:29.210 [main] [30mTRACE[m  - ######################################################
16:16:29.210 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:29.211 [main] [30mTRACE[m  - ######################################################

16:16:29.211 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
16:16:29.211 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:29.211 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, F, F, C, B, E]
16:16:29.212 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:29.212 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:29.212 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAFCBE
16:16:29.213 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAFCBE
16:16:29.416 [main] [30mTRACE[m  - ####################################################
16:16:29.416 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:29.416 [main] [30mTRACE[m  - ####################################################
16:16:29.416 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.416 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:29.417 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:29.417 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:29.417 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:29.417 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:29.417 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:29.417 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.417 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:29.417 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:29.417 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.418 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.418 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.418 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.418 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.418 [main] [30mTRACE[m  - #############################################
16:16:29.418 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - #############################################

16:16:29.418 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:29.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:29.418 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:29.418 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:29.418 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:29.418 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:29.418 [main] [30mTRACE[m  - ###############################################
16:16:29.418 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:29.418 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.419 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.419 [main] [36mDEBUG[m  - Index de la lettre
16:16:29.419 [main] [30mTRACE[m  - #############################################
16:16:29.419 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:29.419 [main] [30mTRACE[m  - #############################################

16:16:29.419 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:29.419 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:29.419 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.419 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:29.419 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.419 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:29.419 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:29.420 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:29.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.420 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:29.420 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:29.420 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
16:16:29.420 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
16:16:29.420 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
16:16:29.420 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 1]
16:16:29.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
16:16:29.421 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 1]
16:16:29.421 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.421 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 1]
16:16:29.421 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.421 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:29.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:29.421 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
16:16:29.422 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 1]
16:16:29.422 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 1]
16:16:29.422 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:29.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, true, true, true]
16:16:29.422 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:29.422 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:29.422 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:29.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 1]
16:16:29.422 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:29.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 5, 1]
16:16:29.422 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 5, 1]
16:16:29.423 [main] [30mTRACE[m  - ##################################################
16:16:29.423 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:29.423 [main] [30mTRACE[m  - ##################################################

16:16:29.423 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:30.234 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:30.234 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:30.234 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:30.235 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 9
16:16:30.235 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:30.438 [main] [30mTRACE[m  - ##############################################################
16:16:30.438 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:30.438 [main] [30mTRACE[m  - ##############################################################
16:16:30.438 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 5, 1]
16:16:30.438 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:30.438 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:30.439 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:30.439 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:30.439 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:30.439 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:30.439 [main] [30mTRACE[m  - ############################################################
16:16:30.439 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:30.439 [main] [30mTRACE[m  - ############################################################

16:16:30.439 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:30.440 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:30.440 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:30.440 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:30.440 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:30.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:30.442 [main] [30mTRACE[m  - ########################################################
16:16:30.442 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:30.442 [main] [30mTRACE[m  - ########################################################
16:16:30.442 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:30.442 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:30.442 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
16:16:30.442 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:30.442 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:30.442 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
16:16:30.442 [main] [30mTRACE[m  - ######################################################
16:16:30.442 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:30.442 [main] [30mTRACE[m  - ######################################################

16:16:30.442 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
16:16:30.442 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:30.442 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, F, C, B, E]
16:16:30.442 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:30.442 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:30.443 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAACBE
16:16:30.443 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAACBE
16:16:30.648 [main] [30mTRACE[m  - ####################################################
16:16:30.648 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:30.648 [main] [30mTRACE[m  - ####################################################
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:30.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:30.648 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:30.648 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:30.648 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:30.649 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:30.649 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:30.649 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.649 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:30.649 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.649 [main] [30mTRACE[m  - ###############################################
16:16:30.649 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:30.649 [main] [30mTRACE[m  - ###############################################
16:16:30.649 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:30.649 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.649 [main] [36mDEBUG[m  - Index de la lettre
16:16:30.649 [main] [30mTRACE[m  - #############################################
16:16:30.649 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:30.649 [main] [30mTRACE[m  - #############################################

16:16:30.649 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:30.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:30.650 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:30.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:30.650 [main] [30mTRACE[m  - ###############################################
16:16:30.650 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:30.650 [main] [30mTRACE[m  - ###############################################
16:16:30.650 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:30.650 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:30.650 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.650 [main] [36mDEBUG[m  - Index de la lettre
16:16:30.650 [main] [30mTRACE[m  - #############################################
16:16:30.650 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:30.650 [main] [30mTRACE[m  - #############################################

16:16:30.650 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:30.650 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:30.651 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:30.651 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.651 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:30.651 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:30.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:30.651 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.651 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:30.652 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:30.652 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.652 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:30.652 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.652 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:30.652 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:30.652 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.652 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:30.652 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.652 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.652 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:30.652 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 1, 0, 0, 0]
16:16:30.653 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.653 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
16:16:30.653 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:30.653 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.653 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:30.653 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:30.653 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.653 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 0, 0]
16:16:30.653 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.653 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
16:16:30.654 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:30.654 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:30.654 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:30.654 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:30.654 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:30.654 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, true, false, true, true]
16:16:30.654 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:30.654 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:30.654 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:30.654 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 1, 0, 1, 0]
16:16:30.654 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:30.654 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
16:16:30.654 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
16:16:30.654 [main] [30mTRACE[m  - ##################################################
16:16:30.654 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:30.654 [main] [30mTRACE[m  - ##################################################

16:16:30.654 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:31.462 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:31.462 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:31.463 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:31.463 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 10
16:16:31.463 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:31.666 [main] [30mTRACE[m  - ##############################################################
16:16:31.666 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:31.667 [main] [30mTRACE[m  - ##############################################################
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 5, 1]
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
16:16:31.667 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:31.667 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:31.667 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:31.667 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:31.667 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:31.667 [main] [30mTRACE[m  - ############################################################
16:16:31.667 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:31.667 [main] [30mTRACE[m  - ############################################################

16:16:31.667 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:31.667 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:31.667 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:31.667 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:31.667 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:31.670 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:31.670 [main] [30mTRACE[m  - ########################################################
16:16:31.670 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:31.670 [main] [30mTRACE[m  - ########################################################
16:16:31.670 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:31.670 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:31.670 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
16:16:31.670 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:31.670 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:31.670 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
16:16:31.670 [main] [30mTRACE[m  - ######################################################
16:16:31.670 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:31.670 [main] [30mTRACE[m  - ######################################################

16:16:31.670 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
16:16:31.671 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:31.671 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, C, B, E]
16:16:31.671 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:31.671 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:31.671 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAABE
16:16:31.671 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAAABE
16:16:31.873 [main] [30mTRACE[m  - ####################################################
16:16:31.873 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:31.874 [main] [30mTRACE[m  - ####################################################
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:31.874 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:31.874 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:31.874 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:31.874 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:31.874 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:31.874 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:31.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:31.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:31.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.875 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.875 [main] [36mDEBUG[m  - Index de la lettre
16:16:31.875 [main] [30mTRACE[m  - #############################################
16:16:31.875 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - #############################################

16:16:31.875 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:31.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:31.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:31.875 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:31.875 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:31.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:31.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:31.875 [main] [30mTRACE[m  - ###############################################
16:16:31.876 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:31.876 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.876 [main] [36mDEBUG[m  - Index de la lettre
16:16:31.876 [main] [30mTRACE[m  - #############################################
16:16:31.876 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:31.876 [main] [30mTRACE[m  - #############################################

16:16:31.876 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:31.876 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:31.876 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.876 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:31.876 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:31.877 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
16:16:31.877 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.877 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
16:16:31.877 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
16:16:31.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:31.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.877 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
16:16:31.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.878 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
16:16:31.878 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.878 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:31.878 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:31.878 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
16:16:31.878 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.878 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:31.878 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:31.878 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.878 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:31.879 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:31.879 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.879 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
16:16:31.879 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:31.879 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:31.879 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:31.879 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:31.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:31.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:31.879 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:31.879 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
16:16:31.879 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
16:16:31.880 [main] [30mTRACE[m  - ##################################################
16:16:31.880 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:31.880 [main] [30mTRACE[m  - ##################################################

16:16:31.880 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:32.690 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:32.690 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:32.690 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:32.690 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 11
16:16:32.690 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:32.893 [main] [30mTRACE[m  - ##############################################################
16:16:32.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:32.893 [main] [30mTRACE[m  - ##############################################################
16:16:32.893 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
16:16:32.893 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
16:16:32.893 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
16:16:32.893 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:32.893 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
16:16:32.893 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:32.894 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
16:16:32.894 [main] [30mTRACE[m  - ############################################################
16:16:32.894 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:32.894 [main] [30mTRACE[m  - ############################################################

16:16:32.894 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:32.894 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
16:16:32.894 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:32.894 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:32.894 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:32.895 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:32.896 [main] [30mTRACE[m  - ########################################################
16:16:32.896 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:32.896 [main] [30mTRACE[m  - ########################################################
16:16:32.896 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:32.896 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:32.896 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 5
16:16:32.896 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:32.896 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:32.896 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 6
16:16:32.896 [main] [30mTRACE[m  - ######################################################
16:16:32.896 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:32.896 [main] [30mTRACE[m  - ######################################################

16:16:32.896 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 6
16:16:32.896 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:32.896 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, B, E]
16:16:32.896 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:32.896 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:32.896 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAAAE
16:16:32.896 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABAAAAAE
16:16:33.097 [main] [30mTRACE[m  - ####################################################
16:16:33.097 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:33.097 [main] [30mTRACE[m  - ####################################################
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:33.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:33.098 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:33.098 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:33.098 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:33.098 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, false, false]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:33.098 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:33.098 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.098 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:33.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.098 [main] [30mTRACE[m  - ###############################################
16:16:33.098 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.098 [main] [30mTRACE[m  - ###############################################
16:16:33.098 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.098 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.098 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.098 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.099 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.099 [main] [30mTRACE[m  - #############################################
16:16:33.099 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.099 [main] [30mTRACE[m  - #############################################

16:16:33.099 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:33.099 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:33.099 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:33.099 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:33.099 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:33.099 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:33.099 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:33.099 [main] [30mTRACE[m  - ###############################################
16:16:33.099 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.099 [main] [30mTRACE[m  - ###############################################
16:16:33.099 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.100 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.100 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.100 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.100 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.100 [main] [30mTRACE[m  - #############################################
16:16:33.100 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.100 [main] [30mTRACE[m  - #############################################

16:16:33.100 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:33.100 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:33.100 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:33.100 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:33.101 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.101 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:33.101 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:33.101 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
16:16:33.101 [main] [30mTRACE[m  - ###############################################
16:16:33.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:33.101 [main] [30mTRACE[m  - ###############################################
16:16:33.101 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:33.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.101 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.101 [main] [36mDEBUG[m  - Index de la lettre
16:16:33.101 [main] [30mTRACE[m  - #############################################
16:16:33.101 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:33.101 [main] [30mTRACE[m  - #############################################

16:16:33.101 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
16:16:33.101 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:33.101 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:33.101 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:33.101 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:33.101 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:33.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 1]
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:33.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.102 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 2]
16:16:33.102 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 3]
16:16:33.103 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 4]
16:16:33.103 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:33.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:33.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, false]
16:16:33.103 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:33.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:33.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:33.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 0]
16:16:33.103 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:33.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 4]
16:16:33.103 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 1, 4]
16:16:33.103 [main] [30mTRACE[m  - ##################################################
16:16:33.104 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:33.104 [main] [30mTRACE[m  - ##################################################

16:16:33.104 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:33.914 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:33.915 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:33.915 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:33.915 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 12
16:16:33.915 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:34.115 [main] [30mTRACE[m  - ##############################################################
16:16:34.116 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:34.116 [main] [30mTRACE[m  - ##############################################################
16:16:34.116 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
16:16:34.116 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 1, 4]
16:16:34.116 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 1, 4]
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
16:16:34.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:34.116 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
16:16:34.117 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:34.117 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:34.117 [main] [30mTRACE[m  - ############################################################
16:16:34.117 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:34.117 [main] [30mTRACE[m  - ############################################################

16:16:34.117 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:34.117 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:34.117 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:34.117 [main] [30mTRACE[m  - ##############################################
16:16:34.117 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:34.117 [main] [30mTRACE[m  - ##############################################
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:34.117 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:34.117 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:34.118 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:34.118 [main] [30mTRACE[m  - ###############################################
16:16:34.118 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.118 [main] [30mTRACE[m  - ###############################################
16:16:34.118 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.118 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.118 [main] [30mTRACE[m  - #############################################
16:16:34.118 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.118 [main] [30mTRACE[m  - #############################################

16:16:34.118 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.118 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.118 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.118 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.119 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:34.119 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:34.119 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:34.119 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:34.119 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.119 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:34.119 [main] [30mTRACE[m  - ############################################
16:16:34.119 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:34.119 [main] [30mTRACE[m  - ############################################

16:16:34.119 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:34.119 [main] [30mTRACE[m  - ##############################################
16:16:34.119 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
16:16:34.119 [main] [30mTRACE[m  - ##############################################

16:16:34.120 [main] [32mINFO [m  - Lancement diff√©rence positive
16:16:34.120 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
16:16:34.120 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
16:16:34.120 [main] [30mTRACE[m  - ##########################
16:16:34.120 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:34.120 [main] [30mTRACE[m  - ##########################

16:16:34.120 [main] [30mTRACE[m  - ############################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:34.120 [main] [30mTRACE[m  - ############################
16:16:34.120 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:34.120 [main] [30mTRACE[m  - #####################################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:34.120 [main] [30mTRACE[m  - #####################################
16:16:34.120 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:34.120 [main] [30mTRACE[m  - ###########################################################
16:16:34.120 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:34.120 [main] [30mTRACE[m  - ###########################################################
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:34.120 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, E]
16:16:34.120 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.120 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:34.120 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:34.121 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:34.121 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:34.121 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:34.121 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
16:16:34.121 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:34.121 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:34.121 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:34.121 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:34.121 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:34.121 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
16:16:34.121 [main] [30mTRACE[m  - ###############################################
16:16:34.121 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.121 [main] [30mTRACE[m  - ###############################################
16:16:34.121 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.121 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.121 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.122 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.122 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.122 [main] [30mTRACE[m  - #############################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.122 [main] [30mTRACE[m  - #############################################

16:16:34.122 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:34.122 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:34.122 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:34.122 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:34.122 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:34.122 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:34.122 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:34.122 [main] [30mTRACE[m  - #########################################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:34.122 [main] [30mTRACE[m  - #########################################################

16:16:34.122 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:34.122 [main] [30mTRACE[m  - ###################################
16:16:34.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:34.122 [main] [30mTRACE[m  - ###################################

16:16:34.123 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.123 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:34.123 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.123 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:34.123 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:34.123 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  12
16:16:34.123 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, B, A, A, A, A, E]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, B, A, A, A, A, E]
16:16:34.123 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
16:16:34.123 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 1, 4]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:34.123 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:34.125 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, false]
16:16:34.125 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:34.125 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
16:16:34.126 [main] [36mDEBUG[m  - ch_NewLetter :                                B
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################
16:16:34.126 [main] [30mTRACE[m  - ###########################################################################################################

16:16:34.126 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:34.126 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBAAAAE
16:16:34.126 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABBAAAAE
16:16:34.327 [main] [30mTRACE[m  - ####################################################
16:16:34.327 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:34.327 [main] [30mTRACE[m  - ####################################################
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, E]
16:16:34.327 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:34.327 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:34.327 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:34.327 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:34.328 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.328 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.328 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.328 [main] [30mTRACE[m  - #############################################
16:16:34.328 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - #############################################

16:16:34.328 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:34.328 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.328 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - ###############################################
16:16:34.328 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.328 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.328 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.328 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.328 [main] [30mTRACE[m  - #############################################
16:16:34.328 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.328 [main] [30mTRACE[m  - #############################################

16:16:34.328 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:34.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:34.329 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:34.329 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.329 [main] [30mTRACE[m  - ###############################################
16:16:34.329 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:34.329 [main] [30mTRACE[m  - ###############################################
16:16:34.329 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:34.329 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.329 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.329 [main] [36mDEBUG[m  - Index de la lettre
16:16:34.329 [main] [30mTRACE[m  - #############################################
16:16:34.329 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:34.329 [main] [30mTRACE[m  - #############################################

16:16:34.329 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:34.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:34.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:34.329 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.329 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:34.329 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.329 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:34.330 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.330 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:34.330 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.330 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.330 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:34.330 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.330 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:34.330 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:34.330 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.331 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:34.331 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:34.331 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:34.331 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:34.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:34.331 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:34.331 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:34.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:34.331 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:34.331 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:34.331 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:34.331 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:34.331 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:34.331 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:34.331 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:34.331 [main] [30mTRACE[m  - ##################################################
16:16:34.331 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:34.331 [main] [30mTRACE[m  - ##################################################

16:16:34.331 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:35.145 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:35.149 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:35.149 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:35.149 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 13
16:16:35.149 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:35.354 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:35.354 [main] [30mTRACE[m  - ##############################################################
16:16:35.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:35.354 [main] [30mTRACE[m  - ##############################################################
16:16:35.354 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 1, 4]
16:16:35.354 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:35.354 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
16:16:35.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:35.354 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
16:16:35.354 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:35.355 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
16:16:35.355 [main] [30mTRACE[m  - ############################################################
16:16:35.355 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:35.355 [main] [30mTRACE[m  - ############################################################

16:16:35.355 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
16:16:35.355 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
16:16:35.355 [main] [30mTRACE[m  - ################################################
16:16:35.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
16:16:35.355 [main] [30mTRACE[m  - ################################################
16:16:35.355 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 2
16:16:35.355 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : B
16:16:35.355 [main] [30mTRACE[m  - ###############################################
16:16:35.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.355 [main] [30mTRACE[m  - ###############################################
16:16:35.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.355 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.355 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.355 [main] [30mTRACE[m  - #############################################
16:16:35.355 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.355 [main] [30mTRACE[m  - #############################################

16:16:35.355 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 1
16:16:35.356 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
16:16:35.356 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
16:16:35.356 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:35.357 [main] [30mTRACE[m  - ##############################################
16:16:35.357 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
16:16:35.357 [main] [30mTRACE[m  - ##############################################
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
16:16:35.357 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:35.357 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.357 [main] [36mDEBUG[m  - (int) Nombre de tours : 4
16:16:35.357 [main] [30mTRACE[m  - ############################################
16:16:35.357 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
16:16:35.357 [main] [30mTRACE[m  - ############################################

16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 4
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
16:16:35.357 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
16:16:35.357 [main] [30mTRACE[m  - ########################################################
16:16:35.357 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:35.357 [main] [30mTRACE[m  - ########################################################
16:16:35.357 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:35.357 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:35.357 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
16:16:35.357 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:35.357 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:35.357 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
16:16:35.357 [main] [30mTRACE[m  - ######################################################
16:16:35.357 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:35.358 [main] [30mTRACE[m  - ######################################################

16:16:35.358 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
16:16:35.358 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:35.358 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, E]
16:16:35.358 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:35.358 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:35.358 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBAAAE
16:16:35.358 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBAAAE
16:16:35.563 [main] [30mTRACE[m  - ####################################################
16:16:35.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:35.563 [main] [30mTRACE[m  - ####################################################
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:35.564 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:35.564 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:35.564 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:35.564 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:35.564 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:35.564 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:35.565 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.565 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:35.565 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.565 [main] [30mTRACE[m  - ###############################################
16:16:35.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.565 [main] [30mTRACE[m  - ###############################################
16:16:35.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.565 [main] [30mTRACE[m  - #############################################
16:16:35.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.565 [main] [30mTRACE[m  - #############################################

16:16:35.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:35.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:35.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:35.565 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:35.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.566 [main] [30mTRACE[m  - ###############################################
16:16:35.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.566 [main] [30mTRACE[m  - ###############################################
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.566 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.566 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.566 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.566 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.566 [main] [30mTRACE[m  - #############################################
16:16:35.566 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.566 [main] [30mTRACE[m  - #############################################

16:16:35.566 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:35.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:35.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:35.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:35.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:35.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.567 [main] [30mTRACE[m  - ###############################################
16:16:35.567 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:35.567 [main] [30mTRACE[m  - ###############################################
16:16:35.567 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:35.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:35.567 [main] [30mTRACE[m  - #############################################
16:16:35.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:35.567 [main] [30mTRACE[m  - #############################################

16:16:35.567 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:35.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:35.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:35.567 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:35.567 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.567 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:35.567 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.567 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.567 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:35.568 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.568 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:35.568 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:35.568 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:35.568 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:35.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:35.569 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.569 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.569 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:35.569 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:35.569 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:35.569 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:35.569 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:35.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:35.569 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:35.569 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:35.570 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:35.570 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:35.570 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:35.570 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:35.570 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:35.570 [main] [30mTRACE[m  - ##################################################
16:16:35.570 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:35.570 [main] [30mTRACE[m  - ##################################################

16:16:35.570 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:36.382 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:36.382 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:36.383 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:36.383 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 14
16:16:36.383 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:36.585 [main] [30mTRACE[m  - ##############################################################
16:16:36.585 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:36.585 [main] [30mTRACE[m  - ##############################################################
16:16:36.585 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:36.585 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:36.585 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:36.586 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:36.586 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:36.586 [main] [30mTRACE[m  - ############################################################
16:16:36.586 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:36.586 [main] [30mTRACE[m  - ############################################################

16:16:36.586 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:36.586 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:36.586 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:36.586 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:36.586 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:36.588 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
16:16:36.588 [main] [30mTRACE[m  - ########################################################
16:16:36.588 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:36.588 [main] [30mTRACE[m  - ########################################################
16:16:36.588 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:36.588 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:36.588 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
16:16:36.588 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:36.588 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:36.588 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
16:16:36.589 [main] [30mTRACE[m  - ######################################################
16:16:36.589 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:36.589 [main] [30mTRACE[m  - ######################################################

16:16:36.589 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
16:16:36.589 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:36.589 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, A, A, A, E]
16:16:36.589 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:36.589 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:36.589 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBAAE
16:16:36.589 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBAAE
16:16:36.794 [main] [30mTRACE[m  - ####################################################
16:16:36.794 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:36.794 [main] [30mTRACE[m  - ####################################################
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:36.794 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:36.794 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:36.794 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:36.794 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:36.795 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:36.795 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:36.795 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.795 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.795 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.795 [main] [30mTRACE[m  - ###############################################
16:16:36.795 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.795 [main] [30mTRACE[m  - ###############################################
16:16:36.795 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.795 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.795 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.795 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.795 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.795 [main] [30mTRACE[m  - #############################################
16:16:36.795 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.795 [main] [30mTRACE[m  - #############################################

16:16:36.795 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:36.796 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:36.796 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.796 [main] [30mTRACE[m  - ###############################################
16:16:36.796 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.796 [main] [30mTRACE[m  - ###############################################
16:16:36.796 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.796 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.796 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.796 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.796 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.796 [main] [30mTRACE[m  - #############################################
16:16:36.796 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.796 [main] [30mTRACE[m  - #############################################

16:16:36.796 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:36.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:36.797 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:36.797 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:36.797 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.797 [main] [30mTRACE[m  - ###############################################
16:16:36.797 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:36.797 [main] [30mTRACE[m  - ###############################################
16:16:36.797 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:36.797 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:36.797 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.797 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.797 [main] [36mDEBUG[m  - Index de la lettre
16:16:36.797 [main] [30mTRACE[m  - #############################################
16:16:36.797 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:36.797 [main] [30mTRACE[m  - #############################################

16:16:36.797 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:36.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:36.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:36.798 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:36.798 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.798 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:36.798 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:36.798 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.798 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.798 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:36.798 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.798 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.798 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.799 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:36.799 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:36.799 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:36.799 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:36.799 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:36.799 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:36.799 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:36.799 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:36.799 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:36.800 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:36.800 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:36.800 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:36.800 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:36.800 [main] [30mTRACE[m  - ##################################################
16:16:36.800 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:36.800 [main] [30mTRACE[m  - ##################################################

16:16:36.800 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:37.609 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:37.609 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:37.609 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:37.609 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 15
16:16:37.609 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:37.815 [main] [30mTRACE[m  - ##############################################################
16:16:37.815 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:37.815 [main] [30mTRACE[m  - ##############################################################
16:16:37.815 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:37.815 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:37.815 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:37.815 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:37.816 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:37.816 [main] [30mTRACE[m  - ############################################################
16:16:37.816 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:37.816 [main] [30mTRACE[m  - ############################################################

16:16:37.816 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:37.816 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:37.816 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:37.816 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:37.816 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:37.818 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
16:16:37.818 [main] [30mTRACE[m  - ########################################################
16:16:37.818 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:37.818 [main] [30mTRACE[m  - ########################################################
16:16:37.818 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:37.818 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:37.818 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
16:16:37.818 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:37.818 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:37.818 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
16:16:37.818 [main] [30mTRACE[m  - ######################################################
16:16:37.818 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:37.818 [main] [30mTRACE[m  - ######################################################

16:16:37.818 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
16:16:37.818 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:37.818 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, A, A, E]
16:16:37.818 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:37.818 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:37.818 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBBAE
16:16:37.818 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBBAE
16:16:38.019 [main] [30mTRACE[m  - ####################################################
16:16:38.019 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:38.019 [main] [30mTRACE[m  - ####################################################
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:38.019 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:38.020 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:38.020 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:38.020 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:38.020 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:38.020 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:38.020 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:38.020 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.020 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.020 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:38.020 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:38.020 [main] [30mTRACE[m  - ###############################################
16:16:38.020 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.021 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.021 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.021 [main] [30mTRACE[m  - #############################################
16:16:38.021 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - #############################################

16:16:38.021 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:38.021 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:38.021 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:38.021 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:38.021 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.021 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.021 [main] [30mTRACE[m  - ###############################################
16:16:38.021 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.021 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.021 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.021 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.022 [main] [30mTRACE[m  - #############################################
16:16:38.022 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.022 [main] [30mTRACE[m  - #############################################

16:16:38.022 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:38.022 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:38.022 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:38.022 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:38.022 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:38.022 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:38.022 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:38.022 [main] [30mTRACE[m  - ###############################################
16:16:38.022 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:38.022 [main] [30mTRACE[m  - ###############################################
16:16:38.022 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:38.022 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:38.022 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.022 [main] [36mDEBUG[m  - Index de la lettre
16:16:38.022 [main] [30mTRACE[m  - #############################################
16:16:38.022 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:38.023 [main] [30mTRACE[m  - #############################################

16:16:38.023 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:38.023 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:38.023 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.023 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:38.023 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
16:16:38.023 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.023 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
16:16:38.023 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:38.023 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
16:16:38.023 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.023 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.023 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
16:16:38.024 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.024 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:38.024 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
16:16:38.024 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:38.024 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:38.024 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:38.025 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:38.025 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
16:16:38.025 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, false, true, true]
16:16:38.025 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
16:16:38.025 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:38.025 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
16:16:38.025 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 1, 0]
16:16:38.025 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
16:16:38.025 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
16:16:38.025 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
16:16:38.025 [main] [30mTRACE[m  - ##################################################
16:16:38.025 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:38.025 [main] [30mTRACE[m  - ##################################################

16:16:38.025 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:38.837 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:38.837 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:38.837 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:38.838 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 16
16:16:38.838 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:39.039 [main] [30mTRACE[m  - ##############################################################
16:16:39.040 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:39.040 [main] [30mTRACE[m  - ##############################################################
16:16:39.040 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
16:16:39.040 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:39.041 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:39.041 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:39.041 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:39.041 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:39.041 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:39.041 [main] [30mTRACE[m  - ############################################################
16:16:39.041 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:39.041 [main] [30mTRACE[m  - ############################################################

16:16:39.041 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:39.041 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:39.041 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
16:16:39.041 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
16:16:39.041 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
16:16:39.043 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
16:16:39.043 [main] [30mTRACE[m  - ########################################################
16:16:39.043 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
16:16:39.043 [main] [30mTRACE[m  - ########################################################
16:16:39.044 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
16:16:39.044 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:39.044 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 5
16:16:39.044 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:39.044 [main] [32mINFO [m  - FOR - Chaque unit√©s
16:16:39.044 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
16:16:39.044 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 7
16:16:39.044 [main] [30mTRACE[m  - ######################################################
16:16:39.044 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
16:16:39.044 [main] [30mTRACE[m  - ######################################################

16:16:39.044 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 7
16:16:39.044 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
16:16:39.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, E]
16:16:39.044 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:39.044 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
16:16:39.044 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBBBBAB
16:16:39.044 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : ABBBBBAB
16:16:39.246 [main] [30mTRACE[m  - ####################################################
16:16:39.247 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:39.247 [main] [30mTRACE[m  - ####################################################
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:39.247 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:39.247 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:39.247 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:39.247 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
16:16:39.247 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:39.247 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:39.248 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:39.248 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.248 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.248 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:39.248 [main] [30mTRACE[m  - ###############################################
16:16:39.248 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.248 [main] [30mTRACE[m  - ###############################################
16:16:39.248 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.248 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.248 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.248 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.248 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.248 [main] [30mTRACE[m  - #############################################
16:16:39.248 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.248 [main] [30mTRACE[m  - #############################################

16:16:39.248 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:39.249 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:39.249 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:39.249 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:39.249 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.249 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:39.249 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.249 [main] [30mTRACE[m  - ###############################################
16:16:39.249 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.249 [main] [30mTRACE[m  - ###############################################
16:16:39.249 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.249 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.249 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.249 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.249 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.249 [main] [30mTRACE[m  - #############################################
16:16:39.249 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.250 [main] [30mTRACE[m  - #############################################

16:16:39.250 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:39.250 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:39.250 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:39.250 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:39.250 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:39.250 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:39.250 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:39.250 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.251 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.251 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.251 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.251 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.251 [main] [30mTRACE[m  - #############################################
16:16:39.251 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - #############################################

16:16:39.251 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:39.251 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:39.251 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:39.251 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:39.251 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:39.251 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.251 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:39.251 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:39.251 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.251 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:39.251 [main] [30mTRACE[m  - ###############################################
16:16:39.252 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:39.252 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:39.252 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.252 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:39.252 [main] [36mDEBUG[m  - Index de la lettre
16:16:39.252 [main] [30mTRACE[m  - #############################################
16:16:39.252 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:39.252 [main] [30mTRACE[m  - #############################################

16:16:39.252 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
16:16:39.252 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:39.252 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:39.252 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
16:16:39.252 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:39.252 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.252 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.252 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.253 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
16:16:39.253 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:39.253 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:39.253 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:39.253 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:39.253 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:39.254 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 4]
16:16:39.254 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 0, 4]
16:16:39.254 [main] [30mTRACE[m  - ##################################################
16:16:39.254 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:39.254 [main] [30mTRACE[m  - ##################################################

16:16:39.254 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:40.068 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:40.068 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:40.068 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:40.068 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 17
16:16:40.068 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:40.271 [main] [30mTRACE[m  - ##############################################################
16:16:40.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:40.272 [main] [30mTRACE[m  - ##############################################################
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 0, 4]
16:16:40.272 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 0, 4]
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
16:16:40.272 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
16:16:40.272 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
16:16:40.272 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:40.272 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:40.272 [main] [30mTRACE[m  - ############################################################
16:16:40.272 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:40.272 [main] [30mTRACE[m  - ############################################################

16:16:40.272 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:40.272 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:40.272 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:40.272 [main] [30mTRACE[m  - ##############################################
16:16:40.272 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:40.272 [main] [30mTRACE[m  - ##############################################
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:40.272 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:40.272 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:40.273 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:40.273 [main] [30mTRACE[m  - ###############################################
16:16:40.273 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.273 [main] [30mTRACE[m  - ###############################################
16:16:40.273 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.273 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.273 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.273 [main] [30mTRACE[m  - #############################################
16:16:40.273 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.273 [main] [30mTRACE[m  - #############################################

16:16:40.273 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.273 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.273 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:40.273 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:40.274 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:40.274 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:40.274 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.274 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:40.274 [main] [30mTRACE[m  - ############################################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:40.274 [main] [30mTRACE[m  - ############################################

16:16:40.274 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:40.274 [main] [30mTRACE[m  - ##############################################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
16:16:40.274 [main] [30mTRACE[m  - ##############################################

16:16:40.274 [main] [32mINFO [m  - Lancement diff√©rence positive
16:16:40.274 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
16:16:40.274 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
16:16:40.274 [main] [30mTRACE[m  - ##########################
16:16:40.274 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:40.274 [main] [30mTRACE[m  - ##########################

16:16:40.274 [main] [30mTRACE[m  - ############################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:40.274 [main] [30mTRACE[m  - ############################
16:16:40.274 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:40.274 [main] [30mTRACE[m  - #####################################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:40.274 [main] [30mTRACE[m  - #####################################
16:16:40.274 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:40.274 [main] [30mTRACE[m  - ###########################################################
16:16:40.274 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:40.274 [main] [30mTRACE[m  - ###########################################################
16:16:40.274 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:40.274 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:40.274 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, B, B, B, A, B]
16:16:40.275 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:40.275 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:40.275 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:40.275 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:40.275 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
16:16:40.275 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:40.275 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:40.275 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:40.275 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:40.275 [main] [30mTRACE[m  - ###############################################
16:16:40.275 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.275 [main] [30mTRACE[m  - ###############################################
16:16:40.275 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.275 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.275 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.275 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.275 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.275 [main] [30mTRACE[m  - #############################################
16:16:40.275 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.275 [main] [30mTRACE[m  - #############################################

16:16:40.275 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:40.275 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:40.276 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:40.276 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:40.276 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:40.276 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:40.276 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:40.276 [main] [30mTRACE[m  - #########################################################
16:16:40.276 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:40.276 [main] [30mTRACE[m  - #########################################################

16:16:40.276 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:40.276 [main] [30mTRACE[m  - ###################################
16:16:40.276 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:40.276 [main] [30mTRACE[m  - ###################################

16:16:40.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.276 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:40.276 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.276 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:40.276 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  17
16:16:40.276 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, B, B, B, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, B, B, B, A, B]
16:16:40.276 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 2, 3]
16:16:40.276 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 0, 4]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:40.276 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:40.278 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, true]
16:16:40.278 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
16:16:40.278 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:40.278 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################
16:16:40.278 [main] [30mTRACE[m  - ###########################################################################################################

16:16:40.278 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:40.278 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCBBBAB
16:16:40.278 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCBBBAB
16:16:40.482 [main] [30mTRACE[m  - ####################################################
16:16:40.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:40.482 [main] [30mTRACE[m  - ####################################################
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, B, B, B, A, B]
16:16:40.483 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:40.483 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:40.483 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, true]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:40.483 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:40.483 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.483 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.483 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:40.483 [main] [30mTRACE[m  - ###############################################
16:16:40.483 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.483 [main] [30mTRACE[m  - ###############################################
16:16:40.483 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.484 [main] [30mTRACE[m  - #############################################
16:16:40.484 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.484 [main] [30mTRACE[m  - #############################################

16:16:40.484 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:40.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:40.484 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:40.484 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:40.484 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.484 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:40.484 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.484 [main] [30mTRACE[m  - ###############################################
16:16:40.484 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.484 [main] [30mTRACE[m  - ###############################################
16:16:40.484 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.484 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.484 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.484 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.485 [main] [30mTRACE[m  - #############################################
16:16:40.485 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - #############################################

16:16:40.485 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:40.485 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:40.485 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.485 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:40.485 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:40.485 [main] [30mTRACE[m  - ###############################################
16:16:40.485 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - ###############################################
16:16:40.485 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.485 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.485 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.485 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.485 [main] [30mTRACE[m  - #############################################
16:16:40.485 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.485 [main] [30mTRACE[m  - #############################################

16:16:40.485 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:40.485 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:40.486 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
16:16:40.486 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
16:16:40.486 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:40.486 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:40.486 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.486 [main] [30mTRACE[m  - ###############################################
16:16:40.486 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.486 [main] [30mTRACE[m  - ###############################################
16:16:40.486 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.486 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.486 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.486 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.486 [main] [30mTRACE[m  - #############################################
16:16:40.486 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.486 [main] [30mTRACE[m  - #############################################

16:16:40.486 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
16:16:40.487 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.487 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:40.487 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
16:16:40.487 [main] [30mTRACE[m  - ###############################################
16:16:40.487 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:40.487 [main] [30mTRACE[m  - ###############################################
16:16:40.487 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:40.487 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.487 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:40.487 [main] [36mDEBUG[m  - Index de la lettre
16:16:40.487 [main] [30mTRACE[m  - #############################################
16:16:40.487 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:40.487 [main] [30mTRACE[m  - #############################################

16:16:40.487 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:40.487 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:40.487 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:40.487 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
16:16:40.488 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:40.488 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:40.488 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:40.488 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:40.488 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:40.488 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
16:16:40.488 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
16:16:40.488 [main] [30mTRACE[m  - ##################################################
16:16:40.488 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:40.489 [main] [30mTRACE[m  - ##################################################

16:16:40.489 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:41.299 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:41.299 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:41.299 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:41.299 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 18
16:16:41.299 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:41.502 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:41.502 [main] [30mTRACE[m  - ##############################################################
16:16:41.503 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:41.503 [main] [30mTRACE[m  - ##############################################################
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 0, 4]
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
16:16:41.503 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:41.503 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:41.503 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:41.503 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:41.503 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:41.503 [main] [30mTRACE[m  - ############################################################
16:16:41.503 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:41.503 [main] [30mTRACE[m  - ############################################################

16:16:41.503 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:41.503 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:41.503 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:41.503 [main] [30mTRACE[m  - ##############################################
16:16:41.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:41.504 [main] [30mTRACE[m  - ##############################################
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:41.504 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:41.504 [main] [30mTRACE[m  - ###############################################
16:16:41.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.504 [main] [30mTRACE[m  - ###############################################
16:16:41.504 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.504 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.504 [main] [30mTRACE[m  - #############################################
16:16:41.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.504 [main] [30mTRACE[m  - #############################################

16:16:41.504 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.504 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.504 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.504 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.505 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:41.505 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:41.505 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:41.505 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:41.505 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.505 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:41.505 [main] [30mTRACE[m  - ############################################
16:16:41.505 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:41.505 [main] [30mTRACE[m  - ############################################

16:16:41.505 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:41.505 [main] [30mTRACE[m  - ##########################
16:16:41.505 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:41.505 [main] [30mTRACE[m  - ##########################

16:16:41.505 [main] [30mTRACE[m  - ############################
16:16:41.505 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:41.505 [main] [30mTRACE[m  - ############################
16:16:41.506 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:41.506 [main] [30mTRACE[m  - #####################################
16:16:41.506 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:41.506 [main] [30mTRACE[m  - #####################################
16:16:41.506 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:41.506 [main] [30mTRACE[m  - ###########################################################
16:16:41.506 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:41.506 [main] [30mTRACE[m  - ###########################################################
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:41.506 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, B, B, B, A, B]
16:16:41.506 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.506 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:41.506 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:41.506 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:41.506 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:41.506 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
16:16:41.506 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:41.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:41.506 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:41.506 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:41.507 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:41.507 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:41.507 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:41.507 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:41.507 [main] [30mTRACE[m  - ###############################################
16:16:41.507 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.507 [main] [30mTRACE[m  - ###############################################
16:16:41.507 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.507 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.507 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.507 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.507 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.507 [main] [30mTRACE[m  - #############################################
16:16:41.507 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.507 [main] [30mTRACE[m  - #############################################

16:16:41.507 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:41.507 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:41.507 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:41.507 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:41.507 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:41.507 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:41.508 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:41.508 [main] [30mTRACE[m  - #########################################################
16:16:41.508 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:41.508 [main] [30mTRACE[m  - #########################################################

16:16:41.508 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:41.508 [main] [30mTRACE[m  - ###################################
16:16:41.508 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:41.508 [main] [30mTRACE[m  - ###################################

16:16:41.508 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.508 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:41.508 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.508 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:41.508 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  18
16:16:41.508 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, C, B, B, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, C, B, B, A, B]
16:16:41.508 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 0, 4]
16:16:41.508 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:41.508 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:41.510 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, true]
16:16:41.510 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
16:16:41.510 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:41.510 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################
16:16:41.510 [main] [30mTRACE[m  - ###########################################################################################################

16:16:41.510 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:41.510 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCCBBAB
16:16:41.510 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCCBBAB
16:16:41.711 [main] [30mTRACE[m  - ####################################################
16:16:41.711 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:41.712 [main] [30mTRACE[m  - ####################################################
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, C, B, B, A, B]
16:16:41.712 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:41.712 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:41.712 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:41.712 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, true]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:41.712 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:41.712 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.712 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.712 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:41.712 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:41.712 [main] [30mTRACE[m  - ###############################################
16:16:41.712 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.713 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.713 [main] [30mTRACE[m  - #############################################
16:16:41.713 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - #############################################

16:16:41.713 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:41.713 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:41.713 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:41.713 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.713 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.713 [main] [30mTRACE[m  - ###############################################
16:16:41.713 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.713 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.713 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.713 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.714 [main] [30mTRACE[m  - #############################################
16:16:41.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - #############################################

16:16:41.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:41.714 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:41.714 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.714 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:41.714 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:41.714 [main] [30mTRACE[m  - ###############################################
16:16:41.714 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - ###############################################
16:16:41.714 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.714 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.714 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.714 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.714 [main] [30mTRACE[m  - #############################################
16:16:41.714 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.714 [main] [30mTRACE[m  - #############################################

16:16:41.714 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:41.714 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:41.715 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:41.715 [main] [30mTRACE[m  - ###############################################
16:16:41.715 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.715 [main] [30mTRACE[m  - ###############################################
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.715 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.715 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.715 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.715 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.715 [main] [30mTRACE[m  - #############################################
16:16:41.715 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.715 [main] [30mTRACE[m  - #############################################

16:16:41.715 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:41.715 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
16:16:41.715 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:41.715 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:41.715 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.716 [main] [30mTRACE[m  - ###############################################
16:16:41.716 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:41.716 [main] [30mTRACE[m  - ###############################################
16:16:41.716 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:41.716 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:41.716 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.716 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:41.716 [main] [36mDEBUG[m  - Index de la lettre
16:16:41.716 [main] [30mTRACE[m  - #############################################
16:16:41.716 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:41.716 [main] [30mTRACE[m  - #############################################

16:16:41.716 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:41.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:41.716 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:41.716 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:41.716 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:41.716 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.716 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.717 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.717 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
16:16:41.717 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:41.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:41.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:41.717 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:41.718 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:41.718 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
16:16:41.718 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
16:16:41.718 [main] [30mTRACE[m  - ##################################################
16:16:41.718 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:41.718 [main] [30mTRACE[m  - ##################################################

16:16:41.718 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:42.529 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:42.530 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:42.530 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:42.530 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 19
16:16:42.530 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:42.733 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:42.733 [main] [30mTRACE[m  - ##############################################################
16:16:42.733 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:42.733 [main] [30mTRACE[m  - ##############################################################
16:16:42.733 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:42.733 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:42.733 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:42.734 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:42.734 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:42.734 [main] [30mTRACE[m  - ############################################################
16:16:42.734 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:42.734 [main] [30mTRACE[m  - ############################################################

16:16:42.734 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:42.734 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:42.734 [main] [30mTRACE[m  - ##########################
16:16:42.734 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:42.734 [main] [30mTRACE[m  - ##########################

16:16:42.734 [main] [30mTRACE[m  - ############################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:42.734 [main] [30mTRACE[m  - ############################
16:16:42.734 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:42.734 [main] [30mTRACE[m  - #####################################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:42.734 [main] [30mTRACE[m  - #####################################
16:16:42.734 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:42.734 [main] [30mTRACE[m  - ###########################################################
16:16:42.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:42.734 [main] [30mTRACE[m  - ###########################################################
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:42.735 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, C, B, B, A, B]
16:16:42.735 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, true]
16:16:42.735 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:42.735 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:42.735 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:42.735 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:42.735 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
16:16:42.735 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:42.735 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:42.735 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:42.735 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:42.735 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:42.735 [main] [30mTRACE[m  - ###############################################
16:16:42.735 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.735 [main] [30mTRACE[m  - ###############################################
16:16:42.736 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.736 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.736 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.736 [main] [30mTRACE[m  - #############################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.736 [main] [30mTRACE[m  - #############################################

16:16:42.736 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:42.736 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:42.736 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:42.736 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:42.736 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:42.736 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:42.736 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:42.736 [main] [30mTRACE[m  - #########################################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:42.736 [main] [30mTRACE[m  - #########################################################

16:16:42.736 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:42.736 [main] [30mTRACE[m  - ###################################
16:16:42.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:42.736 [main] [30mTRACE[m  - ###################################

16:16:42.737 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.737 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:42.737 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.737 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:42.737 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  19
16:16:42.737 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, B, B, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, B, B, A, B]
16:16:42.737 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
16:16:42.737 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:42.737 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:42.739 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, true]
16:16:42.739 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
16:16:42.739 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:42.739 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################
16:16:42.739 [main] [30mTRACE[m  - ###########################################################################################################

16:16:42.739 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:42.739 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDBBAB
16:16:42.739 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDBBAB
16:16:42.942 [main] [30mTRACE[m  - ####################################################
16:16:42.942 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:42.942 [main] [30mTRACE[m  - ####################################################
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:42.942 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, B, B, A, B]
16:16:42.942 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:42.942 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:42.943 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:42.943 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, true]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:42.943 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:42.943 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.943 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.943 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:42.943 [main] [30mTRACE[m  - ###############################################
16:16:42.943 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.943 [main] [30mTRACE[m  - ###############################################
16:16:42.943 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.943 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.943 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.943 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.943 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.943 [main] [30mTRACE[m  - #############################################
16:16:42.943 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.943 [main] [30mTRACE[m  - #############################################

16:16:42.944 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:42.944 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:42.944 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.944 [main] [30mTRACE[m  - ###############################################
16:16:42.944 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.944 [main] [30mTRACE[m  - ###############################################
16:16:42.944 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.944 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.944 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.944 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.944 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.944 [main] [30mTRACE[m  - #############################################
16:16:42.944 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.944 [main] [30mTRACE[m  - #############################################

16:16:42.944 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:42.944 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:42.944 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.945 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.945 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.945 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.945 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.945 [main] [30mTRACE[m  - #############################################
16:16:42.945 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - #############################################

16:16:42.945 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:42.945 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:42.945 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:42.945 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.945 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.945 [main] [30mTRACE[m  - ###############################################
16:16:42.945 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.945 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.946 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.946 [main] [30mTRACE[m  - #############################################
16:16:42.946 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.946 [main] [30mTRACE[m  - #############################################

16:16:42.946 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:42.946 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:42.946 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
16:16:42.946 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
16:16:42.946 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:42.946 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:42.946 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.946 [main] [30mTRACE[m  - ###############################################
16:16:42.946 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.946 [main] [30mTRACE[m  - ###############################################
16:16:42.946 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.946 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.946 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.946 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.946 [main] [30mTRACE[m  - #############################################
16:16:42.946 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.947 [main] [30mTRACE[m  - #############################################

16:16:42.947 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:42.947 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:42.947 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
16:16:42.947 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
16:16:42.947 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:42.947 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.947 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:42.947 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:42.947 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
16:16:42.947 [main] [30mTRACE[m  - ###############################################
16:16:42.947 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:42.947 [main] [30mTRACE[m  - ###############################################
16:16:42.947 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:42.947 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:42.947 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.948 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:42.948 [main] [36mDEBUG[m  - Index de la lettre
16:16:42.948 [main] [30mTRACE[m  - #############################################
16:16:42.948 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:42.948 [main] [30mTRACE[m  - #############################################

16:16:42.948 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:42.948 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:42.948 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:42.948 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.948 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:42.948 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.948 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:42.948 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.948 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:42.949 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:42.949 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:42.949 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:42.949 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:42.949 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:42.949 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:42.949 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:42.949 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:42.949 [main] [30mTRACE[m  - ##################################################
16:16:42.949 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:42.949 [main] [30mTRACE[m  - ##################################################

16:16:42.949 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:43.760 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:43.760 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:43.760 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:43.760 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 20
16:16:43.760 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:43.964 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:43.964 [main] [30mTRACE[m  - ##############################################################
16:16:43.964 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:43.964 [main] [30mTRACE[m  - ##############################################################
16:16:43.964 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
16:16:43.964 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:43.964 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:43.964 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:43.964 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:43.964 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:43.964 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:43.965 [main] [30mTRACE[m  - ############################################################
16:16:43.965 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:43.965 [main] [30mTRACE[m  - ############################################################

16:16:43.965 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:43.965 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:43.965 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:43.965 [main] [30mTRACE[m  - ##############################################
16:16:43.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:43.965 [main] [30mTRACE[m  - ##############################################
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:43.965 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:43.965 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:43.965 [main] [30mTRACE[m  - ###############################################
16:16:43.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:43.965 [main] [30mTRACE[m  - ###############################################
16:16:43.965 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:43.965 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:43.965 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.965 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.965 [main] [36mDEBUG[m  - Index de la lettre
16:16:43.966 [main] [30mTRACE[m  - #############################################
16:16:43.966 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:43.966 [main] [30mTRACE[m  - #############################################

16:16:43.966 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.966 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:43.966 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:43.966 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:43.966 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:43.966 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:43.966 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:43.966 [main] [30mTRACE[m  - ############################################
16:16:43.967 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:43.967 [main] [30mTRACE[m  - ############################################

16:16:43.967 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:43.967 [main] [30mTRACE[m  - ##########################
16:16:43.967 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:43.967 [main] [30mTRACE[m  - ##########################

16:16:43.967 [main] [30mTRACE[m  - ############################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:43.967 [main] [30mTRACE[m  - ############################
16:16:43.967 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:43.967 [main] [30mTRACE[m  - #####################################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:43.967 [main] [30mTRACE[m  - #####################################
16:16:43.967 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:43.967 [main] [30mTRACE[m  - ###########################################################
16:16:43.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:43.967 [main] [30mTRACE[m  - ###########################################################
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:43.967 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, B, B, A, B]
16:16:43.967 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:43.967 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:43.967 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:43.967 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:43.968 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:43.968 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:43.968 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:43.968 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:43.968 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:43.968 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:43.968 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:43.968 [main] [30mTRACE[m  - ###############################################
16:16:43.968 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:43.968 [main] [30mTRACE[m  - ###############################################
16:16:43.968 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:43.968 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:43.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.968 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:43.968 [main] [36mDEBUG[m  - Index de la lettre
16:16:43.968 [main] [30mTRACE[m  - #############################################
16:16:43.968 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:43.968 [main] [30mTRACE[m  - #############################################

16:16:43.969 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:43.969 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:43.969 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:43.969 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:43.969 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:43.969 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:43.969 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:43.969 [main] [30mTRACE[m  - #########################################################
16:16:43.969 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:43.969 [main] [30mTRACE[m  - #########################################################

16:16:43.969 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:43.969 [main] [30mTRACE[m  - ###################################
16:16:43.969 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:43.969 [main] [30mTRACE[m  - ###################################

16:16:43.969 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.969 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:43.969 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.969 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:43.970 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  20
16:16:43.970 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, C, B, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, C, B, A, B]
16:16:43.970 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
16:16:43.970 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:43.970 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:43.971 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:43.971 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:43.971 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:43.971 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################
16:16:43.972 [main] [30mTRACE[m  - ###########################################################################################################

16:16:43.972 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:43.972 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDCBAB
16:16:43.972 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDCBAB
16:16:44.173 [main] [30mTRACE[m  - ####################################################
16:16:44.173 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:44.173 [main] [30mTRACE[m  - ####################################################
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, C, B, A, B]
16:16:44.173 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:44.173 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:44.173 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:44.173 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:44.173 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:44.174 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:44.174 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.174 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:44.174 [main] [30mTRACE[m  - ###############################################
16:16:44.174 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.174 [main] [30mTRACE[m  - ###############################################
16:16:44.174 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.174 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.174 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.174 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.174 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.174 [main] [30mTRACE[m  - #############################################
16:16:44.174 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.174 [main] [30mTRACE[m  - #############################################

16:16:44.174 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:44.174 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:44.174 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.174 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.175 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.175 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.175 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.175 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.175 [main] [30mTRACE[m  - #############################################
16:16:44.175 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - #############################################

16:16:44.175 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:44.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:44.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:44.175 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:44.175 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.175 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.175 [main] [30mTRACE[m  - ###############################################
16:16:44.175 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.176 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.176 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.176 [main] [30mTRACE[m  - #############################################
16:16:44.176 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - #############################################

16:16:44.176 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:44.176 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:44.176 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:44.176 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:44.176 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.176 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:44.176 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:44.176 [main] [30mTRACE[m  - ###############################################
16:16:44.176 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - ###############################################
16:16:44.176 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.176 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.176 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.176 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.176 [main] [30mTRACE[m  - #############################################
16:16:44.176 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.176 [main] [30mTRACE[m  - #############################################

16:16:44.177 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:44.177 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:44.177 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:44.177 [main] [30mTRACE[m  - ###############################################
16:16:44.177 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.177 [main] [30mTRACE[m  - ###############################################
16:16:44.177 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.177 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.177 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.177 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.177 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.177 [main] [30mTRACE[m  - #############################################
16:16:44.177 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.177 [main] [30mTRACE[m  - #############################################

16:16:44.177 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:44.177 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:44.177 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:44.177 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:44.178 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.178 [main] [30mTRACE[m  - ###############################################
16:16:44.178 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:44.178 [main] [30mTRACE[m  - ###############################################
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:44.178 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.178 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:44.178 [main] [36mDEBUG[m  - Index de la lettre
16:16:44.178 [main] [30mTRACE[m  - #############################################
16:16:44.178 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:44.178 [main] [30mTRACE[m  - #############################################

16:16:44.178 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:44.178 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:44.178 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:44.178 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:44.178 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.178 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:44.178 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.178 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:44.178 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:44.179 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:44.179 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.179 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:44.179 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:44.179 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:44.179 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:44.179 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:44.179 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:44.179 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:44.179 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:44.179 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:44.179 [main] [30mTRACE[m  - ##################################################
16:16:44.179 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:44.179 [main] [30mTRACE[m  - ##################################################

16:16:44.179 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:44.991 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:44.991 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:44.991 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:44.991 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 21
16:16:44.991 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:45.194 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:45.194 [main] [30mTRACE[m  - ##############################################################
16:16:45.195 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:45.195 [main] [30mTRACE[m  - ##############################################################
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:45.195 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:45.195 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:45.195 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:45.195 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:45.195 [main] [30mTRACE[m  - ############################################################
16:16:45.195 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:45.195 [main] [30mTRACE[m  - ############################################################

16:16:45.195 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:45.195 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:45.195 [main] [30mTRACE[m  - ##########################
16:16:45.195 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:45.195 [main] [30mTRACE[m  - ##########################

16:16:45.195 [main] [30mTRACE[m  - ############################
16:16:45.195 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:45.195 [main] [30mTRACE[m  - ############################
16:16:45.196 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:45.196 [main] [30mTRACE[m  - #####################################
16:16:45.196 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:45.196 [main] [30mTRACE[m  - #####################################
16:16:45.196 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:45.196 [main] [30mTRACE[m  - ###########################################################
16:16:45.196 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:45.196 [main] [30mTRACE[m  - ###########################################################
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:45.196 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, C, B, A, B]
16:16:45.196 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:45.196 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:45.196 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:45.196 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:45.196 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:45.196 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:45.197 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:45.197 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:45.197 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:45.197 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:45.197 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:45.197 [main] [30mTRACE[m  - ###############################################
16:16:45.197 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.197 [main] [30mTRACE[m  - ###############################################
16:16:45.197 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.197 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.197 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.197 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.197 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.197 [main] [30mTRACE[m  - #############################################
16:16:45.197 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.197 [main] [30mTRACE[m  - #############################################

16:16:45.197 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:45.197 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:45.197 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:45.197 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:45.197 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:45.197 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:45.198 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:45.198 [main] [30mTRACE[m  - #########################################################
16:16:45.198 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:45.198 [main] [30mTRACE[m  - #########################################################

16:16:45.198 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:45.198 [main] [30mTRACE[m  - ###################################
16:16:45.198 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:45.198 [main] [30mTRACE[m  - ###################################

16:16:45.198 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.198 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:45.198 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.198 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:45.198 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  21
16:16:45.198 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, D, B, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, D, B, A, B]
16:16:45.198 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:45.198 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:45.198 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:45.200 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:45.201 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:45.201 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:45.201 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################
16:16:45.201 [main] [30mTRACE[m  - ###########################################################################################################

16:16:45.201 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:45.201 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDDBAB
16:16:45.201 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDDBAB
16:16:45.403 [main] [30mTRACE[m  - ####################################################
16:16:45.404 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:45.404 [main] [30mTRACE[m  - ####################################################
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, D, B, A, B]
16:16:45.404 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:45.404 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:45.404 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:45.404 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:45.404 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:45.404 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:45.404 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.404 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.404 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.405 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.405 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.405 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.405 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.405 [main] [30mTRACE[m  - #############################################
16:16:45.405 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - #############################################

16:16:45.405 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:45.405 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:45.405 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:45.405 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:45.405 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.405 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.405 [main] [30mTRACE[m  - ###############################################
16:16:45.405 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.405 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.406 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.406 [main] [30mTRACE[m  - #############################################
16:16:45.406 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.406 [main] [30mTRACE[m  - #############################################

16:16:45.406 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:45.406 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:45.406 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:45.406 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:45.406 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.406 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:45.406 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:45.406 [main] [30mTRACE[m  - ###############################################
16:16:45.406 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.406 [main] [30mTRACE[m  - ###############################################
16:16:45.406 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.406 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.406 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.406 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.406 [main] [30mTRACE[m  - #############################################
16:16:45.406 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - #############################################

16:16:45.407 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:45.407 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:45.407 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:45.407 [main] [30mTRACE[m  - ###############################################
16:16:45.407 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - ###############################################
16:16:45.407 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.407 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.407 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.407 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.407 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.407 [main] [30mTRACE[m  - #############################################
16:16:45.407 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.407 [main] [30mTRACE[m  - #############################################

16:16:45.407 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:45.407 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:45.407 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.408 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.408 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.408 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.408 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.408 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.408 [main] [30mTRACE[m  - #############################################
16:16:45.408 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.408 [main] [30mTRACE[m  - #############################################

16:16:45.408 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:45.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:45.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:45.408 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:45.408 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:45.408 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.408 [main] [30mTRACE[m  - ###############################################
16:16:45.409 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:45.409 [main] [30mTRACE[m  - ###############################################
16:16:45.409 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:45.409 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.409 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:45.409 [main] [36mDEBUG[m  - Index de la lettre
16:16:45.409 [main] [30mTRACE[m  - #############################################
16:16:45.409 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:45.409 [main] [30mTRACE[m  - #############################################

16:16:45.409 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:45.409 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:45.409 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.409 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:45.409 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.409 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:45.409 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:45.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:45.410 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:45.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
16:16:45.410 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:45.410 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:45.410 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:45.410 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:45.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:45.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
16:16:45.410 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
16:16:45.410 [main] [30mTRACE[m  - ##################################################
16:16:45.410 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:45.410 [main] [30mTRACE[m  - ##################################################

16:16:45.410 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:46.222 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:46.222 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:46.222 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:46.222 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 22
16:16:46.222 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:46.425 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:46.425 [main] [30mTRACE[m  - ##############################################################
16:16:46.425 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:46.425 [main] [30mTRACE[m  - ##############################################################
16:16:46.425 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:46.425 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
16:16:46.425 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:46.426 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:46.426 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:46.426 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:46.426 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:46.426 [main] [30mTRACE[m  - ############################################################
16:16:46.426 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:46.426 [main] [30mTRACE[m  - ############################################################

16:16:46.426 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:46.426 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:46.426 [main] [30mTRACE[m  - ##########################
16:16:46.426 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:46.426 [main] [30mTRACE[m  - ##########################

16:16:46.426 [main] [30mTRACE[m  - ############################
16:16:46.426 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:46.426 [main] [30mTRACE[m  - ############################
16:16:46.426 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:46.426 [main] [30mTRACE[m  - #####################################
16:16:46.426 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:46.427 [main] [30mTRACE[m  - #####################################
16:16:46.427 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:46.427 [main] [30mTRACE[m  - ###########################################################
16:16:46.427 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:46.427 [main] [30mTRACE[m  - ###########################################################
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:46.427 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, D, B, A, B]
16:16:46.427 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, true]
16:16:46.427 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:46.427 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:46.427 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:46.427 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:46.427 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
16:16:46.427 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.427 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:46.428 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:46.428 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:46.428 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:46.428 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:46.428 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:46.428 [main] [30mTRACE[m  - ###############################################
16:16:46.428 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.428 [main] [30mTRACE[m  - ###############################################
16:16:46.428 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.428 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.428 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.428 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.428 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.428 [main] [30mTRACE[m  - #############################################
16:16:46.428 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.428 [main] [30mTRACE[m  - #############################################

16:16:46.428 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:46.428 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:46.428 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:46.428 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:46.428 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:46.428 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:46.428 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:46.429 [main] [30mTRACE[m  - #########################################################
16:16:46.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:46.429 [main] [30mTRACE[m  - #########################################################

16:16:46.429 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:46.429 [main] [30mTRACE[m  - ###################################
16:16:46.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:46.429 [main] [30mTRACE[m  - ###################################

16:16:46.429 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.429 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:46.429 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.429 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:46.429 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  22
16:16:46.429 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, B, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, B, A, B]
16:16:46.429 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:46.429 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:46.429 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:46.431 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, true]
16:16:46.431 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
16:16:46.431 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:46.431 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################
16:16:46.431 [main] [30mTRACE[m  - ###########################################################################################################

16:16:46.431 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:46.432 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEBAB
16:16:46.432 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEBAB
16:16:46.634 [main] [30mTRACE[m  - ####################################################
16:16:46.634 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:46.634 [main] [30mTRACE[m  - ####################################################
16:16:46.634 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.634 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
16:16:46.635 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:46.635 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:46.635 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:46.635 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, true]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:46.635 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:46.635 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.635 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.635 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:46.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.636 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.636 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.636 [main] [30mTRACE[m  - #############################################
16:16:46.636 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - #############################################

16:16:46.636 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:46.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:46.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:46.636 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:46.636 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.636 [main] [30mTRACE[m  - ###############################################
16:16:46.636 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.636 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.636 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.636 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.637 [main] [30mTRACE[m  - #############################################
16:16:46.637 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.637 [main] [30mTRACE[m  - #############################################

16:16:46.637 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:46.637 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:46.637 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:46.637 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:46.637 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.637 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:46.637 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:46.637 [main] [30mTRACE[m  - ###############################################
16:16:46.637 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.637 [main] [30mTRACE[m  - ###############################################
16:16:46.637 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.637 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.637 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.637 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.637 [main] [30mTRACE[m  - #############################################
16:16:46.637 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - #############################################

16:16:46.638 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:46.638 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.638 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:46.638 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:46.638 [main] [30mTRACE[m  - ###############################################
16:16:46.638 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - ###############################################
16:16:46.638 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.638 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.638 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.638 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.638 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.638 [main] [30mTRACE[m  - #############################################
16:16:46.638 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.638 [main] [30mTRACE[m  - #############################################

16:16:46.638 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:46.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:46.639 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:46.639 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.639 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:46.639 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:46.639 [main] [30mTRACE[m  - ###############################################
16:16:46.639 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.639 [main] [30mTRACE[m  - ###############################################
16:16:46.639 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.639 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.639 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.639 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.639 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.639 [main] [30mTRACE[m  - #############################################
16:16:46.639 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.639 [main] [30mTRACE[m  - #############################################

16:16:46.639 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:46.639 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
16:16:46.640 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:46.640 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.640 [main] [30mTRACE[m  - ###############################################
16:16:46.640 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.640 [main] [30mTRACE[m  - ###############################################
16:16:46.640 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.640 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.640 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.640 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.640 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.640 [main] [30mTRACE[m  - #############################################
16:16:46.640 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.640 [main] [30mTRACE[m  - #############################################

16:16:46.640 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:46.640 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
16:16:46.640 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
16:16:46.640 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:46.640 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.641 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:46.641 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:46.641 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
16:16:46.641 [main] [30mTRACE[m  - ###############################################
16:16:46.641 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:46.641 [main] [30mTRACE[m  - ###############################################
16:16:46.641 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:46.641 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:46.641 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.641 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:46.641 [main] [36mDEBUG[m  - Index de la lettre
16:16:46.641 [main] [30mTRACE[m  - #############################################
16:16:46.641 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:46.641 [main] [30mTRACE[m  - #############################################

16:16:46.641 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
16:16:46.641 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:46.641 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:46.641 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:46.641 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:46.641 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.641 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:46.642 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:46.642 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:46.642 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:46.642 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:46.642 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:46.642 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:46.642 [main] [30mTRACE[m  - ##################################################
16:16:46.642 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:46.642 [main] [30mTRACE[m  - ##################################################

16:16:46.642 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:47.452 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:47.452 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:47.452 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:47.452 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 23
16:16:47.452 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:47.656 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:47.656 [main] [30mTRACE[m  - ##############################################################
16:16:47.656 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:47.656 [main] [30mTRACE[m  - ##############################################################
16:16:47.656 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
16:16:47.656 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:47.656 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:47.656 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
16:16:47.656 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
16:16:47.657 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
16:16:47.657 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
16:16:47.657 [main] [30mTRACE[m  - ############################################################
16:16:47.657 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:47.657 [main] [30mTRACE[m  - ############################################################

16:16:47.657 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:47.657 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
16:16:47.657 [main] [32mINFO [m  - IF - "=" appara√Æt
16:16:47.657 [main] [30mTRACE[m  - ##############################################
16:16:47.657 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
16:16:47.657 [main] [30mTRACE[m  - ##############################################
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
16:16:47.657 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
16:16:47.657 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
16:16:47.657 [main] [30mTRACE[m  - ###############################################
16:16:47.657 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.657 [main] [30mTRACE[m  - ###############################################
16:16:47.657 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.658 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.658 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.658 [main] [30mTRACE[m  - #############################################
16:16:47.658 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.658 [main] [30mTRACE[m  - #############################################

16:16:47.658 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.658 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.658 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
16:16:47.658 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.659 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
16:16:47.659 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
16:16:47.659 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
16:16:47.659 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
16:16:47.659 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.659 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
16:16:47.659 [main] [30mTRACE[m  - ############################################
16:16:47.659 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
16:16:47.659 [main] [30mTRACE[m  - ############################################

16:16:47.659 [main] [32mINFO [m  - Lancement √©galit√© positive
16:16:47.659 [main] [30mTRACE[m  - ##########################
16:16:47.659 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:47.659 [main] [30mTRACE[m  - ##########################

16:16:47.659 [main] [30mTRACE[m  - ############################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:47.659 [main] [30mTRACE[m  - ############################
16:16:47.659 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:47.659 [main] [30mTRACE[m  - #####################################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:47.659 [main] [30mTRACE[m  - #####################################
16:16:47.659 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:47.659 [main] [30mTRACE[m  - ###########################################################
16:16:47.659 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:47.660 [main] [30mTRACE[m  - ###########################################################
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:47.660 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
16:16:47.660 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.660 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:47.660 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:47.660 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:47.660 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:47.660 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:47.660 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
16:16:47.660 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:47.660 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:47.660 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:47.660 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:47.661 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
16:16:47.661 [main] [30mTRACE[m  - ###############################################
16:16:47.661 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.661 [main] [30mTRACE[m  - ###############################################
16:16:47.661 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.661 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.661 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.661 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.661 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.661 [main] [30mTRACE[m  - #############################################
16:16:47.661 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.661 [main] [30mTRACE[m  - #############################################

16:16:47.661 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:47.661 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:47.661 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:47.661 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:47.661 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:47.661 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:47.661 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:47.661 [main] [30mTRACE[m  - #########################################################
16:16:47.662 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:47.662 [main] [30mTRACE[m  - #########################################################

16:16:47.662 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:47.662 [main] [30mTRACE[m  - ###################################
16:16:47.662 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:47.662 [main] [30mTRACE[m  - ###################################

16:16:47.662 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.662 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:47.662 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.662 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:47.662 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  23
16:16:47.662 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, C, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, C, A, B]
16:16:47.662 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
16:16:47.662 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
16:16:47.662 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:47.664 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:47.664 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:47.664 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
16:16:47.664 [main] [36mDEBUG[m  - ch_NewLetter :                                C
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################
16:16:47.664 [main] [30mTRACE[m  - ###########################################################################################################

16:16:47.664 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:47.664 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDECAB
16:16:47.665 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDECAB
16:16:47.870 [main] [30mTRACE[m  - ####################################################
16:16:47.870 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:47.870 [main] [30mTRACE[m  - ####################################################
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:47.870 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
16:16:47.870 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:47.871 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:47.871 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:47.871 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:47.871 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:47.871 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.871 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.871 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:47.871 [main] [30mTRACE[m  - ###############################################
16:16:47.871 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.871 [main] [30mTRACE[m  - ###############################################
16:16:47.871 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.871 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.872 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.872 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.872 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.872 [main] [30mTRACE[m  - #############################################
16:16:47.872 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.872 [main] [30mTRACE[m  - #############################################

16:16:47.872 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:47.872 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:47.872 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:47.872 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:47.872 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.872 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:47.872 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:47.872 [main] [30mTRACE[m  - ###############################################
16:16:47.872 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.872 [main] [30mTRACE[m  - ###############################################
16:16:47.872 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.872 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.872 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.873 [main] [30mTRACE[m  - #############################################
16:16:47.873 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - #############################################

16:16:47.873 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:47.873 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:47.873 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.873 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:47.873 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:47.873 [main] [30mTRACE[m  - ###############################################
16:16:47.873 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - ###############################################
16:16:47.873 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.873 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.873 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.873 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.873 [main] [30mTRACE[m  - #############################################
16:16:47.873 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.873 [main] [30mTRACE[m  - #############################################

16:16:47.873 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:47.873 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:47.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:47.874 [main] [30mTRACE[m  - ###############################################
16:16:47.874 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.874 [main] [30mTRACE[m  - ###############################################
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.874 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.874 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.874 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.874 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.874 [main] [30mTRACE[m  - #############################################
16:16:47.874 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.874 [main] [30mTRACE[m  - #############################################

16:16:47.874 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:47.874 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.874 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:47.874 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.875 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.875 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.875 [main] [30mTRACE[m  - #############################################
16:16:47.875 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - #############################################

16:16:47.875 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:47.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:47.875 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:47.875 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:47.875 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.875 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.875 [main] [30mTRACE[m  - ###############################################
16:16:47.875 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.875 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.875 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.876 [main] [30mTRACE[m  - #############################################
16:16:47.876 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.876 [main] [30mTRACE[m  - #############################################

16:16:47.876 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:47.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:47.876 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:47.876 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:47.876 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:47.876 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:47.876 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:47.876 [main] [30mTRACE[m  - ###############################################
16:16:47.876 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:47.876 [main] [30mTRACE[m  - ###############################################
16:16:47.876 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:47.876 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:47.876 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.876 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:47.877 [main] [36mDEBUG[m  - Index de la lettre
16:16:47.877 [main] [30mTRACE[m  - #############################################
16:16:47.877 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:47.877 [main] [30mTRACE[m  - #############################################

16:16:47.877 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:47.877 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:47.877 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:47.877 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:47.877 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:47.877 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:47.877 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:47.877 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:47.877 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:47.877 [main] [30mTRACE[m  - ##################################################
16:16:47.877 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:47.877 [main] [30mTRACE[m  - ##################################################

16:16:47.877 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:48.689 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:48.689 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:48.689 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:48.690 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 24
16:16:48.690 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:48.892 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:48.892 [main] [30mTRACE[m  - ##############################################################
16:16:48.892 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:48.892 [main] [30mTRACE[m  - ##############################################################
16:16:48.892 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:48.892 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:48.892 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:48.893 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:48.893 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:48.893 [main] [30mTRACE[m  - ############################################################
16:16:48.893 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:48.893 [main] [30mTRACE[m  - ############################################################

16:16:48.893 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:48.893 [main] [30mTRACE[m  - ##########################
16:16:48.893 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:48.893 [main] [30mTRACE[m  - ##########################

16:16:48.893 [main] [30mTRACE[m  - ############################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:48.893 [main] [30mTRACE[m  - ############################
16:16:48.893 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:48.893 [main] [30mTRACE[m  - #####################################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:48.893 [main] [30mTRACE[m  - #####################################
16:16:48.893 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:48.893 [main] [30mTRACE[m  - ###########################################################
16:16:48.893 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:48.893 [main] [30mTRACE[m  - ###########################################################
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:48.893 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
16:16:48.893 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:48.893 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:48.893 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:48.893 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:48.893 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:48.894 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:48.894 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:48.894 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:48.894 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:48.894 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:48.894 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:48.894 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
16:16:48.894 [main] [30mTRACE[m  - ###############################################
16:16:48.894 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:48.894 [main] [30mTRACE[m  - ###############################################
16:16:48.894 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:48.894 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:48.894 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:48.894 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:48.894 [main] [36mDEBUG[m  - Index de la lettre
16:16:48.894 [main] [30mTRACE[m  - #############################################
16:16:48.894 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:48.894 [main] [30mTRACE[m  - #############################################

16:16:48.894 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:48.894 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:48.894 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:48.894 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:48.894 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:48.895 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:48.895 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:48.895 [main] [30mTRACE[m  - #########################################################
16:16:48.895 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:48.895 [main] [30mTRACE[m  - #########################################################

16:16:48.895 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:48.895 [main] [30mTRACE[m  - ###################################
16:16:48.895 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:48.895 [main] [30mTRACE[m  - ###################################

16:16:48.895 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.895 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:48.895 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.895 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:48.895 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  24
16:16:48.895 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, D, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, D, A, B]
16:16:48.895 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:48.895 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:48.895 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:48.897 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:48.897 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:48.897 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
16:16:48.897 [main] [36mDEBUG[m  - ch_NewLetter :                                D
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################
16:16:48.897 [main] [30mTRACE[m  - ###########################################################################################################

16:16:48.897 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:48.897 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEDAB
16:16:48.897 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEDAB
16:16:49.101 [main] [30mTRACE[m  - ####################################################
16:16:49.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:49.101 [main] [30mTRACE[m  - ####################################################
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
16:16:49.101 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:49.101 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:49.101 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:49.101 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:49.101 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:49.101 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:49.102 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:49.102 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.102 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.102 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.102 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.102 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.102 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.102 [main] [30mTRACE[m  - #############################################
16:16:49.102 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - #############################################

16:16:49.102 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:49.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:49.102 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.102 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:49.102 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.102 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.102 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.103 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.103 [main] [30mTRACE[m  - #############################################
16:16:49.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - #############################################

16:16:49.103 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:49.103 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.103 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:49.103 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - ###############################################
16:16:49.103 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.103 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.103 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.103 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.103 [main] [30mTRACE[m  - #############################################
16:16:49.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.103 [main] [30mTRACE[m  - #############################################

16:16:49.103 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:49.103 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:49.104 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.104 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.104 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.104 [main] [30mTRACE[m  - #############################################
16:16:49.104 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - #############################################

16:16:49.104 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:49.104 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:49.104 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.104 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.104 [main] [30mTRACE[m  - ###############################################
16:16:49.104 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.104 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.104 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.104 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.104 [main] [30mTRACE[m  - #############################################
16:16:49.104 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - #############################################

16:16:49.105 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:49.105 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.105 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.105 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.105 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.105 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.105 [main] [30mTRACE[m  - #############################################
16:16:49.105 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.105 [main] [30mTRACE[m  - #############################################

16:16:49.105 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:49.105 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:49.105 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:49.105 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:49.105 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:49.105 [main] [30mTRACE[m  - ###############################################
16:16:49.105 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:49.106 [main] [30mTRACE[m  - ###############################################
16:16:49.106 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:49.106 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.106 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:49.106 [main] [36mDEBUG[m  - Index de la lettre
16:16:49.106 [main] [30mTRACE[m  - #############################################
16:16:49.106 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:49.106 [main] [30mTRACE[m  - #############################################

16:16:49.106 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:49.106 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:49.106 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:49.106 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:49.106 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:49.106 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:49.106 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:49.106 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:49.106 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:49.106 [main] [30mTRACE[m  - ##################################################
16:16:49.106 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:49.106 [main] [30mTRACE[m  - ##################################################

16:16:49.106 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:49.920 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:49.920 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:49.920 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:49.920 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 25
16:16:49.920 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:50.121 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:50.121 [main] [30mTRACE[m  - ##############################################################
16:16:50.121 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:50.121 [main] [30mTRACE[m  - ##############################################################
16:16:50.121 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:50.121 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:50.121 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:50.122 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:50.122 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:50.122 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:50.122 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:50.122 [main] [30mTRACE[m  - ############################################################
16:16:50.122 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:50.122 [main] [30mTRACE[m  - ############################################################

16:16:50.122 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:50.122 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:50.122 [main] [30mTRACE[m  - ##########################
16:16:50.122 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:50.122 [main] [30mTRACE[m  - ##########################

16:16:50.122 [main] [30mTRACE[m  - ############################
16:16:50.122 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:50.122 [main] [30mTRACE[m  - ############################
16:16:50.122 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:50.122 [main] [30mTRACE[m  - #####################################
16:16:50.123 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:50.123 [main] [30mTRACE[m  - #####################################
16:16:50.123 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:50.123 [main] [30mTRACE[m  - ###########################################################
16:16:50.123 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:50.123 [main] [30mTRACE[m  - ###########################################################
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:50.123 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
16:16:50.123 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:50.123 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:50.123 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:50.123 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:50.123 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:50.123 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:50.123 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:50.123 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:50.123 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:50.123 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:50.123 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
16:16:50.123 [main] [30mTRACE[m  - ###############################################
16:16:50.124 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.124 [main] [30mTRACE[m  - ###############################################
16:16:50.124 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.124 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.124 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.124 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.124 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.124 [main] [30mTRACE[m  - #############################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.124 [main] [30mTRACE[m  - #############################################

16:16:50.124 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:50.124 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:50.124 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:50.124 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:50.124 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:50.124 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:50.124 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:50.124 [main] [30mTRACE[m  - #########################################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:50.124 [main] [30mTRACE[m  - #########################################################

16:16:50.124 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:50.124 [main] [30mTRACE[m  - ###################################
16:16:50.124 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:50.124 [main] [30mTRACE[m  - ###################################

16:16:50.124 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.124 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:50.124 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.124 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:50.124 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:50.125 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  25
16:16:50.125 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, E, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, E, A, B]
16:16:50.125 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:50.125 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:50.125 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:50.127 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:50.127 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:50.127 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
16:16:50.127 [main] [36mDEBUG[m  - ch_NewLetter :                                E
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################
16:16:50.127 [main] [30mTRACE[m  - ###########################################################################################################

16:16:50.127 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:50.127 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEEAB
16:16:50.127 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEEAB
16:16:50.331 [main] [30mTRACE[m  - ####################################################
16:16:50.332 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:50.332 [main] [30mTRACE[m  - ####################################################
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
16:16:50.332 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:50.332 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:50.332 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:50.332 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:50.332 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.332 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.332 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.332 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.332 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.332 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.332 [main] [30mTRACE[m  - #############################################
16:16:50.332 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.332 [main] [30mTRACE[m  - #############################################

16:16:50.332 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:50.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:50.332 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:50.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:50.332 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.333 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.333 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.333 [main] [30mTRACE[m  - #############################################
16:16:50.333 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - #############################################

16:16:50.333 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:50.333 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:50.333 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:50.333 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:50.333 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.333 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - ###############################################
16:16:50.333 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.333 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.333 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.333 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.333 [main] [30mTRACE[m  - #############################################
16:16:50.333 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.333 [main] [30mTRACE[m  - #############################################

16:16:50.333 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:50.334 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.334 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.334 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.334 [main] [30mTRACE[m  - #############################################
16:16:50.334 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - #############################################

16:16:50.334 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:50.334 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.334 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - ###############################################
16:16:50.334 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.334 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.334 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.334 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.334 [main] [30mTRACE[m  - #############################################
16:16:50.334 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.334 [main] [30mTRACE[m  - #############################################

16:16:50.334 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:50.335 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.335 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.335 [main] [30mTRACE[m  - #############################################
16:16:50.335 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - #############################################

16:16:50.335 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:50.335 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - ###############################################
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:50.335 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:50.335 [main] [36mDEBUG[m  - Index de la lettre
16:16:50.335 [main] [30mTRACE[m  - #############################################
16:16:50.335 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:50.335 [main] [30mTRACE[m  - #############################################

16:16:50.335 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:50.335 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
16:16:50.335 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:50.335 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:50.335 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:50.335 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
16:16:50.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
16:16:50.335 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
16:16:50.335 [main] [30mTRACE[m  - ##################################################
16:16:50.335 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:50.335 [main] [30mTRACE[m  - ##################################################

16:16:50.335 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:51.150 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:51.151 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
16:16:51.151 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
16:16:51.151 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 26
16:16:51.151 [main] [32mINFO [m  - Injection (int) Compteur de tours
16:16:51.353 [main] [32mINFO [m  - IF - Apr√®s premier tour
16:16:51.353 [main] [30mTRACE[m  - ##############################################################
16:16:51.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:51.353 [main] [30mTRACE[m  - ##############################################################
16:16:51.353 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
16:16:51.353 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
16:16:51.353 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
16:16:51.354 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
16:16:51.354 [main] [32mINFO [m  - ELSE - Sinon ...
16:16:51.354 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
16:16:51.354 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
16:16:51.354 [main] [30mTRACE[m  - ############################################################
16:16:51.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
16:16:51.354 [main] [30mTRACE[m  - ############################################################

16:16:51.354 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
16:16:51.354 [main] [30mTRACE[m  - ##########################
16:16:51.354 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
16:16:51.354 [main] [30mTRACE[m  - ##########################

16:16:51.354 [main] [30mTRACE[m  - ############################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
16:16:51.354 [main] [30mTRACE[m  - ############################
16:16:51.354 [main] [32mINFO [m  - IF - Mode "Duel"
16:16:51.354 [main] [30mTRACE[m  - #####################################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
16:16:51.354 [main] [30mTRACE[m  - #####################################
16:16:51.354 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
16:16:51.354 [main] [30mTRACE[m  - ###########################################################
16:16:51.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:51.354 [main] [30mTRACE[m  - ###########################################################
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
16:16:51.354 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
16:16:51.354 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, true]
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
16:16:51.355 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
16:16:51.355 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
16:16:51.355 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
16:16:51.355 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
16:16:51.355 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
16:16:51.355 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
16:16:51.355 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
16:16:51.355 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
16:16:51.355 [main] [30mTRACE[m  - ###############################################
16:16:51.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.355 [main] [30mTRACE[m  - ###############################################
16:16:51.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.355 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.356 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.356 [main] [30mTRACE[m  - #############################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.356 [main] [30mTRACE[m  - #############################################

16:16:51.356 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
16:16:51.356 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
16:16:51.356 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
16:16:51.356 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
16:16:51.356 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
16:16:51.356 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
16:16:51.356 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
16:16:51.356 [main] [30mTRACE[m  - #########################################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
16:16:51.356 [main] [30mTRACE[m  - #########################################################

16:16:51.356 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
16:16:51.356 [main] [30mTRACE[m  - ###################################
16:16:51.356 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
16:16:51.356 [main] [30mTRACE[m  - ###################################

16:16:51.356 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.356 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
16:16:51.356 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.356 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
16:16:51.356 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
16:16:51.356 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  26
16:16:51.356 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, F, A, B]
16:16:51.356 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
16:16:51.356 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
16:16:51.357 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
16:16:51.357 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

16:16:51.358 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, true]
16:16:51.358 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
16:16:51.358 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
16:16:51.358 [main] [36mDEBUG[m  - ch_NewLetter :                                F
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################
16:16:51.358 [main] [30mTRACE[m  - ###########################################################################################################

16:16:51.358 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
16:16:51.358 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
16:16:51.358 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEFAB
16:16:51.562 [main] [30mTRACE[m  - ####################################################
16:16:51.562 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
16:16:51.562 [main] [30mTRACE[m  - ####################################################
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, F, A, B]
16:16:51.563 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
16:16:51.563 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
16:16:51.563 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, true]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
16:16:51.563 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
16:16:51.563 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.563 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.563 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:51.563 [main] [30mTRACE[m  - ###############################################
16:16:51.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.563 [main] [30mTRACE[m  - ###############################################
16:16:51.563 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.563 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.563 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.563 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.563 [main] [30mTRACE[m  - #############################################
16:16:51.563 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - #############################################

16:16:51.564 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
16:16:51.564 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:51.564 [main] [30mTRACE[m  - ###############################################
16:16:51.564 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - ###############################################
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.564 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.564 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.564 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.564 [main] [30mTRACE[m  - #############################################
16:16:51.564 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.564 [main] [30mTRACE[m  - #############################################

16:16:51.564 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
16:16:51.564 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.564 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
16:16:51.564 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.565 [main] [30mTRACE[m  - #############################################
16:16:51.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - #############################################

16:16:51.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
16:16:51.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:51.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
16:16:51.565 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
16:16:51.565 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.565 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - ###############################################
16:16:51.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.565 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.565 [main] [30mTRACE[m  - #############################################
16:16:51.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.565 [main] [30mTRACE[m  - #############################################

16:16:51.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
16:16:51.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.566 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.566 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.566 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.566 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.566 [main] [30mTRACE[m  - #############################################
16:16:51.566 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - #############################################

16:16:51.566 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
16:16:51.566 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.566 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.566 [main] [30mTRACE[m  - ###############################################
16:16:51.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.567 [main] [30mTRACE[m  - #############################################
16:16:51.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - #############################################

16:16:51.567 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
16:16:51.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:51.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
16:16:51.567 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
16:16:51.567 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
16:16:51.567 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
16:16:51.567 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
16:16:51.567 [main] [30mTRACE[m  - ###############################################
16:16:51.567 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - ###############################################
16:16:51.567 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.567 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.567 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.567 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.567 [main] [30mTRACE[m  - #############################################
16:16:51.567 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.567 [main] [30mTRACE[m  - #############################################

16:16:51.568 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
16:16:51.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:51.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
16:16:51.568 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
16:16:51.568 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
16:16:51.568 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.568 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
16:16:51.568 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [8, 0, 0]
16:16:51.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : F
16:16:51.568 [main] [30mTRACE[m  - ###############################################
16:16:51.568 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
16:16:51.568 [main] [30mTRACE[m  - ###############################################
16:16:51.568 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
16:16:51.569 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
16:16:51.569 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.569 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
16:16:51.569 [main] [36mDEBUG[m  - Index de la lettre
16:16:51.569 [main] [30mTRACE[m  - #############################################
16:16:51.569 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
16:16:51.569 [main] [30mTRACE[m  - #############################################

16:16:51.569 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 5
16:16:51.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:51.569 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
16:16:51.569 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 1]
16:16:51.569 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
16:16:51.569 [main] [32mINFO [m  - FOR - Chaque unit√©
16:16:51.569 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [8, 0, 0]
16:16:51.569 [main] [30mTRACE[m  - ##################################################
16:16:51.569 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
16:16:51.569 [main] [30mTRACE[m  - ##################################################

16:16:51.569 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
16:16:52.381 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
16:16:52.381 [main] [32mINFO [m  - SI - Mode "D√©fense"
16:16:54.413 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
16:16:54.413 [main] [30mTRACE[m  - ##########################
16:16:54.413 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
16:16:54.413 [main] [30mTRACE[m  - ##########################
16:16:54.413 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
16:16:54.413 [main] [30mTRACE[m  - ####################################################################
16:16:54.413 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
16:16:54.413 [main] [30mTRACE[m  - ####################################################################
16:16:54.820 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
16:16:54.820 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
16:16:54.820 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
16:16:56.975 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
16:16:56.975 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:08:23.135 [main] [30mTRACE[m  - #######################################
04:08:23.175 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
04:08:23.175 [main] [30mTRACE[m  - #######################################
04:08:23.176 [main] [30mTRACE[m  - ######################################################################################
04:08:23.176 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
04:08:23.176 [main] [30mTRACE[m  - ######################################################################################
04:08:23.177 [main] [30mTRACE[m  - #############################################
04:08:23.179 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
04:08:23.179 [main] [30mTRACE[m  - #############################################
04:08:23.181 [main] [30mTRACE[m  - ###########################################
04:08:23.181 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
04:08:23.186 [main] [30mTRACE[m  - ###########################################

04:08:23.189 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
04:08:23.189 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
04:08:23.189 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
04:08:23.190 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
04:08:23.190 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
04:08:23.190 [main] [30mTRACE[m  - #########################################################
04:08:23.190 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
04:08:23.190 [main] [30mTRACE[m  - #########################################################
04:08:23.191 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
04:08:23.191 [main] [32mINFO [m  - FOR - Lancement boucle infini
04:08:23.200 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
04:08:23.200 [main] [32mINFO [m  - IF - Premier tour
04:08:25.728 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
04:08:25.728 [main] [30mTRACE[m  - ###########################################################
04:08:25.728 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
04:08:25.728 [main] [30mTRACE[m  - ###########################################################
04:08:25.730 [main] [30mTRACE[m  - #######################################
04:08:25.731 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
04:08:25.731 [main] [30mTRACE[m  - #######################################
04:08:25.731 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
04:08:25.731 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
04:08:25.733 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
04:08:26.559 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:08:26.559 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:08:26.560 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:08:42.662 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:08:42.663 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
04:08:42.664 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
04:08:42.664 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:08:42.664 [main] [32mINFO [m  - CASE - "Games"
04:08:42.665 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:08:42.665 [main] [32mINFO [m  - CASE - 'R'
04:08:42.868 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
04:08:42.869 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
04:08:42.869 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:08:43.679 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:08:43.679 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:08:43.679 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:09:10.172 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:09:10.173 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:09:10.174 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
04:09:10.174 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:09:10.175 [main] [32mINFO [m  - CASE - "Comfirm"
04:09:10.175 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:09:10.175 [main] [32mINFO [m  - CASE - 'O'
04:09:10.175 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:09:10.175 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
04:09:10.175 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
04:09:10.176 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:09:11.194 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:09:11.195 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:09:11.195 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:09:17.337 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:09:17.338 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 1
04:09:17.339 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 1
04:09:17.339 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:09:17.339 [main] [32mINFO [m  - CASE - "Modes"
04:09:17.339 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:09:17.339 [main] [32mINFO [m  - CASE - '1'
04:09:17.545 [main] [36mDEBUG[m  - M√†J - (String) Choix : Challenger
04:09:17.545 [main] [36mDEBUG[m  - str_ModeChoise : Challenger
04:09:17.545 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:09:18.356 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:09:18.357 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:09:18.357 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:09:19.569 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:09:19.570 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:09:19.570 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
04:09:19.570 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:09:19.570 [main] [32mINFO [m  - CASE - "Comfirm"
04:09:19.571 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:09:19.571 [main] [32mINFO [m  - CASE - 'O'
04:09:19.571 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:09:19.571 [main] [36mDEBUG[m  - str_ConfirmChoise : O
04:09:19.572 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
04:09:19.573 [main] [36mDEBUG[m  - (String) Choix du mode : Challenger
04:09:21.865 [main] [30mTRACE[m  - #####################################
04:09:21.866 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
04:09:21.866 [main] [30mTRACE[m  - #####################################

04:09:21.866 [main] [30mTRACE[m  - ################################################################################################
04:09:21.866 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
04:09:21.866 [main] [30mTRACE[m  - ################################################################################################
04:09:21.867 [main] [32mINFO [m  - SWITCH - Choix du jeu
04:09:21.867 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
04:09:21.895 [main] [32mINFO [m  - Instance "recherchePlusMoins"
04:09:21.896 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
04:09:21.896 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
04:09:21.896 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
04:09:21.897 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
04:09:21.898 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
04:09:21.899 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
04:09:21.899 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
04:09:21.899 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
04:09:21.899 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
04:09:21.899 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
04:09:21.899 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
04:09:21.900 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
04:09:21.900 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
04:09:21.900 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
04:09:21.901 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
04:09:21.901 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
04:09:21.901 [main] [32mINFO [m  - Lancement du compteur de tours
04:09:21.902 [main] [30mTRACE[m  - ###############################
04:09:21.902 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:09:21.903 [main] [30mTRACE[m  - ###############################
04:09:21.903 [main] [32mINFO [m  - // IF - Premier tour
04:09:22.108 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.109 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 0, 0, 0, 0, 0, 0, 0]
04:09:22.109 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.110 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 0, 0, 0, 0, 0, 0]
04:09:22.111 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.112 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 0, 0, 0, 0, 0]
04:09:22.112 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.113 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 2, 0, 0, 0, 0]
04:09:22.113 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.113 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 2, 8, 0, 0, 0]
04:09:22.115 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.115 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 2, 8, 8, 0, 0]
04:09:22.115 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.115 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 2, 8, 8, 2, 0]
04:09:22.115 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:09:22.116 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [0, 2, 1, 2, 8, 8, 2, 8]
04:09:22.116 [main] [36mDEBUG[m  - Nombre al√©atoire g√©n√©r√© : [0, 2, 1, 2, 8, 8, 2, 8]
04:09:22.117 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te al√©atoire : [I@21d03963
04:09:23.345 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:09:23.346 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:09:23.355 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:09:23.356 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:09:23.356 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:09:23.357 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:09:23.358 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:09:23.561 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:09:23.562 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:09:23.562 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:09:23.563 [main] [32mINFO [m  - try
04:09:36.262 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 55555555
04:09:36.263 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:09:36.263 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:09:36.263 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:36.264 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:09:36.265 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:36.265 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:36.266 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:09:36.266 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:09:36.268 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:09:36.268 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:09:36.269 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:09:36.270 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:36.270 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:09:36.270 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:09:36.271 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:09:36.271 [main] [36mDEBUG[m  - int_IStart : 7
04:09:36.291 [main] [36mDEBUG[m  - (array int) Combinaison : [5, 5, 5, 5, 5, 5, 5, 5]
04:09:36.292 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:09:36.496 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [5, 5, 5, 5, 5, 5, 5, 5]
04:09:36.496 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [0, 2, 1, 2, 8, 8, 2, 8]
04:09:36.496 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:09:36.497 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:09:36.497 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:36.497 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:09:36.706 [main] [30mTRACE[m  - ###############################
04:09:36.706 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:09:36.706 [main] [30mTRACE[m  - ###############################
04:09:36.706 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:09:36.706 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:09:36.706 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:09:36.707 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:09:36.707 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:09:36.911 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:09:36.912 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:09:36.912 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:09:36.912 [main] [32mINFO [m  - try
04:09:48.341 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 33337737
04:09:48.341 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:09:48.341 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:09:48.341 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:48.341 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:09:48.342 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:48.342 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:48.342 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:09:48.342 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:09:48.342 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:09:48.342 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:09:48.342 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:09:48.342 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:48.343 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:09:48.343 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:09:48.343 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:09:48.343 [main] [36mDEBUG[m  - int_IStart : 7
04:09:48.343 [main] [36mDEBUG[m  - (array int) Combinaison : [3, 3, 3, 3, 7, 7, 3, 7]
04:09:48.343 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [3, 3, 3, 3, 7, 7, 3, 7]
04:09:48.345 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
04:09:48.772 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [3, 3, 3, 3, 7, 7, 3, 7]
04:09:48.772 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [0, 2, 1, 2, 8, 8, 2, 8]
04:09:48.773 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:09:48.773 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:09:48.773 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:48.773 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:48.774 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:48.774 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:48.774 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:48.774 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:48.775 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:48.775 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:09:48.776 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:09:48.981 [main] [30mTRACE[m  - ###############################
04:09:48.981 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:09:48.981 [main] [30mTRACE[m  - ###############################
04:09:48.981 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:09:48.981 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:09:48.981 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:09:48.981 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:09:48.981 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:09:49.186 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:09:49.186 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:09:49.187 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:09:49.187 [main] [32mINFO [m  - try
04:09:58.518 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 22228828
04:09:58.520 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:09:58.520 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:09:58.520 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:58.521 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:09:58.521 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:09:58.521 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:58.523 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:09:58.523 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:09:58.523 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:09:58.523 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:09:58.523 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:09:58.523 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:09:58.524 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:09:58.524 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:09:58.524 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:09:58.524 [main] [36mDEBUG[m  - int_IStart : 7
04:09:58.524 [main] [36mDEBUG[m  - (array int) Combinaison : [2, 2, 2, 2, 8, 8, 2, 8]
04:09:58.524 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [2, 2, 2, 2, 8, 8, 2, 8]
04:09:58.524 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
04:09:58.926 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [2, 2, 2, 2, 8, 8, 2, 8]
04:09:58.927 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [0, 2, 1, 2, 8, 8, 2, 8]
04:09:58.927 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:09:58.927 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:09:58.927 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.927 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.928 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:09:58.928 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:09:59.132 [main] [30mTRACE[m  - ###############################
04:09:59.133 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:09:59.133 [main] [30mTRACE[m  - ###############################
04:09:59.133 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:09:59.134 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:09:59.134 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:09:59.134 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:09:59.134 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:09:59.339 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:09:59.339 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:09:59.339 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:09:59.339 [main] [32mINFO [m  - try
04:10:06.991 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 12128828
04:10:06.992 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:10:06.992 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:10:06.992 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:06.992 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:10:06.992 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:06.992 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:06.992 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:10:06.992 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:10:06.993 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:10:06.993 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:10:06.993 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:10:06.993 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:06.993 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:10:06.993 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:10:06.993 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:10:06.993 [main] [36mDEBUG[m  - int_IStart : 7
04:10:06.994 [main] [36mDEBUG[m  - (array int) Combinaison : [1, 2, 1, 2, 8, 8, 2, 8]
04:10:06.994 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [1, 2, 1, 2, 8, 8, 2, 8]
04:10:06.994 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
04:10:07.402 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [1, 2, 1, 2, 8, 8, 2, 8]
04:10:07.402 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [0, 2, 1, 2, 8, 8, 2, 8]
04:10:07.402 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:07.403 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:10:07.403 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:07.403 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:10:07.608 [main] [30mTRACE[m  - ###############################
04:10:07.609 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:10:07.609 [main] [30mTRACE[m  - ###############################
04:10:07.609 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:10:07.609 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:10:07.609 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:10:07.609 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:10:07.609 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:10:07.815 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:10:07.815 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:10:07.815 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:10:07.816 [main] [32mINFO [m  - try
04:10:14.760 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 2128828
04:10:14.760 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:10:14.760 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:10:14.760 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:14.760 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:10:14.761 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:14.761 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:14.761 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:10:14.761 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:10:14.761 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:10:14.761 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:10:14.761 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:10:14.761 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:14.762 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:10:14.762 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:10:14.762 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:10:14.762 [main] [36mDEBUG[m  - int_IStart : 7
04:10:14.762 [main] [36mDEBUG[m  - (array int) Combinaison : [0, 2, 1, 2, 8, 8, 2, 8]
04:10:14.762 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [0, 2, 1, 2, 8, 8, 2, 8]
04:10:14.762 [main] [32mINFO [m  - IF - Pas le premier tour && Pas mode "Duel" && L'ordinateur n'a pas gagn√©
04:10:15.170 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [0, 2, 1, 2, 8, 8, 2, 8]
04:10:15.171 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [0, 2, 1, 2, 8, 8, 2, 8]
04:10:15.171 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:15.171 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.172 [main] [32mINFO [m  - ELSE - L'unit√© √† comparer est = que l'unit√© compar√©e
04:10:15.173 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:10:15.377 [main] [32mINFO [m  - // IF - Mode "Challenger" && Le r√©sultat de la comparaison = r√©sultat gagnant
04:10:17.412 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e : true
04:10:17.412 [main] [30mTRACE[m  - #############################
04:10:17.412 [main] [30mTRACE[m  - ### END ### Mode "Challenger"
04:10:17.413 [main] [30mTRACE[m  - #############################
04:10:17.413 [main] [32mINFO [m  - Lancement du jeu "Recherche +/-"
04:10:17.413 [main] [30mTRACE[m  - ####################################################################
04:10:17.413 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
04:10:17.413 [main] [30mTRACE[m  - ####################################################################
04:10:17.820 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:17.820 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:17.821 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:10:23.427 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:10:23.427 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:10:23.427 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
04:10:23.427 [main] [30mTRACE[m  - ###########################################################
04:10:23.427 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
04:10:23.427 [main] [30mTRACE[m  - ###########################################################
04:10:23.427 [main] [30mTRACE[m  - #######################################
04:10:23.428 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
04:10:23.428 [main] [30mTRACE[m  - #######################################
04:10:23.428 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
04:10:23.428 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
04:10:23.428 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
04:10:24.242 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:24.242 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:24.242 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:10:26.199 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:10:26.199 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
04:10:26.200 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
04:10:26.200 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:10:26.200 [main] [32mINFO [m  - CASE - "Games"
04:10:26.200 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:10:26.200 [main] [32mINFO [m  - CASE - 'R'
04:10:26.405 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
04:10:26.405 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
04:10:26.405 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:10:27.219 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:27.220 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:27.220 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:10:30.822 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:10:30.822 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:10:30.823 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
04:10:30.823 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:10:30.823 [main] [32mINFO [m  - CASE - "Comfirm"
04:10:30.823 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:10:30.823 [main] [32mINFO [m  - CASE - 'O'
04:10:30.823 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:10:30.823 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
04:10:30.823 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
04:10:30.823 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:10:31.842 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:31.842 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:31.842 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:10:34.088 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:10:34.088 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
04:10:34.088 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
04:10:34.088 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:10:34.088 [main] [32mINFO [m  - CASE - "Modes"
04:10:34.088 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:10:34.088 [main] [32mINFO [m  - CASE - '2'
04:10:34.293 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
04:10:34.293 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
04:10:34.293 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:10:35.108 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:35.108 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:35.108 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:10:35.905 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:10:35.905 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:10:35.906 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
04:10:35.906 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:10:35.906 [main] [32mINFO [m  - CASE - "Comfirm"
04:10:35.906 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:10:35.906 [main] [32mINFO [m  - CASE - 'O'
04:10:35.907 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:10:35.907 [main] [36mDEBUG[m  - str_ConfirmChoise : O
04:10:35.907 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
04:10:35.907 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
04:10:38.143 [main] [30mTRACE[m  - #####################################
04:10:38.143 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
04:10:38.143 [main] [30mTRACE[m  - #####################################

04:10:38.143 [main] [30mTRACE[m  - ################################################################################################
04:10:38.143 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
04:10:38.144 [main] [30mTRACE[m  - ################################################################################################
04:10:38.144 [main] [32mINFO [m  - SWITCH - Choix du jeu
04:10:38.144 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
04:10:38.144 [main] [32mINFO [m  - Instance "recherchePlusMoins"
04:10:38.144 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
04:10:38.144 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
04:10:38.144 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
04:10:38.144 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
04:10:38.144 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
04:10:38.145 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
04:10:38.145 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
04:10:38.145 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
04:10:38.145 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
04:10:38.145 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
04:10:38.145 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
04:10:38.145 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
04:10:38.145 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
04:10:38.145 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
04:10:38.146 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
04:10:38.147 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
04:10:38.147 [main] [32mINFO [m  - Lancement du compteur de tours
04:10:38.147 [main] [30mTRACE[m  - ############################
04:10:38.147 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:10:38.147 [main] [30mTRACE[m  - ############################
04:10:38.148 [main] [32mINFO [m  - IF - Mode "Duel"
04:10:38.148 [main] [32mINFO [m  - SI - Premier tour
04:10:38.963 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:10:38.963 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:10:39.168 [main] [36mDEBUG[m  - Initialisation (int) Combinaison Try Catch : 0
04:10:39.175 [main] [36mDEBUG[m  - Initialisation (boolean) Combinaison valid√©e : false
04:10:39.175 [main] [32mINFO [m  - DO {} WHILE - La Combinaison n'est pas valid√©e
04:10:39.178 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:10:39.179 [main] [32mINFO [m  - CASE - Mode "D√©fense"
04:10:39.385 [main] [32mINFO [m  - Lance le scanner pour le combinaison secr√®te
04:10:39.386 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:10:39.386 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:10:39.387 [main] [32mINFO [m  - try
04:10:42.396 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 12093487
04:10:42.396 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:10:42.396 [main] [32mINFO [m  - V√©rifie si la combinaison secr√®te ne contient bien que des nombres
04:10:42.396 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:42.396 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:10:42.397 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:10:42.397 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:42.397 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:10:42.397 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:10:42.397 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:10:42.397 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:10:42.397 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:10:42.397 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:10:42.398 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:10:42.398 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:10:42.398 [main] [32mINFO [m  - V√©rifie la validit√© de la combinaison secr√®te
04:10:42.398 [main] [32mINFO [m  - DO {} WHILE - Sortie -> La combinaison est valid√©e
04:10:42.398 [main] [36mDEBUG[m  - int_IStart : 7
04:10:42.398 [main] [36mDEBUG[m  - (array int) Combinaison : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:42.399 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison secr√®te en tableau d'entiers : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:42.399 [main] [32mINFO [m  - M√†J - Combinaison secr√®te dans ArrayList "al_RecherchePlusMoins_Defense"
04:10:42.603 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Derniers sup√©rieur : [0, 0, 0, 0, 0, 0, 0, 0]
04:10:42.603 [main] [32mINFO [m  - FOR - Chaque unit√© du tableau des derniers sup√©rieurs
04:10:42.604 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [9, 9, 9, 9, 9, 9, 9, 9]
04:10:42.604 [main] [30mTRACE[m  - #####################################
04:10:42.604 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:10:42.604 [main] [30mTRACE[m  - #####################################
04:10:42.604 [main] [30mTRACE[m  - ####################################################
04:10:42.604 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:10:42.604 [main] [30mTRACE[m  - ####################################################
04:10:42.605 [main] [32mINFO [m  - IF - Premier tour
04:10:42.605 [main] [30mTRACE[m  - #############################################################
04:10:42.605 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_FirstComputerProposal()
04:10:42.606 [main] [30mTRACE[m  - #############################################################
04:10:42.607 [main] [32mINFO [m  - Injection de 5 dans premi√®re proposition de l'ordinateur
04:10:42.608 [main] [36mDEBUG[m  - (int[]) Premi√®re proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:42.608 [main] [30mTRACE[m  - ###########################################################
04:10:42.608 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_FirstComputerProposal()
04:10:42.608 [main] [30mTRACE[m  - ###########################################################

04:10:42.608 [main] [32mINFO [m  - Lance premi√®re proposition de l'ordinateur
04:10:42.609 [main] [30mTRACE[m  - ##################################################
04:10:42.609 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:10:42.609 [main] [30mTRACE[m  - ##################################################

04:10:42.609 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:10:42.609 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:42.610 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 55555555
04:10:42.837 [main] [30mTRACE[m  - #######################################################
04:10:42.838 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:10:42.838 [main] [30mTRACE[m  - #######################################################
04:10:42.839 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:42.840 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:42.840 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:42.840 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:42.841 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:42.842 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:42.842 [main] [30mTRACE[m  - ######################################################
04:10:42.842 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:10:42.842 [main] [30mTRACE[m  - ######################################################

04:10:42.842 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:10:42.843 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:42.843 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+--++
04:10:42.844 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+--++
04:10:43.049 [main] [30mTRACE[m  - ###################################
04:10:43.049 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:10:43.050 [main] [30mTRACE[m  - ###################################

04:10:43.052 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:43.052 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+--++
04:10:43.055 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+--++
04:10:43.056 [main] [30mTRACE[m  - ############################
04:10:43.056 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:10:43.057 [main] [30mTRACE[m  - ############################
04:10:43.057 [main] [32mINFO [m  - IF - Mode "Duel"
04:10:43.057 [main] [30mTRACE[m  - #####################################
04:10:43.057 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:10:43.057 [main] [30mTRACE[m  - #####################################
04:10:43.057 [main] [30mTRACE[m  - ####################################################
04:10:43.057 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:10:43.057 [main] [30mTRACE[m  - ####################################################
04:10:43.057 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:10:43.260 [main] [30mTRACE[m  - ##########################################################
04:10:43.261 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:43.261 [main] [30mTRACE[m  - ##########################################################
04:10:43.261 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 0, 0, 0, 0, 0]
04:10:43.262 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:43.263 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:43.263 [main] [32mINFO [m  - FOR - Les positions '+'
04:10:43.264 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:10:43.264 [main] [30mTRACE[m  - ########################################################
04:10:43.264 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:43.264 [main] [30mTRACE[m  - ########################################################

04:10:43.264 [main] [30mTRACE[m  - ##########################################################
04:10:43.264 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:43.264 [main] [30mTRACE[m  - ##########################################################
04:10:43.264 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [9, 9, 9, 9, 9, 9, 9, 9]
04:10:43.265 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:43.265 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:43.265 [main] [32mINFO [m  - FOR - Les positions '-'
04:10:43.266 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [5, 5, 5, 9, 5, 5, 9, 9]
04:10:43.266 [main] [30mTRACE[m  - ########################################################
04:10:43.266 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:43.266 [main] [30mTRACE[m  - ########################################################

04:10:43.266 [main] [30mTRACE[m  - ##############################################################
04:10:43.266 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:10:43.267 [main] [30mTRACE[m  - ##############################################################
04:10:43.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:10:43.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [5, 5, 5, 9, 5, 5, 9, 9]
04:10:43.269 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:10:43.270 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:10:43.272 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [-, -, -, +, -, -, +, +]
04:10:43.272 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:10:43.272 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.273 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.274 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.274 [main] [30mTRACE[m  - ############################################################
04:10:43.274 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:10:43.274 [main] [30mTRACE[m  - ############################################################

04:10:43.274 [main] [32mINFO [m  - Lancement second type de proposition
04:10:43.274 [main] [30mTRACE[m  - ##################################################
04:10:43.274 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:10:43.274 [main] [30mTRACE[m  - ##################################################

04:10:43.275 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:10:43.275 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.275 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 33373377
04:10:43.479 [main] [30mTRACE[m  - #######################################################
04:10:43.479 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:10:43.480 [main] [30mTRACE[m  - #######################################################
04:10:43.480 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:43.480 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.480 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:43.480 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:43.480 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:43.480 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.480 [main] [30mTRACE[m  - ######################################################
04:10:43.480 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:10:43.480 [main] [30mTRACE[m  - ######################################################

04:10:43.480 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:10:43.480 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.480 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+=++=
04:10:43.481 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+=++=
04:10:43.682 [main] [30mTRACE[m  - ###################################
04:10:43.682 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:10:43.683 [main] [30mTRACE[m  - ###################################

04:10:43.683 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.683 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+=++=
04:10:43.683 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+=++=
04:10:43.683 [main] [30mTRACE[m  - ############################
04:10:43.683 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:10:43.683 [main] [30mTRACE[m  - ############################
04:10:43.683 [main] [32mINFO [m  - IF - Mode "Duel"
04:10:43.684 [main] [30mTRACE[m  - #####################################
04:10:43.684 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:10:43.684 [main] [30mTRACE[m  - #####################################
04:10:43.684 [main] [30mTRACE[m  - ####################################################
04:10:43.684 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:10:43.684 [main] [30mTRACE[m  - ####################################################
04:10:43.684 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:10:43.888 [main] [30mTRACE[m  - ##########################################################
04:10:43.888 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:43.888 [main] [30mTRACE[m  - ##########################################################
04:10:43.888 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:10:43.888 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.888 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.888 [main] [32mINFO [m  - FOR - Les positions '+'
04:10:43.888 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 7, 0, 3, 7, 5]
04:10:43.888 [main] [30mTRACE[m  - ########################################################
04:10:43.888 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:43.888 [main] [30mTRACE[m  - ########################################################

04:10:43.888 [main] [30mTRACE[m  - ##########################################################
04:10:43.888 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:43.888 [main] [30mTRACE[m  - ##########################################################
04:10:43.888 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [5, 5, 5, 9, 5, 5, 9, 9]
04:10:43.888 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.888 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.888 [main] [32mINFO [m  - FOR - Les positions '-'
04:10:43.888 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [3, 3, 3, 9, 5, 5, 9, 9]
04:10:43.888 [main] [30mTRACE[m  - ########################################################
04:10:43.889 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:43.889 [main] [30mTRACE[m  - ########################################################

04:10:43.889 [main] [30mTRACE[m  - ##############################################################
04:10:43.889 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:10:43.889 [main] [30mTRACE[m  - ##############################################################
04:10:43.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 7, 0, 3, 7, 5]
04:10:43.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [3, 3, 3, 9, 5, 5, 9, 9]
04:10:43.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:10:43.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:10:43.889 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [-, -, -, +, =, +, +, =]
04:10:43.889 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:43.889 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:43.889 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:43.889 [main] [30mTRACE[m  - ############################################################
04:10:43.889 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:10:43.889 [main] [30mTRACE[m  - ############################################################

04:10:43.889 [main] [32mINFO [m  - Lancement second type de proposition
04:10:43.889 [main] [30mTRACE[m  - ##################################################
04:10:43.889 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:10:43.889 [main] [30mTRACE[m  - ##################################################

04:10:43.889 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:10:43.889 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:43.890 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 22283487
04:10:44.092 [main] [30mTRACE[m  - #######################################################
04:10:44.093 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:10:44.093 [main] [30mTRACE[m  - #######################################################
04:10:44.093 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:44.093 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:44.093 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:44.093 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:10:44.093 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:44.093 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.093 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:44.093 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:10:44.093 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.093 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.093 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.093 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.093 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.094 [main] [30mTRACE[m  - ######################################################
04:10:44.094 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:10:44.094 [main] [30mTRACE[m  - ######################################################

04:10:44.094 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:10:44.094 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.094 [main] [36mDEBUG[m  - Incr√©mentation String() : -=-+====
04:10:44.094 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : -=-+====
04:10:44.299 [main] [30mTRACE[m  - ###################################
04:10:44.299 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:10:44.299 [main] [30mTRACE[m  - ###################################

04:10:44.299 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.299 [main] [36mDEBUG[m  - Incr√©mentation String() : -=-+====
04:10:44.299 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : -=-+====
04:10:44.299 [main] [30mTRACE[m  - ############################
04:10:44.299 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:10:44.299 [main] [30mTRACE[m  - ############################
04:10:44.300 [main] [32mINFO [m  - IF - Mode "Duel"
04:10:44.300 [main] [30mTRACE[m  - #####################################
04:10:44.300 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:10:44.300 [main] [30mTRACE[m  - #####################################
04:10:44.300 [main] [30mTRACE[m  - ####################################################
04:10:44.300 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:10:44.300 [main] [30mTRACE[m  - ####################################################
04:10:44.300 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:10:44.504 [main] [30mTRACE[m  - ##########################################################
04:10:44.504 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:44.504 [main] [30mTRACE[m  - ##########################################################
04:10:44.504 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 7, 0, 3, 7, 5]
04:10:44.505 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:44.505 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.505 [main] [32mINFO [m  - FOR - Les positions '+'
04:10:44.505 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 8, 0, 3, 7, 5]
04:10:44.505 [main] [30mTRACE[m  - ########################################################
04:10:44.505 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:44.505 [main] [30mTRACE[m  - ########################################################

04:10:44.505 [main] [30mTRACE[m  - ##########################################################
04:10:44.505 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:44.505 [main] [30mTRACE[m  - ##########################################################
04:10:44.505 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [3, 3, 3, 9, 5, 5, 9, 9]
04:10:44.506 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:44.506 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.506 [main] [32mINFO [m  - FOR - Les positions '-'
04:10:44.506 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [2, 3, 2, 9, 5, 5, 9, 9]
04:10:44.506 [main] [30mTRACE[m  - ########################################################
04:10:44.506 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:44.506 [main] [30mTRACE[m  - ########################################################

04:10:44.509 [main] [30mTRACE[m  - ##############################################################
04:10:44.509 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:10:44.509 [main] [30mTRACE[m  - ##############################################################
04:10:44.510 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 8, 0, 3, 7, 5]
04:10:44.510 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [2, 3, 2, 9, 5, 5, 9, 9]
04:10:44.510 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:10:44.510 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:10:44.510 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [-, =, -, +, =, =, =, =]
04:10:44.510 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:44.510 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:44.511 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:44.511 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:44.512 [main] [30mTRACE[m  - ############################################################
04:10:44.512 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:10:44.512 [main] [30mTRACE[m  - ############################################################

04:10:44.512 [main] [32mINFO [m  - Lancement second type de proposition
04:10:44.512 [main] [30mTRACE[m  - ##################################################
04:10:44.512 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:10:44.512 [main] [30mTRACE[m  - ##################################################

04:10:44.512 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:10:44.513 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:44.513 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 12193487
04:10:44.718 [main] [30mTRACE[m  - #######################################################
04:10:44.718 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:10:44.718 [main] [30mTRACE[m  - #######################################################
04:10:44.718 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:44.718 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:44.718 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:44.718 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:44.719 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:44.719 [main] [30mTRACE[m  - ######################################################
04:10:44.719 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:10:44.719 [main] [30mTRACE[m  - ######################################################

04:10:44.719 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:10:44.719 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:44.719 [main] [36mDEBUG[m  - Incr√©mentation String() : ==-=====
04:10:44.720 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ==-=====
04:10:44.923 [main] [30mTRACE[m  - ###################################
04:10:44.924 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:10:44.924 [main] [30mTRACE[m  - ###################################

04:10:44.924 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:44.924 [main] [36mDEBUG[m  - Incr√©mentation String() : ==-=====
04:10:44.924 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ==-=====
04:10:44.924 [main] [30mTRACE[m  - ############################
04:10:44.924 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:10:44.924 [main] [30mTRACE[m  - ############################
04:10:44.924 [main] [32mINFO [m  - IF - Mode "Duel"
04:10:44.925 [main] [30mTRACE[m  - #####################################
04:10:44.925 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:10:44.925 [main] [30mTRACE[m  - #####################################
04:10:44.925 [main] [30mTRACE[m  - ####################################################
04:10:44.925 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:10:44.925 [main] [30mTRACE[m  - ####################################################
04:10:44.925 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:10:45.128 [main] [30mTRACE[m  - ##########################################################
04:10:45.128 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:45.129 [main] [30mTRACE[m  - ##########################################################
04:10:45.129 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 8, 0, 3, 7, 5]
04:10:45.129 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:45.129 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:45.129 [main] [32mINFO [m  - FOR - Les positions '+'
04:10:45.129 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 8, 0, 3, 7, 5]
04:10:45.129 [main] [30mTRACE[m  - ########################################################
04:10:45.129 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:10:45.129 [main] [30mTRACE[m  - ########################################################

04:10:45.129 [main] [30mTRACE[m  - ##########################################################
04:10:45.129 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:45.129 [main] [30mTRACE[m  - ##########################################################
04:10:45.129 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [2, 3, 2, 9, 5, 5, 9, 9]
04:10:45.129 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:45.130 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:45.130 [main] [32mINFO [m  - FOR - Les positions '-'
04:10:45.130 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [2, 3, 1, 9, 5, 5, 9, 9]
04:10:45.130 [main] [30mTRACE[m  - ########################################################
04:10:45.130 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:10:45.130 [main] [30mTRACE[m  - ########################################################

04:10:45.130 [main] [30mTRACE[m  - ##############################################################
04:10:45.130 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:10:45.130 [main] [30mTRACE[m  - ##############################################################
04:10:45.130 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 8, 0, 3, 7, 5]
04:10:45.130 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [2, 3, 1, 9, 5, 5, 9, 9]
04:10:45.130 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [1, 2, 1, 9, 3, 4, 8, 7]
04:10:45.130 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [=, =, -, =, =, =, =, =]
04:10:45.130 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [=, =, -, =, =, =, =, =]
04:10:45.130 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:10:45.130 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.130 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.130 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:10:45.130 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.131 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.131 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.131 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.131 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:10:45.131 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:45.131 [main] [30mTRACE[m  - ############################################################
04:10:45.131 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:10:45.131 [main] [30mTRACE[m  - ############################################################

04:10:45.131 [main] [32mINFO [m  - Lancement second type de proposition
04:10:45.131 [main] [30mTRACE[m  - ##################################################
04:10:45.131 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:10:45.131 [main] [30mTRACE[m  - ##################################################

04:10:45.131 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:10:45.131 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:45.131 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 12093487
04:10:45.336 [main] [30mTRACE[m  - #######################################################
04:10:45.336 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:10:45.336 [main] [30mTRACE[m  - #######################################################
04:10:45.337 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:45.337 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [1, 2, 0, 9, 3, 4, 8, 7]
04:10:45.337 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:10:45.337 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.337 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.338 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.338 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:10:45.338 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [=, =, =, =, =, =, =, =]
04:10:45.338 [main] [30mTRACE[m  - ######################################################
04:10:45.338 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:10:45.338 [main] [30mTRACE[m  - ######################################################

04:10:45.338 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:10:45.338 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [=, =, =, =, =, =, =, =]
04:10:45.338 [main] [36mDEBUG[m  - Incr√©mentation String() : ========
04:10:45.338 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ========
04:10:45.543 [main] [30mTRACE[m  - ###################################
04:10:45.544 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:10:45.544 [main] [30mTRACE[m  - ###################################

04:10:45.545 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [=, =, =, =, =, =, =, =]
04:10:45.545 [main] [36mDEBUG[m  - Incr√©mentation String() : ========
04:10:45.545 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ========
04:10:45.545 [main] [32mINFO [m  - IF - Le r√©sultat de la comparaison est √©gale le r√©sultat gagnant
04:10:45.545 [main] [32mINFO [m  - SI - Mode "D√©fense"
04:10:47.573 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
04:10:47.573 [main] [30mTRACE[m  - ##########################
04:10:47.573 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
04:10:47.574 [main] [30mTRACE[m  - ##########################
04:10:47.574 [main] [32mINFO [m  - Lancement du jeu "Recherche +/-"
04:10:47.574 [main] [30mTRACE[m  - ####################################################################
04:10:47.574 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
04:10:47.574 [main] [30mTRACE[m  - ####################################################################
04:10:47.982 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:10:47.982 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:10:47.982 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:39.844 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:39.845 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:39.845 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
04:11:39.845 [main] [30mTRACE[m  - ###########################################################
04:11:39.845 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
04:11:39.845 [main] [30mTRACE[m  - ###########################################################
04:11:39.845 [main] [30mTRACE[m  - #######################################
04:11:39.845 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
04:11:39.845 [main] [30mTRACE[m  - #######################################
04:11:39.845 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
04:11:39.845 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
04:11:39.846 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
04:11:40.659 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:40.659 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:40.659 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:43.384 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:43.384 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
04:11:43.384 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
04:11:43.384 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:43.384 [main] [32mINFO [m  - CASE - "Games"
04:11:43.384 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:43.384 [main] [32mINFO [m  - CASE - 'R'
04:11:43.589 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
04:11:43.589 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
04:11:43.589 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:11:44.405 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:44.405 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:44.406 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:45.998 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:45.998 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:11:45.998 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
04:11:45.998 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:45.998 [main] [32mINFO [m  - CASE - "Comfirm"
04:11:45.998 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:45.999 [main] [32mINFO [m  - CASE - 'O'
04:11:45.999 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:11:45.999 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
04:11:45.999 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
04:11:45.999 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:11:47.014 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:47.014 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:47.014 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:48.778 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:48.778 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
04:11:48.778 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
04:11:48.778 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:48.778 [main] [32mINFO [m  - CASE - "Modes"
04:11:48.778 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:48.778 [main] [32mINFO [m  - CASE - '2'
04:11:48.983 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
04:11:48.983 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
04:11:48.983 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:11:49.800 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:49.800 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:49.800 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:51.312 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:51.312 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : n
04:11:51.312 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : N
04:11:51.312 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:51.312 [main] [32mINFO [m  - CASE - "Comfirm"
04:11:51.313 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:51.313 [main] [32mINFO [m  - CASE - 'N'
04:11:51.313 [main] [36mDEBUG[m  - M√†J - (String) Choix : N
04:11:51.313 [main] [36mDEBUG[m  - str_ConfirmChoise : N
04:11:51.313 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:11:52.333 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:52.334 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:52.335 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:53.304 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:53.304 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 3
04:11:53.304 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 3
04:11:53.304 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:53.304 [main] [32mINFO [m  - CASE - "Modes"
04:11:53.304 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:53.304 [main] [32mINFO [m  - CASE - '3'
04:11:53.509 [main] [36mDEBUG[m  - M√†J - (String) Choix : Duel
04:11:53.510 [main] [36mDEBUG[m  - str_ModeChoise : Duel
04:11:53.510 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:11:54.323 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:11:54.323 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:11:54.323 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:11:57.614 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:11:57.615 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:11:57.615 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
04:11:57.615 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:11:57.615 [main] [32mINFO [m  - CASE - "Comfirm"
04:11:57.615 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:11:57.615 [main] [32mINFO [m  - CASE - 'O'
04:11:57.615 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:11:57.615 [main] [36mDEBUG[m  - str_ConfirmChoise : O
04:11:57.615 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
04:11:57.615 [main] [36mDEBUG[m  - (String) Choix du mode : Duel
04:11:59.847 [main] [30mTRACE[m  - #####################################
04:11:59.847 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
04:11:59.848 [main] [30mTRACE[m  - #####################################

04:11:59.848 [main] [30mTRACE[m  - ################################################################################################
04:11:59.848 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
04:11:59.848 [main] [30mTRACE[m  - ################################################################################################
04:11:59.849 [main] [32mINFO [m  - SWITCH - Choix du jeu
04:11:59.849 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
04:11:59.850 [main] [32mINFO [m  - Instance "recherchePlusMoins"
04:11:59.850 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
04:11:59.850 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
04:11:59.850 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
04:11:59.850 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
04:11:59.850 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
04:11:59.850 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
04:11:59.850 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
04:11:59.850 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
04:11:59.850 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
04:11:59.850 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
04:11:59.850 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
04:11:59.850 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
04:11:59.850 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
04:11:59.850 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
04:11:59.850 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
04:11:59.850 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
04:11:59.850 [main] [32mINFO [m  - Lancement du compteur de tours
04:11:59.850 [main] [30mTRACE[m  - ############################
04:11:59.850 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:11:59.850 [main] [30mTRACE[m  - ############################
04:11:59.850 [main] [32mINFO [m  - IF - Mode "Duel"
04:11:59.850 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : D√©fense
04:11:59.851 [main] [32mINFO [m  - SI - Premier tour
04:12:00.051 [main] [32mINFO [m  - SI - Mode "Duel", affiche l'√©nonc√©
04:12:01.273 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:12:01.273 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:12:01.479 [main] [36mDEBUG[m  - Initialisation (int) Combinaison Try Catch : 0
04:12:01.479 [main] [36mDEBUG[m  - Initialisation (boolean) Combinaison valid√©e : false
04:12:01.479 [main] [32mINFO [m  - DO {} WHILE - La Combinaison n'est pas valid√©e
04:12:01.479 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:12:01.479 [main] [32mINFO [m  - CASE - Mode "Duel"
04:12:01.479 [main] [32mINFO [m  - SWITCH - Le sous-mode en mode "Duel"
04:12:01.683 [main] [32mINFO [m  - Lance le scanner pour le combinaison secr√®te
04:12:01.683 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:12:01.683 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:12:01.683 [main] [32mINFO [m  - try
04:12:34.671 [main] [30mTRACE[m  - #######################################
04:12:34.675 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
04:12:34.675 [main] [30mTRACE[m  - #######################################
04:12:34.675 [main] [30mTRACE[m  - ######################################################################################
04:12:34.675 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
04:12:34.676 [main] [30mTRACE[m  - ######################################################################################
04:12:34.676 [main] [30mTRACE[m  - #############################################
04:12:34.676 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
04:12:34.677 [main] [30mTRACE[m  - #############################################
04:12:34.677 [main] [30mTRACE[m  - ###########################################
04:12:34.678 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
04:12:34.678 [main] [30mTRACE[m  - ###########################################

04:12:34.679 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
04:12:34.680 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
04:12:34.681 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
04:12:34.682 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
04:12:34.682 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
04:12:34.682 [main] [30mTRACE[m  - #########################################################
04:12:34.683 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
04:12:34.683 [main] [30mTRACE[m  - #########################################################
04:12:34.683 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
04:12:34.683 [main] [32mINFO [m  - FOR - Lancement boucle infini
04:12:34.684 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
04:12:34.684 [main] [32mINFO [m  - IF - Premier tour
04:12:36.266 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
04:12:36.266 [main] [30mTRACE[m  - ###########################################################
04:12:36.267 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
04:12:36.267 [main] [30mTRACE[m  - ###########################################################
04:12:36.267 [main] [30mTRACE[m  - #######################################
04:12:36.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
04:12:36.267 [main] [30mTRACE[m  - #######################################
04:12:36.267 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
04:12:36.267 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
04:12:36.268 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
04:12:37.095 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:12:37.099 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:12:37.100 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:12:39.510 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:12:39.513 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : r
04:12:39.514 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : R
04:12:39.515 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:12:39.515 [main] [32mINFO [m  - CASE - "Games"
04:12:39.516 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:12:39.517 [main] [32mINFO [m  - CASE - 'R'
04:12:39.723 [main] [36mDEBUG[m  - M√†J - (String) Choix : Recherche +/-
04:12:39.724 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Recherche +/-
04:12:39.724 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:12:40.538 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:12:40.539 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:12:40.539 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:12:41.195 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:12:41.196 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:12:41.197 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
04:12:41.197 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:12:41.197 [main] [32mINFO [m  - CASE - "Comfirm"
04:12:41.197 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:12:41.197 [main] [32mINFO [m  - CASE - 'O'
04:12:41.198 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:12:41.200 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
04:12:41.200 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
04:12:41.200 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:12:42.222 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:12:42.223 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:12:42.223 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:12:42.991 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:12:42.992 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 3
04:12:42.993 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 3
04:12:42.993 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:12:42.993 [main] [32mINFO [m  - CASE - "Modes"
04:12:42.993 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:12:42.995 [main] [32mINFO [m  - CASE - '3'
04:12:43.199 [main] [36mDEBUG[m  - M√†J - (String) Choix : Duel
04:12:43.200 [main] [36mDEBUG[m  - str_ModeChoise : Duel
04:12:43.201 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:12:44.019 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:12:44.019 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:12:44.019 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:12:44.803 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:12:44.803 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:12:44.804 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
04:12:44.804 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:12:44.804 [main] [32mINFO [m  - CASE - "Comfirm"
04:12:44.804 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:12:44.804 [main] [32mINFO [m  - CASE - 'O'
04:12:44.805 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:12:44.807 [main] [36mDEBUG[m  - str_ConfirmChoise : O
04:12:44.808 [main] [36mDEBUG[m  - (String) Choix du jeu : Recherche +/-
04:12:44.808 [main] [36mDEBUG[m  - (String) Choix du mode : Duel
04:12:47.085 [main] [30mTRACE[m  - #####################################
04:12:47.086 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
04:12:47.086 [main] [30mTRACE[m  - #####################################

04:12:47.086 [main] [30mTRACE[m  - ################################################################################################
04:12:47.086 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
04:12:47.086 [main] [30mTRACE[m  - ################################################################################################
04:12:47.086 [main] [32mINFO [m  - SWITCH - Choix du jeu
04:12:47.086 [main] [32mINFO [m  - CASE - Mode  "Recherche +/-"
04:12:47.105 [main] [32mINFO [m  - Instance "recherchePlusMoins"
04:12:47.106 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
04:12:47.106 [main] [32mINFO [m  - Initialisation (String) R√©sultat gagnant
04:12:47.106 [main] [32mINFO [m  - FOR - Incr√©mentation "=" au r√©sultat gagnant
04:12:47.107 [main] [36mDEBUG[m  - R√©sultat gagnant : ========
04:12:47.108 [main] [36mDEBUG[m  - (String) R√©sultat gagnant : ========
04:12:47.108 [main] [32mINFO [m  - Instance - (ArrayList) Donn√©es de d√©fense
04:12:47.108 [main] [32mINFO [m  - Initialisation et injection - (int[]) Combinaison secr√®te
04:12:47.109 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers inf√©rieurs
04:12:47.109 [main] [32mINFO [m  - Initialisation et injection - (int[]) Derniers sup√©rieurs
04:12:47.109 [main] [32mINFO [m  - Initialisation et injection - (int[]) Proposition de l'ordinateur
04:12:47.109 [main] [32mINFO [m  - Initialisation et injection - (char[]) R√©sultat de la comparaison
04:12:47.109 [main] [32mINFO [m  - Initialisation (int[]) Nombre al√©atoire
04:12:47.110 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
04:12:47.110 [main] [36mDEBUG[m  - Initialisation (bolean) Partie gagn√©e : false
04:12:47.110 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "D√©fense"
04:12:47.110 [main] [32mINFO [m  - Initialisation (String) r√©sultat de la comparaison en mode "Challenger"
04:12:47.110 [main] [32mINFO [m  - Lancement du compteur de tours
04:12:47.110 [main] [30mTRACE[m  - ############################
04:12:47.111 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:12:47.111 [main] [30mTRACE[m  - ############################
04:12:47.111 [main] [32mINFO [m  - IF - Mode "Duel"
04:12:47.111 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : D√©fense
04:12:47.111 [main] [32mINFO [m  - SI - Premier tour
04:12:47.317 [main] [32mINFO [m  - SI - Mode "Duel", affiche l'√©nonc√©
04:12:48.543 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:12:48.545 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:12:48.750 [main] [36mDEBUG[m  - Initialisation (int) Combinaison Try Catch : 0
04:12:48.752 [main] [36mDEBUG[m  - Initialisation (boolean) Combinaison valid√©e : false
04:12:48.752 [main] [32mINFO [m  - DO {} WHILE - La Combinaison n'est pas valid√©e
04:12:48.752 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:12:48.753 [main] [32mINFO [m  - CASE - Mode "Duel"
04:12:48.753 [main] [32mINFO [m  - SWITCH - Le sous-mode en mode "Duel"
04:12:48.955 [main] [32mINFO [m  - Lance le scanner pour le combinaison secr√®te
04:12:48.956 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:12:48.956 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:12:48.957 [main] [32mINFO [m  - try
04:12:51.952 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 12093487
04:12:51.952 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:12:51.953 [main] [32mINFO [m  - V√©rifie si la combinaison secr√®te ne contient bien que des nombres
04:12:51.953 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:12:51.953 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:12:51.954 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:12:51.955 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:12:51.955 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:12:51.955 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:12:51.956 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:12:51.956 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:12:51.956 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:12:51.956 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:12:51.956 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:12:51.956 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:12:51.956 [main] [32mINFO [m  - V√©rifie la validit√© de la combinaison secr√®te
04:12:51.957 [main] [32mINFO [m  - DO {} WHILE - Sortie -> La combinaison est valid√©e
04:12:51.957 [main] [36mDEBUG[m  - int_IStart : 7
04:12:51.966 [main] [36mDEBUG[m  - (array int) Combinaison : [1, 2, 0, 9, 3, 4, 8, 7]
04:12:51.967 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison secr√®te en tableau d'entiers : [1, 2, 0, 9, 3, 4, 8, 7]
04:12:51.967 [main] [32mINFO [m  - M√†J - Combinaison secr√®te dans ArrayList "al_RecherchePlusMoins_Defense"
04:12:52.171 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Derniers sup√©rieur : [0, 0, 0, 0, 0, 0, 0, 0]
04:12:52.171 [main] [32mINFO [m  - FOR - Chaque unit√© du tableau des derniers sup√©rieurs
04:12:52.172 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [9, 9, 9, 9, 9, 9, 9, 9]
04:12:52.172 [main] [30mTRACE[m  - #####################################
04:12:52.172 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:12:52.172 [main] [30mTRACE[m  - #####################################
04:12:52.172 [main] [30mTRACE[m  - ####################################################
04:12:52.173 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:12:52.173 [main] [30mTRACE[m  - ####################################################
04:12:52.173 [main] [32mINFO [m  - IF - Premier tour
04:12:52.173 [main] [30mTRACE[m  - #############################################################
04:12:52.173 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_FirstComputerProposal()
04:12:52.173 [main] [30mTRACE[m  - #############################################################
04:12:52.173 [main] [32mINFO [m  - Injection de 5 dans premi√®re proposition de l'ordinateur
04:12:52.174 [main] [36mDEBUG[m  - (int[]) Premi√®re proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:12:52.174 [main] [30mTRACE[m  - ###########################################################
04:12:52.174 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_FirstComputerProposal()
04:12:52.175 [main] [30mTRACE[m  - ###########################################################

04:12:52.175 [main] [32mINFO [m  - Lance premi√®re proposition de l'ordinateur
04:12:52.175 [main] [30mTRACE[m  - ##################################################
04:12:52.175 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:12:52.176 [main] [30mTRACE[m  - ##################################################

04:12:52.176 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:12:52.176 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:12:52.177 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 55555555
04:12:52.397 [main] [30mTRACE[m  - #######################################################
04:12:52.397 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:12:52.397 [main] [30mTRACE[m  - #######################################################
04:12:52.398 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:12:52.398 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:12:52.398 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:12:52.398 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:12:52.399 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:12:52.400 [main] [30mTRACE[m  - ######################################################
04:12:52.400 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:12:52.400 [main] [30mTRACE[m  - ######################################################

04:12:52.400 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:12:52.400 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:12:52.408 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+--++
04:12:52.409 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+--++
04:12:52.610 [main] [30mTRACE[m  - ###################################
04:12:52.611 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:12:52.612 [main] [30mTRACE[m  - ###################################

04:12:52.612 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:12:52.613 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+--++
04:12:52.613 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+--++
04:12:52.613 [main] [30mTRACE[m  - ###############################
04:12:52.613 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:12:52.613 [main] [30mTRACE[m  - ###############################
04:12:52.613 [main] [32mINFO [m  - SI - Node "Duel"
04:12:52.614 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : Challenger
04:12:52.614 [main] [32mINFO [m  - // IF - Premier tour
04:12:52.817 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.818 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 0, 0, 0, 0, 0, 0, 0]
04:12:52.818 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.819 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 0, 0, 0, 0, 0, 0]
04:12:52.819 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.819 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 0, 0, 0, 0, 0]
04:12:52.819 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.819 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 3, 0, 0, 0, 0]
04:12:52.819 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.819 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 3, 6, 0, 0, 0]
04:12:52.819 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.820 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 3, 6, 4, 0, 0]
04:12:52.820 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.820 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 3, 6, 4, 1, 0]
04:12:52.820 [main] [32mINFO [m  - FOR - Pour chaque unit√© de la combinaison secr√®te
04:12:52.820 [main] [36mDEBUG[m  - Incr√©emntattion chiffre al√©atoire : [3, 7, 8, 3, 6, 4, 1, 8]
04:12:52.820 [main] [36mDEBUG[m  - Nombre al√©atoire g√©n√©r√© : [3, 7, 8, 3, 6, 4, 1, 8]
04:12:52.823 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te al√©atoire : [I@189cbd7c
04:12:54.040 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:12:54.040 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:12:54.047 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:12:54.048 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:12:54.048 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:12:54.048 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:12:54.048 [main] [32mINFO [m  - CASE - Mode "Duel"
04:12:54.048 [main] [32mINFO [m  - SWITCH - Le sous-mode en mode "Duel"
04:12:54.048 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:12:54.254 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:12:54.254 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:12:54.254 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:12:54.254 [main] [32mINFO [m  - try
04:13:02.088 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 55555555
04:13:02.088 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:13:02.088 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:13:02.088 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:13:02.088 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:13:02.088 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:13:02.089 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:13:02.089 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:13:02.089 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:13:02.089 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:13:02.089 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:13:02.090 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:13:02.092 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:13:02.092 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:13:02.092 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:13:02.092 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:13:02.092 [main] [36mDEBUG[m  - int_IStart : 7
04:13:02.092 [main] [36mDEBUG[m  - (array int) Combinaison : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.093 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.298 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.298 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [3, 7, 8, 3, 6, 4, 1, 8]
04:13:02.299 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:13:02.299 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:13:02.299 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:02.299 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:02.299 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:02.299 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:02.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:02.300 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:02.300 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:02.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:02.300 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:13:02.506 [main] [30mTRACE[m  - ############################
04:13:02.506 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:13:02.506 [main] [30mTRACE[m  - ############################
04:13:02.506 [main] [32mINFO [m  - IF - Mode "Duel"
04:13:02.506 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : D√©fense
04:13:02.506 [main] [30mTRACE[m  - #####################################
04:13:02.506 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:13:02.507 [main] [30mTRACE[m  - #####################################
04:13:02.507 [main] [30mTRACE[m  - ####################################################
04:13:02.507 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:13:02.507 [main] [30mTRACE[m  - ####################################################
04:13:02.507 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:13:02.739 [main] [30mTRACE[m  - ##########################################################
04:13:02.739 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:13:02.739 [main] [30mTRACE[m  - ##########################################################
04:13:02.740 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 0, 0, 0, 0, 0]
04:13:02.740 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.741 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:13:02.741 [main] [32mINFO [m  - FOR - Les positions '+'
04:13:02.741 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:13:02.741 [main] [30mTRACE[m  - ########################################################
04:13:02.742 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:13:02.742 [main] [30mTRACE[m  - ########################################################

04:13:02.742 [main] [30mTRACE[m  - ##########################################################
04:13:02.742 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:13:02.742 [main] [30mTRACE[m  - ##########################################################
04:13:02.742 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [9, 9, 9, 9, 9, 9, 9, 9]
04:13:02.743 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.744 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:13:02.744 [main] [32mINFO [m  - FOR - Les positions '-'
04:13:02.745 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [5, 5, 5, 9, 5, 5, 9, 9]
04:13:02.745 [main] [30mTRACE[m  - ########################################################
04:13:02.745 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:13:02.745 [main] [30mTRACE[m  - ########################################################

04:13:02.745 [main] [30mTRACE[m  - ##############################################################
04:13:02.745 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:13:02.745 [main] [30mTRACE[m  - ##############################################################
04:13:02.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:13:02.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [5, 5, 5, 9, 5, 5, 9, 9]
04:13:02.747 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [5, 5, 5, 5, 5, 5, 5, 5]
04:13:02.747 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, -, -, +, +]
04:13:02.747 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [-, -, -, +, -, -, +, +]
04:13:02.747 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:02.747 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:02.748 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:02.748 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:02.748 [main] [30mTRACE[m  - ############################################################
04:13:02.748 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:13:02.748 [main] [30mTRACE[m  - ############################################################

04:13:02.748 [main] [32mINFO [m  - Lancement second type de proposition
04:13:02.748 [main] [30mTRACE[m  - ##################################################
04:13:02.748 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:13:02.748 [main] [30mTRACE[m  - ##################################################

04:13:02.749 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:13:02.749 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:02.750 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 33373377
04:13:02.955 [main] [30mTRACE[m  - #######################################################
04:13:02.955 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:13:02.956 [main] [30mTRACE[m  - #######################################################
04:13:02.956 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:13:02.956 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:02.956 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:13:02.956 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:13:02.956 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:13:02.956 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:13:02.956 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:13:02.956 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:13:02.957 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:02.957 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:13:02.957 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:13:02.957 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:02.957 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:02.957 [main] [30mTRACE[m  - ######################################################
04:13:02.957 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:13:02.958 [main] [30mTRACE[m  - ######################################################

04:13:02.958 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:13:02.958 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:02.958 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+=++=
04:13:02.958 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+=++=
04:13:03.160 [main] [30mTRACE[m  - ###################################
04:13:03.160 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:13:03.160 [main] [30mTRACE[m  - ###################################

04:13:03.160 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:03.161 [main] [36mDEBUG[m  - Incr√©mentation String() : ---+=++=
04:13:03.161 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : ---+=++=
04:13:03.161 [main] [30mTRACE[m  - ###############################
04:13:03.161 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:13:03.161 [main] [30mTRACE[m  - ###############################
04:13:03.161 [main] [32mINFO [m  - SI - Node "Duel"
04:13:03.161 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : Challenger
04:13:03.161 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:13:03.161 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:13:03.162 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:13:03.162 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:13:03.162 [main] [32mINFO [m  - CASE - Mode "Duel"
04:13:03.162 [main] [32mINFO [m  - SWITCH - Le sous-mode en mode "Duel"
04:13:03.162 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:13:03.366 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:13:03.366 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:13:03.366 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:13:03.366 [main] [32mINFO [m  - try
04:13:14.093 [main] [36mDEBUG[m  - R√©cup√©ration (int) du contenu du scanner : 22275775
04:13:14.093 [main] [36mDEBUG[m  - M√†J - (boolean) Il n'y a que des nombres : true
04:13:14.093 [main] [32mINFO [m  - V√©rifie si la combinaison de l'utilisateur ne contient que des nombres
04:13:14.093 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:13:14.093 [main] [36mDEBUG[m  - (boolean) Le nombre est n√©gatif : false
04:13:14.093 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est n√©gatif : false
04:13:14.093 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:13:14.094 [main] [32mINFO [m  - FOR - le numbre d'unit√© de la combinaison
04:13:14.094 [main] [36mDEBUG[m  - (String) Nombre maximum : 99999999
04:13:14.094 [main] [36mDEBUG[m  - Initialisation (String) Nombre maximum : 99999999
04:13:14.094 [main] [32mINFO [m  - Conversion (int) La cha√Æne de caract√®re contenant le nombre maximum
04:13:14.094 [main] [36mDEBUG[m  - (boolean) Le nombre est trop grand : false
04:13:14.094 [main] [36mDEBUG[m  - Initialisation (boolean) Le nombre est trop grand : false
04:13:14.094 [main] [32mINFO [m  - IF - Nombre positif et pas trop grand
04:13:14.094 [main] [36mDEBUG[m  - M√†J - (boolean) Combinaison valide : true
04:13:14.094 [main] [32mINFO [m  - M√†J - (boolean) V√©rifie si la combinaison de l'utilisateur est valide
04:13:14.095 [main] [36mDEBUG[m  - int_IStart : 7
04:13:14.095 [main] [36mDEBUG[m  - (array int) Combinaison : [2, 2, 2, 7, 5, 7, 7, 5]
04:13:14.096 [main] [36mDEBUG[m  - Conversion (int[]) Combinaison de l'utilisateur : [2, 2, 2, 7, 5, 7, 7, 5]
04:13:14.299 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau √† comparer : [2, 2, 2, 7, 5, 7, 7, 5]
04:13:14.300 [main] [36mDEBUG[m  - -----------------------------------------------------------> Tableau de base : [3, 7, 8, 3, 6, 4, 1, 8]
04:13:14.300 [main] [36mDEBUG[m  - Initialisation (char[]) R√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:13:14.300 [main] [32mINFO [m  - FOR - Pour chaque unit√©
04:13:14.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:14.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:14.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:14.300 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:14.300 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:14.301 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:14.301 [main] [32mINFO [m  - ELSE IF - L'unit√© √† comparer est > que l'unit√© compar√©e
04:13:14.301 [main] [32mINFO [m  - IF - L'unit√© √† comparer est < que l'unit√© compar√©e
04:13:14.301 [main] [32mINFO [m  - Lancement comparaiosn entre la combinaison de l'utilisateur et la combinaison secr√®te
04:13:14.506 [main] [30mTRACE[m  - ############################
04:13:14.507 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:13:14.507 [main] [30mTRACE[m  - ############################
04:13:14.507 [main] [32mINFO [m  - IF - Mode "Duel"
04:13:14.507 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : D√©fense
04:13:14.507 [main] [30mTRACE[m  - #####################################
04:13:14.507 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:13:14.508 [main] [30mTRACE[m  - #####################################
04:13:14.509 [main] [30mTRACE[m  - ####################################################
04:13:14.509 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComputerProposal()
04:13:14.509 [main] [30mTRACE[m  - ####################################################
04:13:14.510 [main] [32mINFO [m  - SINON - Apr√©s premier tour
04:13:14.715 [main] [30mTRACE[m  - ##########################################################
04:13:14.716 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastInferiorUpdate()
04:13:14.716 [main] [30mTRACE[m  - ##########################################################
04:13:14.717 [main] [36mDEBUG[m  - (int[]) Derniers inf√©rieurs : [0, 0, 0, 5, 0, 0, 5, 5]
04:13:14.718 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:14.718 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:14.718 [main] [32mINFO [m  - FOR - Les positions '+'
04:13:14.719 [main] [36mDEBUG[m  - M√†J - (int[]) Derniers inf√©rieurs : [0, 0, 0, 7, 0, 3, 7, 5]
04:13:14.719 [main] [30mTRACE[m  - ########################################################
04:13:14.719 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastInferiorUpdate()
04:13:14.719 [main] [30mTRACE[m  - ########################################################

04:13:14.719 [main] [30mTRACE[m  - ##########################################################
04:13:14.719 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_LastSuperiorUpdate()
04:13:14.719 [main] [30mTRACE[m  - ##########################################################
04:13:14.719 [main] [36mDEBUG[m  - (int[]) Derniers sup√©rieurs : [5, 5, 5, 9, 5, 5, 9, 9]
04:13:14.719 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordianteur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:14.719 [main] [36mDEBUG[m  - (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:14.720 [main] [32mINFO [m  - FOR - Les positions '-'
04:13:14.720 [main] [36mDEBUG[m  - (array int) Derniers sup√©rieurs M√†J : [3, 3, 3, 9, 5, 5, 9, 9]
04:13:14.720 [main] [30mTRACE[m  - ########################################################
04:13:14.720 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_LastSuperiorUpdate()
04:13:14.720 [main] [30mTRACE[m  - ########################################################

04:13:14.720 [main] [30mTRACE[m  - ##############################################################
04:13:14.720 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_int_SecondComputerProposal()
04:13:14.720 [main] [30mTRACE[m  - ##############################################################
04:13:14.720 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers inf√©rieurs : [0, 0, 0, 7, 0, 3, 7, 5]
04:13:14.720 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Derniers sup√©rieurs : [3, 3, 3, 9, 5, 5, 9, 9]
04:13:14.720 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Proposition de l'ordinateur : [3, 3, 3, 7, 3, 3, 7, 7]
04:13:14.720 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, -, -, +, =, +, +, =]
04:13:14.720 [main] [36mDEBUG[m  - Initialisation (int[]) Nouvelle proposition de l'ordinateur : [-, -, -, +, =, +, +, =]
04:13:14.721 [main] [32mINFO [m  - FOR - Injection de la nouvelle proposition de l'ordinateur
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '-'
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:13:14.721 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:14.722 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '+'
04:13:14.722 [main] [32mINFO [m  - IF - L'unit√© du r√©sultat de la comparaison = '='
04:13:14.722 [main] [36mDEBUG[m  - (array int) Nouvelle proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:13:14.722 [main] [30mTRACE[m  - ############################################################
04:13:14.722 [main] [30mTRACE[m  - ### END ### M√©thode : run_array_int_SecondComputerProposal()
04:13:14.722 [main] [30mTRACE[m  - ############################################################

04:13:14.723 [main] [32mINFO [m  - Lancement second type de proposition
04:13:14.723 [main] [30mTRACE[m  - ##################################################
04:13:14.723 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_NewComputerProposal()
04:13:14.723 [main] [30mTRACE[m  - ##################################################

04:13:14.723 [main] [32mINFO [m  - Lance la nouvelle proposition de l'ordinateur
04:13:14.724 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:13:14.724 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : 22283487
04:13:14.927 [main] [30mTRACE[m  - #######################################################
04:13:14.927 [main] [30mTRACE[m  - ### START ### M√©thode : run_array_ch_ComparisonResult()
04:13:14.928 [main] [30mTRACE[m  - #######################################################
04:13:14.928 [main] [36mDEBUG[m  - (int[]) Combinaison secr√®te : [1, 2, 0, 9, 3, 4, 8, 7]
04:13:14.928 [main] [36mDEBUG[m  - (int[]) Proposition de l'ordinateur : [2, 2, 2, 8, 3, 4, 8, 7]
04:13:14.928 [main] [36mDEBUG[m  - (char[]) Initialisation du r√©sultat de la comparaison : [ ,  ,  ,  ,  ,  ,  ,  ]
04:13:14.928 [main] [32mINFO [m  - FOR - Comparaison de chaque unit√© de la proposition de l'ordinateur et de la combinaison secr√®te
04:13:14.928 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:13:14.928 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:14.928 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur > √† l'unit√© de la combinaison secr√®te
04:13:14.928 [main] [32mINFO [m  - IF - L'unit√© de la proposition de l'ordinateur < √† l'unit√© de la combinaison secr√®te
04:13:14.928 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:14.928 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:14.928 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:14.928 [main] [32mINFO [m  - IF - Les unit√©s de la proposition de l'ordinateur et de la combinaison secr√®te sont √©gales
04:13:14.928 [main] [36mDEBUG[m  - (char[]) M√†J r√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:13:14.928 [main] [30mTRACE[m  - ######################################################
04:13:14.928 [main] [30mTRACE[m  - ### End ### M√©thode : run_array_ch_ComparisonResult()
04:13:14.928 [main] [30mTRACE[m  - ######################################################

04:13:14.929 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:13:14.929 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:13:14.929 [main] [36mDEBUG[m  - Incr√©mentation String() : -=-+====
04:13:14.929 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : -=-+====
04:13:15.132 [main] [30mTRACE[m  - ###################################
04:13:15.132 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:13:15.132 [main] [30mTRACE[m  - ###################################

04:13:15.132 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©sultat de la comparaison : [-, =, -, +, =, =, =, =]
04:13:15.133 [main] [36mDEBUG[m  - Incr√©mentation String() : -=-+====
04:13:15.133 [main] [36mDEBUG[m  - Conversion (String) R√©sultat de la comparaison : -=-+====
04:13:15.133 [main] [30mTRACE[m  - ###############################
04:13:15.133 [main] [30mTRACE[m  - ### START ### Mode "Challenger"
04:13:15.133 [main] [30mTRACE[m  - ###############################
04:13:15.133 [main] [32mINFO [m  - SI - Node "Duel"
04:13:15.134 [main] [36mDEBUG[m  - M√†j - (String) Sous-mode (Pour mode "Duel") : Challenger
04:13:15.134 [main] [36mDEBUG[m  - Initialisation (int) Proposition Try Catch
04:13:15.134 [main] [36mDEBUG[m  - Initialisation (boolean) Proposition valid√©e : false
04:13:15.134 [main] [32mINFO [m  - DO {} WHILE - La proposition n'est pas valid√©e
04:13:15.135 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:13:15.135 [main] [32mINFO [m  - CASE - Mode "Duel"
04:13:15.136 [main] [32mINFO [m  - SWITCH - Le sous-mode en mode "Duel"
04:13:15.136 [main] [32mINFO [m  - CASE - Mode "Challenger"
04:13:15.340 [main] [32mINFO [m  - Initialise le scanner pour la proposition
04:13:15.341 [main] [36mDEBUG[m  - Initialisation (boolean) Que des nombres : false
04:13:15.341 [main] [32mINFO [m  - DO {} WHILE - Il n'y a pas que des nombres
04:13:15.341 [main] [32mINFO [m  - try
04:14:51.809 [main] [30mTRACE[m  - #######################################
04:14:51.815 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
04:14:51.815 [main] [30mTRACE[m  - #######################################
04:14:51.815 [main] [30mTRACE[m  - ######################################################################################
04:14:51.815 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
04:14:51.815 [main] [30mTRACE[m  - ######################################################################################
04:14:51.815 [main] [30mTRACE[m  - #############################################
04:14:51.816 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
04:14:51.816 [main] [30mTRACE[m  - #############################################
04:14:51.818 [main] [30mTRACE[m  - ###########################################
04:14:51.818 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
04:14:51.818 [main] [30mTRACE[m  - ###########################################

04:14:51.819 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
04:14:51.819 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
04:14:51.820 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
04:14:51.821 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
04:14:51.821 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
04:14:51.821 [main] [30mTRACE[m  - #########################################################
04:14:51.821 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
04:14:51.822 [main] [30mTRACE[m  - #########################################################
04:14:51.822 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
04:14:51.822 [main] [32mINFO [m  - FOR - Lancement boucle infini
04:14:51.822 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
04:14:51.822 [main] [32mINFO [m  - IF - Premier tour
04:14:54.362 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
04:14:54.363 [main] [30mTRACE[m  - ###########################################################
04:14:54.363 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
04:14:54.363 [main] [30mTRACE[m  - ###########################################################
04:14:54.363 [main] [30mTRACE[m  - #######################################
04:14:54.363 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
04:14:54.364 [main] [30mTRACE[m  - #######################################
04:14:54.364 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
04:14:54.364 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
04:14:54.365 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
04:14:55.186 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:14:55.187 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:14:55.187 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:14:58.241 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:14:58.242 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
04:14:58.244 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
04:14:58.245 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:14:58.245 [main] [32mINFO [m  - CASE - "Games"
04:14:58.245 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:14:58.448 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
04:14:58.449 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
04:14:58.449 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:14:59.268 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:14:59.268 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:14:59.269 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:15:00.601 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:15:00.601 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:15:00.602 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
04:15:00.602 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:15:00.603 [main] [32mINFO [m  - CASE - "Comfirm"
04:15:00.603 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:15:00.604 [main] [32mINFO [m  - CASE - 'O'
04:15:00.605 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:15:00.605 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
04:15:00.606 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
04:15:00.606 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
04:15:01.629 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:15:01.629 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:15:01.629 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:15:03.487 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:15:03.487 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
04:15:03.488 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
04:15:03.488 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:15:03.488 [main] [32mINFO [m  - CASE - "Modes"
04:15:03.488 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:15:03.488 [main] [32mINFO [m  - CASE - '2'
04:15:03.694 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
04:15:03.695 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
04:15:03.695 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
04:15:04.508 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:15:04.509 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:15:04.509 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
04:15:08.183 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
04:15:08.191 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
04:15:08.191 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
04:15:08.192 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
04:15:08.192 [main] [32mINFO [m  - CASE - "Comfirm"
04:15:08.192 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
04:15:08.192 [main] [32mINFO [m  - CASE - 'O'
04:15:08.192 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
04:15:08.193 [main] [36mDEBUG[m  - str_ConfirmChoise : O
04:15:08.195 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
04:15:08.195 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
04:15:10.464 [main] [30mTRACE[m  - #####################################
04:15:10.464 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
04:15:10.464 [main] [30mTRACE[m  - #####################################

04:15:10.464 [main] [30mTRACE[m  - ################################################################################################
04:15:10.465 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
04:15:10.465 [main] [30mTRACE[m  - ################################################################################################
04:15:10.465 [main] [32mINFO [m  - SWITCH - Choix du jeu
04:15:10.465 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
04:15:10.534 [main] [32mINFO [m  - Instance "Mastermind"
04:15:10.535 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
04:15:10.535 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
04:15:10.535 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
04:15:10.536 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
04:15:10.536 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
04:15:10.537 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:15:10.537 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
04:15:10.537 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
04:15:10.537 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
04:15:10.538 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
04:15:10.538 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
04:15:10.538 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
04:15:10.538 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
04:15:10.538 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
04:15:10.539 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
04:15:10.540 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
04:15:10.540 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
04:15:10.540 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
04:15:10.540 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
04:15:10.541 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
04:15:10.541 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
04:15:10.541 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
04:15:10.541 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
04:15:10.541 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
04:15:10.541 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
04:15:10.542 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
04:15:10.542 [main] [32mINFO [m  - Lancement du compteur de tours
04:15:10.542 [main] [30mTRACE[m  - ############################
04:15:10.542 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:15:10.542 [main] [30mTRACE[m  - ############################
04:15:10.542 [main] [32mINFO [m  - IF - Mode "Duel"
04:15:10.542 [main] [32mINFO [m  - SI - Premier tour
04:15:11.599 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
04:15:11.599 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
04:15:11.599 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:15:11.599 [main] [32mINFO [m  - CASE - Mode "D√©fense"
04:15:11.801 [main] [32mINFO [m  - Lance le scanner pour la combinaison
04:15:11.802 [main] [30mTRACE[m  - #####################################
04:15:11.802 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
04:15:11.802 [main] [30mTRACE[m  - #####################################
04:15:11.802 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
04:15:11.803 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
04:15:37.982 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : 1
04:15:37.983 [main] [32mINFO [m  - Instance "Pattern"
04:15:37.983 [main] [32mINFO [m  - Instance "Matcher"
04:15:37.983 [main] [33mWARN [m  - ELSE - Error
04:15:37.983 [main] [1;31mERROR[m  - M√†J - (boolean) La combinaison n'est compos√©e que de lettres : false
04:15:38.189 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
04:15:38.194 [main] [32mINFO [m  - IF - La combinaison n'est compos√©e que de lettres
04:15:38.194 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:15:38.195 [main] [32mINFO [m  - CASE - Mode "D√©fense"
04:15:38.399 [main] [32mINFO [m  - Lancement du scanner pour nouvelle proposition
04:15:47.344 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : q
04:15:47.345 [main] [32mINFO [m  - Instance "Pattern"
04:15:47.345 [main] [32mINFO [m  - Instance "Matcher"
04:15:47.345 [main] [32mINFO [m  - IF - Match
04:15:47.345 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
04:15:47.346 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
04:15:47.346 [main] [36mDEBUG[m  - String() Combinaison : q
04:15:47.346 [main] [30mTRACE[m  - ###################################
04:15:47.346 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
04:15:47.347 [main] [30mTRACE[m  - ###################################

04:15:47.347 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
04:15:47.347 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
04:15:47.347 [main] [30mTRACE[m  - ##########################################
04:15:47.347 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
04:15:47.347 [main] [30mTRACE[m  - ##########################################
04:15:47.350 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
04:15:47.350 [main] [1;31mERROR[m  - IF - La combinaison ‚â† longueur sp√©cifi√©e
04:15:47.352 [main] [36mDEBUG[m  - M√†j - (boolean) La combinaison est de la bonne longueur : false
04:15:47.354 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : false
04:15:47.355 [main] [30mTRACE[m  - ########################################
04:15:47.356 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
04:15:47.356 [main] [30mTRACE[m  - ########################################

04:15:47.357 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : false
04:15:47.360 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
04:15:47.360 [main] [33mWARN [m  - ELSE - La combinaison n'est pas de la bonne longueur
04:15:47.568 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : false
04:15:47.568 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:15:47.568 [main] [32mINFO [m  - CASE - Mode "D√©fense"
04:15:47.772 [main] [32mINFO [m  - Lance le scanner pour la combinaison
04:15:47.772 [main] [30mTRACE[m  - #####################################
04:15:47.772 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
04:15:47.773 [main] [30mTRACE[m  - #####################################
04:15:47.774 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
04:15:47.774 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
04:15:55.731 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : abcdefghdf
04:15:55.731 [main] [32mINFO [m  - Instance "Pattern"
04:15:55.731 [main] [32mINFO [m  - Instance "Matcher"
04:15:55.732 [main] [32mINFO [m  - IF - Match
04:15:55.732 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
04:15:55.732 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
04:15:55.732 [main] [36mDEBUG[m  - String() Combinaison : abcdefghdf
04:15:55.732 [main] [30mTRACE[m  - ###################################
04:15:55.732 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
04:15:55.732 [main] [30mTRACE[m  - ###################################

04:15:55.732 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
04:15:55.732 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
04:15:55.733 [main] [30mTRACE[m  - ##########################################
04:15:55.733 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
04:15:55.733 [main] [30mTRACE[m  - ##########################################
04:15:55.733 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
04:15:55.733 [main] [1;31mERROR[m  - IF - La combinaison ‚â† longueur sp√©cifi√©e
04:15:55.733 [main] [36mDEBUG[m  - M√†j - (boolean) La combinaison est de la bonne longueur : false
04:15:55.733 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : false
04:15:55.733 [main] [30mTRACE[m  - ########################################
04:15:55.734 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
04:15:55.734 [main] [30mTRACE[m  - ########################################

04:15:55.734 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : false
04:15:55.734 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
04:15:55.734 [main] [33mWARN [m  - ELSE - La combinaison n'est pas de la bonne longueur
04:15:55.940 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : false
04:15:55.940 [main] [32mINFO [m  - SWITCH - Mode des jeux
04:15:55.940 [main] [32mINFO [m  - CASE - Mode "D√©fense"
04:15:56.145 [main] [32mINFO [m  - Lance le scanner pour la combinaison
04:15:56.145 [main] [30mTRACE[m  - #####################################
04:15:56.146 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
04:15:56.146 [main] [30mTRACE[m  - #####################################
04:15:56.146 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
04:15:56.146 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
04:16:28.154 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : abcdefab
04:16:28.155 [main] [32mINFO [m  - Instance "Pattern"
04:16:28.155 [main] [32mINFO [m  - Instance "Matcher"
04:16:28.155 [main] [32mINFO [m  - IF - Match
04:16:28.155 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
04:16:28.156 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
04:16:28.156 [main] [36mDEBUG[m  - String() Combinaison : abcdefab
04:16:28.156 [main] [30mTRACE[m  - ###################################
04:16:28.156 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
04:16:28.156 [main] [30mTRACE[m  - ###################################

04:16:28.157 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
04:16:28.157 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
04:16:28.159 [main] [30mTRACE[m  - ##########################################
04:16:28.159 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
04:16:28.159 [main] [30mTRACE[m  - ##########################################
04:16:28.160 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
04:16:28.160 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
04:16:28.160 [main] [30mTRACE[m  - ########################################
04:16:28.160 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
04:16:28.160 [main] [30mTRACE[m  - ########################################

04:16:28.160 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
04:16:28.160 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
04:16:28.160 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
04:16:28.160 [main] [30mTRACE[m  - ##############################################
04:16:28.160 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
04:16:28.160 [main] [30mTRACE[m  - ##############################################
04:16:28.161 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
04:16:28.161 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
04:16:28.162 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
04:16:28.163 [main] [30mTRACE[m  - ##########################################
04:16:28.163 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
04:16:28.163 [main] [30mTRACE[m  - ##########################################

04:16:28.164 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
04:16:28.164 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
04:16:28.166 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
04:16:28.166 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
04:16:28.167 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, B, C, D, E, F, A, B]
04:16:28.168 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, B, C, D, E, F, A, B]
04:16:28.168 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
04:16:28.168 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
04:16:28.168 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:28.169 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:28.169 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
04:16:28.178 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
04:16:28.178 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
04:16:28.382 [main] [30mTRACE[m  - #####################################
04:16:28.383 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:28.383 [main] [30mTRACE[m  - #####################################
04:16:28.383 [main] [32mINFO [m  - IF - Premier tour
04:16:28.383 [main] [30mTRACE[m  - ##########################################################
04:16:28.383 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_FirstTypeComputerProposal()
04:16:28.384 [main] [30mTRACE[m  - ##########################################################
04:16:28.384 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
04:16:28.384 [main] [32mINFO [m  - Initialisation (char[]) Nouvelle proposition de l'ordinateur
04:16:28.384 [main] [36mDEBUG[m  - Injection (char[]) Nouvelle proposition de l'ordinateur : [E, E, C, D, B, A, E, B]
04:16:28.385 [main] [32mINFO [m  - Injection mouvelle proposition de l'ordinateur dans donn√©es de d√©fense
04:16:28.385 [main] [30mTRACE[m  - ########################################################
04:16:28.385 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_FirstTypeComputerProposal()
04:16:28.385 [main] [30mTRACE[m  - ########################################################

04:16:28.385 [main] [32mINFO [m  - Lancement premi√®re proposition de l'ordinateur
04:16:28.385 [main] [30mTRACE[m  - ###################################
04:16:28.385 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:28.385 [main] [30mTRACE[m  - ###################################

04:16:28.386 [main] [30mTRACE[m  - ###########################################################################################################
04:16:28.386 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:28.386 [main] [30mTRACE[m  - ###########################################################################################################
04:16:28.387 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:28.387 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:28.388 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:28.388 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  0
04:16:28.388 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [ ,  ,  ,  ,  ,  ,  ,  ]
04:16:28.389 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [E, E, C, D, B, A, E, B]
04:16:28.389 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
04:16:28.390 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [0, 0, 0]
04:16:28.390 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
04:16:28.391 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:28.401 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
04:16:28.402 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
04:16:28.402 [main] [36mDEBUG[m  - ch_PreviousLetter :                            
04:16:28.402 [main] [36mDEBUG[m  - ch_NewLetter :                                 
04:16:28.402 [main] [30mTRACE[m  - ###########################################################################################################
04:16:28.403 [main] [30mTRACE[m  - ###########################################################################################################
04:16:28.403 [main] [30mTRACE[m  - ###########################################################################################################

04:16:28.403 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:28.403 [main] [36mDEBUG[m  - Incr√©mentation String() : EECDBAEB
04:16:28.403 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : EECDBAEB
04:16:28.613 [main] [30mTRACE[m  - ####################################################
04:16:28.614 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:28.614 [main] [30mTRACE[m  - ####################################################
04:16:28.614 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:28.614 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:28.615 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:28.615 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [E, E, C, D, B, A, E, B]
04:16:28.616 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:28.616 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:28.616 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:28.618 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:28.619 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:28.621 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:28.622 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:28.622 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:28.623 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.623 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:28.624 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.625 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:28.626 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:28.626 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
04:16:28.626 [main] [30mTRACE[m  - ###############################################
04:16:28.627 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:28.627 [main] [30mTRACE[m  - ###############################################
04:16:28.627 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:28.627 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:28.627 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.627 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.628 [main] [36mDEBUG[m  - Index de la lettre
04:16:28.628 [main] [30mTRACE[m  - #############################################
04:16:28.628 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:28.628 [main] [30mTRACE[m  - #############################################

04:16:28.628 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
04:16:28.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:28.630 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:28.630 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
04:16:28.630 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:28.630 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:28.631 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
04:16:28.631 [main] [30mTRACE[m  - ###############################################
04:16:28.631 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:28.631 [main] [30mTRACE[m  - ###############################################
04:16:28.631 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:28.631 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:28.631 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.631 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.631 [main] [36mDEBUG[m  - Index de la lettre
04:16:28.631 [main] [30mTRACE[m  - #############################################
04:16:28.631 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:28.631 [main] [30mTRACE[m  - #############################################

04:16:28.631 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
04:16:28.632 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:28.632 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:28.632 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 1, 0, 0]
04:16:28.632 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:28.632 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:28.632 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:28.632 [main] [30mTRACE[m  - ###############################################
04:16:28.632 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:28.632 [main] [30mTRACE[m  - ###############################################
04:16:28.632 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:28.632 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:28.632 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.633 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.633 [main] [36mDEBUG[m  - Index de la lettre
04:16:28.633 [main] [30mTRACE[m  - #############################################
04:16:28.633 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:28.633 [main] [30mTRACE[m  - #############################################

04:16:28.633 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:28.633 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:28.633 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:28.633 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 1, 0, 0]
04:16:28.634 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:28.635 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.637 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:28.638 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:28.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, true, true, false, false, false, true]
04:16:28.639 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.641 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:28.642 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, true, false, false, true]
04:16:28.642 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:28.643 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.643 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:28.645 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 1, 1, 0]
04:16:28.645 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:28.646 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:28.647 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:28.647 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:28.647 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:28.648 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.648 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:28.648 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:28.648 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:28.648 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:28.648 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:28.648 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:28.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, true, true, false, false, true]
04:16:28.649 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
04:16:28.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:28.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 1, 1, 0]
04:16:28.650 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:28.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 1]
04:16:28.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:28.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:28.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:28.650 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:28.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:28.650 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:28.650 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:28.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:28.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 1, 0]
04:16:28.651 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:28.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 1]
04:16:28.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:28.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:28.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:28.651 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:28.651 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:28.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 2]
04:16:28.651 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
04:16:28.652 [main] [30mTRACE[m  - ##################################################
04:16:28.652 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:28.652 [main] [30mTRACE[m  - ##################################################

04:16:28.652 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:29.471 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:29.471 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:29.471 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:29.472 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
04:16:29.472 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:29.692 [main] [30mTRACE[m  - ##########################
04:16:29.693 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:29.693 [main] [30mTRACE[m  - ##########################

04:16:29.693 [main] [30mTRACE[m  - ############################
04:16:29.693 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:29.693 [main] [30mTRACE[m  - ############################
04:16:29.694 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:29.694 [main] [30mTRACE[m  - #####################################
04:16:29.694 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:29.694 [main] [30mTRACE[m  - #####################################
04:16:29.694 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:29.694 [main] [30mTRACE[m  - ###########################################################
04:16:29.694 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:29.695 [main] [30mTRACE[m  - ###########################################################
04:16:29.695 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:29.695 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:29.695 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [E, E, C, D, B, A, E, B]
04:16:29.696 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
04:16:29.696 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:29.697 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:29.697 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:29.697 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:29.697 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:29.697 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
04:16:29.697 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
04:16:29.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:29.698 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:29.698 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:29.698 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:29.699 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
04:16:29.699 [main] [30mTRACE[m  - ###############################################
04:16:29.699 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:29.699 [main] [30mTRACE[m  - ###############################################
04:16:29.699 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:29.699 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:29.700 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.700 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.700 [main] [36mDEBUG[m  - Index de la lettre
04:16:29.700 [main] [30mTRACE[m  - #############################################
04:16:29.700 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:29.700 [main] [30mTRACE[m  - #############################################

04:16:29.700 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:29.700 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:29.700 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:29.700 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:29.701 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:29.701 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:29.701 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:29.701 [main] [30mTRACE[m  - #########################################################
04:16:29.701 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:29.701 [main] [30mTRACE[m  - #########################################################

04:16:29.701 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:29.701 [main] [30mTRACE[m  - ###################################
04:16:29.701 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:29.701 [main] [30mTRACE[m  - ###################################

04:16:29.701 [main] [30mTRACE[m  - ###########################################################################################################
04:16:29.701 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:29.701 [main] [30mTRACE[m  - ###########################################################################################################
04:16:29.702 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:29.702 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:29.702 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:29.702 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  1
04:16:29.702 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [F, E, C, D, B, A, E, B]
04:16:29.702 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [F, E, C, D, B, A, E, B]
04:16:29.702 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
04:16:29.702 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
04:16:29.702 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
04:16:29.702 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:29.706 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
04:16:29.706 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
04:16:29.706 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
04:16:29.706 [main] [36mDEBUG[m  - ch_NewLetter :                                F
04:16:29.706 [main] [30mTRACE[m  - ###########################################################################################################
04:16:29.706 [main] [30mTRACE[m  - ###########################################################################################################
04:16:29.706 [main] [30mTRACE[m  - ###########################################################################################################

04:16:29.706 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:29.706 [main] [36mDEBUG[m  - Incr√©mentation String() : FECDBAEB
04:16:29.707 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : FECDBAEB
04:16:29.910 [main] [30mTRACE[m  - ####################################################
04:16:29.910 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:29.910 [main] [30mTRACE[m  - ####################################################
04:16:29.910 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:29.910 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:29.911 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:29.911 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, E, C, D, B, A, E, B]
04:16:29.911 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:29.911 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:29.911 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:29.911 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:29.911 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:29.911 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:29.911 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:29.911 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:29.911 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.911 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:29.911 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.911 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:29.911 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:29.911 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
04:16:29.911 [main] [30mTRACE[m  - ###############################################
04:16:29.911 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:29.912 [main] [30mTRACE[m  - ###############################################
04:16:29.912 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:29.912 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:29.912 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.912 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.912 [main] [36mDEBUG[m  - Index de la lettre
04:16:29.912 [main] [30mTRACE[m  - #############################################
04:16:29.912 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:29.912 [main] [30mTRACE[m  - #############################################

04:16:29.912 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
04:16:29.912 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:29.912 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:29.912 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
04:16:29.912 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:29.913 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:29.913 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
04:16:29.913 [main] [30mTRACE[m  - ###############################################
04:16:29.913 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:29.913 [main] [30mTRACE[m  - ###############################################
04:16:29.913 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:29.913 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:29.913 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.913 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.913 [main] [36mDEBUG[m  - Index de la lettre
04:16:29.913 [main] [30mTRACE[m  - #############################################
04:16:29.913 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:29.913 [main] [30mTRACE[m  - #############################################

04:16:29.914 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
04:16:29.914 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:29.914 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:29.914 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 1, 0, 0]
04:16:29.914 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:29.914 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:29.914 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:29.914 [main] [30mTRACE[m  - ###############################################
04:16:29.914 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:29.914 [main] [30mTRACE[m  - ###############################################
04:16:29.914 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:29.915 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:29.915 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.916 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.916 [main] [36mDEBUG[m  - Index de la lettre
04:16:29.916 [main] [30mTRACE[m  - #############################################
04:16:29.916 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:29.917 [main] [30mTRACE[m  - #############################################

04:16:29.917 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:29.917 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:29.917 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:29.918 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 1, 0, 0]
04:16:29.918 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:29.918 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.918 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:29.918 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:29.919 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, true, true, false, false, false, true]
04:16:29.919 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.919 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:29.919 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, true, false, true]
04:16:29.920 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
04:16:29.920 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.920 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:29.920 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 1, 0, 1]
04:16:29.920 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:29.920 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:29.920 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:29.920 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:29.920 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:29.925 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.925 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:29.926 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, true, true, false, true]
04:16:29.927 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:29.927 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.927 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:29.927 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 1, 1, 1]
04:16:29.927 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:29.927 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 0]
04:16:29.927 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:29.927 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:29.927 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:29.928 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.928 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:29.928 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, true, true, true, false, true]
04:16:29.928 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
04:16:29.928 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.928 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:29.928 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 1, 1, 1]
04:16:29.928 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:29.928 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 0]
04:16:29.928 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:29.928 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:29.928 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:29.928 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.928 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:29.929 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:29.929 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:29.929 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:29.929 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:29.929 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 1, 1]
04:16:29.929 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:29.930 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 4, 0]
04:16:29.930 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:29.931 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:29.931 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:29.931 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:29.931 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:29.931 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 4, 1]
04:16:29.931 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 4, 1]
04:16:29.931 [main] [30mTRACE[m  - ##################################################
04:16:29.931 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:29.932 [main] [30mTRACE[m  - ##################################################

04:16:29.932 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:30.750 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:30.751 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:30.751 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:30.751 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
04:16:30.751 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:30.957 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:30.957 [main] [30mTRACE[m  - ##############################################################
04:16:30.957 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:30.957 [main] [30mTRACE[m  - ##############################################################
04:16:30.960 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
04:16:30.961 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 4, 1]
04:16:30.962 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 4, 1]
04:16:30.963 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:30.963 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
04:16:30.963 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:30.963 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
04:16:30.964 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
04:16:30.964 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
04:16:30.964 [main] [30mTRACE[m  - ############################################################
04:16:30.964 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:30.964 [main] [30mTRACE[m  - ############################################################

04:16:30.964 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:30.964 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
04:16:30.965 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
04:16:30.965 [main] [30mTRACE[m  - ################################################
04:16:30.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
04:16:30.965 [main] [30mTRACE[m  - ################################################
04:16:30.965 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:30.965 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 0
04:16:30.965 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : F
04:16:30.966 [main] [30mTRACE[m  - ###############################################
04:16:30.966 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:30.966 [main] [30mTRACE[m  - ###############################################
04:16:30.966 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:30.966 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:30.966 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:30.966 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:30.966 [main] [36mDEBUG[m  - Index de la lettre
04:16:30.966 [main] [30mTRACE[m  - #############################################
04:16:30.966 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:30.966 [main] [30mTRACE[m  - #############################################

04:16:30.967 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 5
04:16:30.967 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
04:16:30.967 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
04:16:30.972 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:30.974 [main] [30mTRACE[m  - ##############################################
04:16:30.974 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
04:16:30.974 [main] [30mTRACE[m  - ##############################################
04:16:30.974 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
04:16:30.975 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:30.975 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:30.975 [main] [36mDEBUG[m  - (int) Nombre de tours : 7
04:16:30.975 [main] [30mTRACE[m  - ############################################
04:16:30.975 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
04:16:30.975 [main] [30mTRACE[m  - ############################################

04:16:30.975 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 7
04:16:30.976 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
04:16:30.976 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
04:16:30.976 [main] [30mTRACE[m  - ########################################################
04:16:30.976 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:30.976 [main] [30mTRACE[m  - ########################################################
04:16:30.976 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:30.977 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:30.977 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 0
04:16:30.977 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:30.977 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:30.978 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 1
04:16:30.978 [main] [30mTRACE[m  - ######################################################
04:16:30.978 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:30.978 [main] [30mTRACE[m  - ######################################################

04:16:30.979 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 1
04:16:30.979 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:30.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, E, C, D, B, A, E, B]
04:16:30.980 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [F, F, C, D, B, A, E, B]
04:16:30.980 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:30.980 [main] [36mDEBUG[m  - Incr√©mentation String() : FFCDBAEB
04:16:30.980 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : FFCDBAEB
04:16:31.184 [main] [30mTRACE[m  - ####################################################
04:16:31.185 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:31.186 [main] [30mTRACE[m  - ####################################################
04:16:31.186 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:31.186 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:31.186 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:31.186 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, C, D, B, A, E, B]
04:16:31.186 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:31.187 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:31.187 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:31.187 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:31.187 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:31.187 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:31.187 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:31.187 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:31.187 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.188 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:31.188 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.188 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:31.188 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:31.188 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
04:16:31.188 [main] [30mTRACE[m  - ###############################################
04:16:31.188 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:31.188 [main] [30mTRACE[m  - ###############################################
04:16:31.188 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:31.188 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:31.188 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.188 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.188 [main] [36mDEBUG[m  - Index de la lettre
04:16:31.189 [main] [30mTRACE[m  - #############################################
04:16:31.190 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:31.190 [main] [30mTRACE[m  - #############################################

04:16:31.191 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
04:16:31.191 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:31.192 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, false, false, false, false, false]
04:16:31.206 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
04:16:31.220 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:31.220 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:31.220 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
04:16:31.221 [main] [30mTRACE[m  - ###############################################
04:16:31.221 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:31.221 [main] [30mTRACE[m  - ###############################################
04:16:31.221 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:31.221 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:31.222 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.222 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.223 [main] [36mDEBUG[m  - Index de la lettre
04:16:31.223 [main] [30mTRACE[m  - #############################################
04:16:31.223 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:31.224 [main] [30mTRACE[m  - #############################################

04:16:31.224 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
04:16:31.225 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:31.225 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, false]
04:16:31.225 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 1, 0, 0]
04:16:31.225 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:31.225 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:31.225 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:31.225 [main] [30mTRACE[m  - ###############################################
04:16:31.225 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:31.225 [main] [30mTRACE[m  - ###############################################
04:16:31.225 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:31.225 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:31.227 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.227 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.227 [main] [36mDEBUG[m  - Index de la lettre
04:16:31.227 [main] [30mTRACE[m  - #############################################
04:16:31.227 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:31.227 [main] [30mTRACE[m  - #############################################

04:16:31.227 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:31.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:31.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, false, false, true]
04:16:31.228 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 1, 0, 0]
04:16:31.228 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:31.228 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.228 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:31.228 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:31.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, true, true, false, false, false, true]
04:16:31.228 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.228 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:31.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, true, true, false, true, false, true]
04:16:31.228 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
04:16:31.228 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.228 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:31.228 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 1, 1, 0, 1]
04:16:31.228 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:31.228 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:31.229 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:31.229 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:31.229 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:31.229 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.229 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:31.229 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:31.230 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:31.231 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:31.231 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:31.231 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.231 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:31.231 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, true, true, false, true, false, true]
04:16:31.231 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
04:16:31.231 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.231 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:31.231 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 1, 1, 0, 1]
04:16:31.231 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:31.231 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 1]
04:16:31.231 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:31.231 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:31.231 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:31.231 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.231 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:31.231 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:31.231 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:31.232 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.232 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:31.232 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 0, 1]
04:16:31.232 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:31.232 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 1]
04:16:31.232 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:31.232 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:31.232 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:31.232 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:31.232 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:31.232 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:31.232 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:31.232 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:31.232 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:31.232 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 1, 1, 1, 1]
04:16:31.233 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:31.233 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 4, 1]
04:16:31.233 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 4, 1]
04:16:31.233 [main] [30mTRACE[m  - ##################################################
04:16:31.233 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:31.233 [main] [30mTRACE[m  - ##################################################

04:16:31.233 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:32.050 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:32.050 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:32.051 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:32.051 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
04:16:32.051 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:32.255 [main] [30mTRACE[m  - ##############################################################
04:16:32.256 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:32.256 [main] [30mTRACE[m  - ##############################################################
04:16:32.256 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 4, 1]
04:16:32.256 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 4, 1]
04:16:32.256 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 4, 1]
04:16:32.257 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:32.257 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:32.257 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:32.257 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:32.257 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:32.257 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:32.257 [main] [30mTRACE[m  - ############################################################
04:16:32.257 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:32.257 [main] [30mTRACE[m  - ############################################################

04:16:32.257 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:32.258 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:32.258 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:32.258 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:32.258 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:32.263 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
04:16:32.263 [main] [30mTRACE[m  - ########################################################
04:16:32.263 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:32.263 [main] [30mTRACE[m  - ########################################################
04:16:32.263 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:32.263 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:32.263 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 1
04:16:32.263 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:32.263 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:32.263 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 2
04:16:32.264 [main] [30mTRACE[m  - ######################################################
04:16:32.264 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:32.264 [main] [30mTRACE[m  - ######################################################

04:16:32.264 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 2
04:16:32.264 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:32.264 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, C, D, B, A, E, B]
04:16:32.264 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, D, B, A, E, B]
04:16:32.264 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:32.264 [main] [36mDEBUG[m  - Incr√©mentation String() : FFFDBAEB
04:16:32.264 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : FFFDBAEB
04:16:32.471 [main] [30mTRACE[m  - ####################################################
04:16:32.471 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:32.471 [main] [30mTRACE[m  - ####################################################
04:16:32.471 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:32.472 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:32.472 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:32.472 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, F, D, B, A, E, B]
04:16:32.472 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:32.472 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:32.472 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:32.472 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:32.472 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:32.472 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:32.472 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:32.472 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:32.472 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.473 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:32.473 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.473 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:32.473 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:32.473 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
04:16:32.473 [main] [30mTRACE[m  - ###############################################
04:16:32.473 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:32.474 [main] [30mTRACE[m  - ###############################################
04:16:32.474 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:32.474 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:32.474 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.475 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.475 [main] [36mDEBUG[m  - Index de la lettre
04:16:32.475 [main] [30mTRACE[m  - #############################################
04:16:32.475 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:32.475 [main] [30mTRACE[m  - #############################################

04:16:32.475 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
04:16:32.475 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
04:16:32.475 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
04:16:32.475 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 1, 0, 0]
04:16:32.475 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:32.475 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:32.475 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:32.475 [main] [30mTRACE[m  - ###############################################
04:16:32.475 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:32.475 [main] [30mTRACE[m  - ###############################################
04:16:32.475 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:32.475 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:32.476 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.476 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.476 [main] [36mDEBUG[m  - Index de la lettre
04:16:32.476 [main] [30mTRACE[m  - #############################################
04:16:32.476 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:32.476 [main] [30mTRACE[m  - #############################################

04:16:32.476 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:32.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, true]
04:16:32.476 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, true]
04:16:32.476 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 1, 0, 0]
04:16:32.476 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:32.476 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.476 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.476 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:32.477 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
04:16:32.477 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.477 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:32.477 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, false, true]
04:16:32.477 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
04:16:32.477 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.477 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:32.477 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 0, 1, 0, 1]
04:16:32.477 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:32.477 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
04:16:32.477 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.477 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:32.477 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
04:16:32.477 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.477 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:32.477 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
04:16:32.477 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.477 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:32.478 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:32.478 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.478 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:32.478 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
04:16:32.478 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.478 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:32.478 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:32.478 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.478 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:32.478 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, true, false, true]
04:16:32.478 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
04:16:32.478 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.478 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:32.478 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 0, 1, 0, 1]
04:16:32.478 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:32.478 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
04:16:32.478 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.479 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:32.479 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:32.479 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:32.479 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, true]
04:16:32.479 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:32.479 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.479 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:32.479 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 1, 0, 1]
04:16:32.479 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:32.479 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 2]
04:16:32.479 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:32.481 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:32.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:32.481 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:32.481 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:32.481 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, true, true, false, true]
04:16:32.481 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:32.481 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:32.481 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:32.481 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 1, 1, 1]
04:16:32.481 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:32.481 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
04:16:32.485 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
04:16:32.485 [main] [30mTRACE[m  - ##################################################
04:16:32.485 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:32.485 [main] [30mTRACE[m  - ##################################################

04:16:32.485 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:33.305 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:33.306 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:33.306 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:33.306 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
04:16:33.306 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:33.510 [main] [30mTRACE[m  - ##############################################################
04:16:33.510 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:33.510 [main] [30mTRACE[m  - ##############################################################
04:16:33.510 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 4, 1]
04:16:33.510 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
04:16:33.510 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
04:16:33.510 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
04:16:33.510 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:33.510 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
04:16:33.510 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
04:16:33.511 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
04:16:33.511 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
04:16:33.511 [main] [30mTRACE[m  - ############################################################
04:16:33.511 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:33.511 [main] [30mTRACE[m  - ############################################################

04:16:33.511 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:33.511 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
04:16:33.511 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:33.511 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:33.511 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:33.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
04:16:33.512 [main] [30mTRACE[m  - ########################################################
04:16:33.512 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:33.512 [main] [30mTRACE[m  - ########################################################
04:16:33.512 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:33.512 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:33.512 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
04:16:33.512 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:33.512 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:33.512 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
04:16:33.512 [main] [30mTRACE[m  - ######################################################
04:16:33.512 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:33.512 [main] [30mTRACE[m  - ######################################################

04:16:33.512 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
04:16:33.512 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:33.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, D, B, A, E, B]
04:16:33.512 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, B, A, E, B]
04:16:33.512 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:33.513 [main] [36mDEBUG[m  - Incr√©mentation String() : FFFFBAEB
04:16:33.513 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : FFFFBAEB
04:16:33.716 [main] [30mTRACE[m  - ####################################################
04:16:33.716 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:33.717 [main] [30mTRACE[m  - ####################################################
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, F, F, B, A, E, B]
04:16:33.717 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:33.717 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:33.717 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:33.717 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:33.717 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:33.717 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:33.717 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:33.717 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.717 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:33.717 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.717 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:33.717 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:33.717 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:33.717 [main] [30mTRACE[m  - ###############################################
04:16:33.717 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:33.717 [main] [30mTRACE[m  - ###############################################
04:16:33.717 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:33.717 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:33.717 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.717 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.717 [main] [36mDEBUG[m  - Index de la lettre
04:16:33.717 [main] [30mTRACE[m  - #############################################
04:16:33.717 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:33.717 [main] [30mTRACE[m  - #############################################

04:16:33.717 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:33.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, false, false, true]
04:16:33.717 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, false, false, true]
04:16:33.718 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
04:16:33.718 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:33.718 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.718 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.718 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:33.718 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
04:16:33.718 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.718 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:33.719 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, true]
04:16:33.719 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
04:16:33.719 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.719 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:33.719 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 0, 0, 0, 1]
04:16:33.719 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:33.719 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 1, 0]
04:16:33.719 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.719 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:33.720 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, true]
04:16:33.721 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.721 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:33.721 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 1]
04:16:33.722 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.722 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:33.722 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, true]
04:16:33.722 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.722 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:33.722 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 2]
04:16:33.722 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.722 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:33.722 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:33.722 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.722 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:33.722 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 3]
04:16:33.722 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.722 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:33.722 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:33.722 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.722 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:33.722 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, true, false, true]
04:16:33.723 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
04:16:33.723 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.723 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:33.723 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 0, 0, 0, 1]
04:16:33.723 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:33.723 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 2, 3]
04:16:33.723 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.723 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:33.723 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:33.723 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.724 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:33.724 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:33.724 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:33.724 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.724 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:33.724 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 0, 0, 1]
04:16:33.724 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:33.725 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 3, 3]
04:16:33.726 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:33.726 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:33.726 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:33.726 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:33.726 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:33.726 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, true, true, false, true]
04:16:33.726 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:33.726 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:33.726 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:33.726 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 0, 1, 1]
04:16:33.726 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:33.726 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 4, 3]
04:16:33.726 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [1, 4, 3]
04:16:33.726 [main] [30mTRACE[m  - ##################################################
04:16:33.726 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:33.726 [main] [30mTRACE[m  - ##################################################

04:16:33.726 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:34.541 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:34.541 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:34.541 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:34.541 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
04:16:34.541 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:34.746 [main] [30mTRACE[m  - ##############################################################
04:16:34.746 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:34.746 [main] [30mTRACE[m  - ##############################################################
04:16:34.746 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
04:16:34.746 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [1, 4, 3]
04:16:34.746 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [1, 4, 3]
04:16:34.746 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
04:16:34.746 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:34.746 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
04:16:34.746 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
04:16:34.746 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
04:16:34.746 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
04:16:34.746 [main] [30mTRACE[m  - ############################################################
04:16:34.746 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:34.746 [main] [30mTRACE[m  - ############################################################

04:16:34.746 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:34.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
04:16:34.746 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:34.746 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:34.747 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:34.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
04:16:34.748 [main] [30mTRACE[m  - ########################################################
04:16:34.748 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:34.748 [main] [30mTRACE[m  - ########################################################
04:16:34.749 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:34.749 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:34.749 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
04:16:34.749 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:34.749 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:34.749 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
04:16:34.749 [main] [30mTRACE[m  - ######################################################
04:16:34.749 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:34.749 [main] [30mTRACE[m  - ######################################################

04:16:34.749 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
04:16:34.749 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:34.749 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, B, A, E, B]
04:16:34.749 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, F, A, E, B]
04:16:34.749 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:34.749 [main] [36mDEBUG[m  - Incr√©mentation String() : FFFFFAEB
04:16:34.749 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : FFFFFAEB
04:16:34.952 [main] [30mTRACE[m  - ####################################################
04:16:34.953 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:34.953 [main] [30mTRACE[m  - ####################################################
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, F, F, F, A, E, B]
04:16:34.953 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:34.953 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:34.953 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:34.953 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:34.953 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:34.953 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:34.953 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:34.953 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.953 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:34.953 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.953 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:34.953 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:34.953 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:34.953 [main] [30mTRACE[m  - ###############################################
04:16:34.953 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:34.953 [main] [30mTRACE[m  - ###############################################
04:16:34.953 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:34.953 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:34.953 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:34.953 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:34.953 [main] [36mDEBUG[m  - Index de la lettre
04:16:34.954 [main] [30mTRACE[m  - #############################################
04:16:34.954 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:34.954 [main] [30mTRACE[m  - #############################################

04:16:34.954 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:34.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, false, false, true]
04:16:34.954 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, false, false, true]
04:16:34.954 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
04:16:34.954 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:34.955 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.955 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:34.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
04:16:34.956 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.956 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:34.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, true]
04:16:34.956 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
04:16:34.956 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:34.956 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:34.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 0, 0, 0, 1]
04:16:34.956 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:34.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 1, 0]
04:16:34.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:34.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, true]
04:16:34.956 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:34.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 1]
04:16:34.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:34.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, true]
04:16:34.956 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.956 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:34.956 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 2]
04:16:34.956 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.956 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:34.956 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
04:16:34.956 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:34.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 3]
04:16:34.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:34.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
04:16:34.957 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.957 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:34.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [1, 1, 4]
04:16:34.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:34.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:34.957 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.957 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:34.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:34.957 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:34.957 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:34.957 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:34.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 0, 1]
04:16:34.957 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:34.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 2, 4]
04:16:34.957 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:34.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:34.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:34.957 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:34.957 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:34.957 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, false, true]
04:16:34.957 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:34.957 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:34.957 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:34.957 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 1]
04:16:34.957 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:34.957 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [1, 3, 4]
04:16:34.957 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [1, 3, 4]
04:16:34.958 [main] [30mTRACE[m  - ##################################################
04:16:34.958 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:34.958 [main] [30mTRACE[m  - ##################################################

04:16:34.958 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:35.772 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:35.772 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:35.772 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:35.772 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 6
04:16:35.772 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:35.977 [main] [30mTRACE[m  - ##############################################################
04:16:35.977 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:35.977 [main] [30mTRACE[m  - ##############################################################
04:16:35.977 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [1, 4, 3]
04:16:35.977 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [1, 3, 4]
04:16:35.977 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [1, 3, 4]
04:16:35.977 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:35.977 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
04:16:35.977 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
04:16:35.977 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
04:16:35.978 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
04:16:35.978 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
04:16:35.978 [main] [30mTRACE[m  - ############################################################
04:16:35.978 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:35.978 [main] [30mTRACE[m  - ############################################################

04:16:35.978 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:35.978 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
04:16:35.978 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:35.978 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:35.978 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:35.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
04:16:35.982 [main] [30mTRACE[m  - ########################################################
04:16:35.982 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:35.982 [main] [30mTRACE[m  - ########################################################
04:16:35.982 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:35.982 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:35.982 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
04:16:35.982 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:35.982 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:35.982 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
04:16:35.982 [main] [30mTRACE[m  - ######################################################
04:16:35.982 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:35.982 [main] [30mTRACE[m  - ######################################################

04:16:35.982 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
04:16:35.982 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:35.982 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, F, A, E, B]
04:16:35.982 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, F, F, E, B]
04:16:35.982 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:35.982 [main] [36mDEBUG[m  - Incr√©mentation String() : FFFFFFEB
04:16:35.982 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : FFFFFFEB
04:16:36.186 [main] [30mTRACE[m  - ####################################################
04:16:36.186 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:36.187 [main] [30mTRACE[m  - ####################################################
04:16:36.187 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:36.187 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:36.187 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:36.187 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, F, F, F, F, E, B]
04:16:36.187 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:36.187 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:36.188 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:36.188 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
04:16:36.188 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:36.188 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:36.188 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:36.188 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:36.188 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.188 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:36.188 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.188 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:36.188 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:36.188 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : F
04:16:36.188 [main] [30mTRACE[m  - ###############################################
04:16:36.188 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:36.188 [main] [30mTRACE[m  - ###############################################
04:16:36.188 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:36.188 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:36.188 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:36.188 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:36.188 [main] [36mDEBUG[m  - Index de la lettre
04:16:36.188 [main] [30mTRACE[m  - #############################################
04:16:36.189 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:36.189 [main] [30mTRACE[m  - #############################################

04:16:36.189 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 5
04:16:36.189 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
04:16:36.189 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
04:16:36.190 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 0, 1]
04:16:36.190 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:36.190 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:36.191 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:36.191 [main] [30mTRACE[m  - ###############################################
04:16:36.191 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:36.191 [main] [30mTRACE[m  - ###############################################
04:16:36.191 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:36.191 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:36.191 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:36.191 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:36.191 [main] [36mDEBUG[m  - Index de la lettre
04:16:36.191 [main] [30mTRACE[m  - #############################################
04:16:36.192 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:36.192 [main] [30mTRACE[m  - #############################################

04:16:36.192 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, true]
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, true]
04:16:36.193 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 1]
04:16:36.193 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:36.193 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.193 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.193 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:36.193 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.193 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:36.193 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 1]
04:16:36.193 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.193 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:36.193 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.193 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:36.193 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 2]
04:16:36.193 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.193 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:36.193 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.193 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:36.193 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 3]
04:16:36.193 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.193 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:36.193 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:36.194 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.194 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:36.194 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 4]
04:16:36.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:36.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:36.194 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.194 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:36.194 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 5]
04:16:36.194 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:36.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:36.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:36.194 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:36.194 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:36.194 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, false, true]
04:16:36.194 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:36.194 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:36.194 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:36.194 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 1, 0, 0, 1, 1]
04:16:36.194 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:36.194 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 5]
04:16:36.194 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 1, 5]
04:16:36.194 [main] [30mTRACE[m  - ##################################################
04:16:36.194 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:36.194 [main] [30mTRACE[m  - ##################################################

04:16:36.194 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:37.011 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:37.011 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:37.011 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:37.011 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 7
04:16:37.011 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:37.215 [main] [30mTRACE[m  - ##############################################################
04:16:37.215 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:37.215 [main] [30mTRACE[m  - ##############################################################
04:16:37.215 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [1, 3, 4]
04:16:37.215 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 1, 5]
04:16:37.215 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 1, 5]
04:16:37.216 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:37.216 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
04:16:37.216 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
04:16:37.216 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
04:16:37.216 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:37.216 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:37.216 [main] [30mTRACE[m  - ############################################################
04:16:37.216 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:37.216 [main] [30mTRACE[m  - ############################################################

04:16:37.217 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:37.217 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:37.217 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:37.217 [main] [30mTRACE[m  - ##############################################
04:16:37.217 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:37.217 [main] [30mTRACE[m  - ##############################################
04:16:37.217 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:37.217 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:37.217 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:37.217 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:37.217 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:37.217 [main] [30mTRACE[m  - ###############################################
04:16:37.217 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:37.217 [main] [30mTRACE[m  - ###############################################
04:16:37.217 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:37.217 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.217 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.217 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.217 [main] [36mDEBUG[m  - Index de la lettre
04:16:37.217 [main] [30mTRACE[m  - #############################################
04:16:37.217 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:37.217 [main] [30mTRACE[m  - #############################################

04:16:37.217 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:37.217 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.217 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:37.218 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:37.218 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.218 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:37.218 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:37.218 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.218 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:37.218 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:37.218 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.218 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:37.218 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:37.218 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.218 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:37.218 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:37.218 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.218 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:37.218 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:37.218 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:37.219 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, true, false, false]
04:16:37.219 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:37.219 [main] [30mTRACE[m  - ############################################
04:16:37.219 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:37.219 [main] [30mTRACE[m  - ############################################

04:16:37.219 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:37.219 [main] [30mTRACE[m  - ##############################################
04:16:37.219 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
04:16:37.219 [main] [30mTRACE[m  - ##############################################

04:16:37.219 [main] [32mINFO [m  - Lancement diff√©rence positive
04:16:37.220 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
04:16:37.220 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
04:16:37.220 [main] [30mTRACE[m  - ##########################
04:16:37.220 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:37.220 [main] [30mTRACE[m  - ##########################

04:16:37.220 [main] [30mTRACE[m  - ############################
04:16:37.220 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:37.220 [main] [30mTRACE[m  - ############################
04:16:37.220 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:37.220 [main] [30mTRACE[m  - #####################################
04:16:37.220 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:37.220 [main] [30mTRACE[m  - #####################################
04:16:37.220 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:37.220 [main] [30mTRACE[m  - ###########################################################
04:16:37.220 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:37.220 [main] [30mTRACE[m  - ###########################################################
04:16:37.220 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:37.220 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:37.221 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, F, F, F, F, E, B]
04:16:37.221 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, true, false, false]
04:16:37.221 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:37.221 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:37.221 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:37.221 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:37.221 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:37.221 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
04:16:37.221 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:37.221 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:37.221 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:37.221 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:37.221 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
04:16:37.221 [main] [30mTRACE[m  - ###############################################
04:16:37.221 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:37.221 [main] [30mTRACE[m  - ###############################################
04:16:37.221 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:37.221 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.221 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.221 [main] [36mDEBUG[m  - Index de la lettre
04:16:37.221 [main] [30mTRACE[m  - #############################################
04:16:37.222 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:37.222 [main] [30mTRACE[m  - #############################################

04:16:37.222 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:37.222 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:37.222 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:37.222 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:37.222 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:37.223 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:37.223 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:37.223 [main] [30mTRACE[m  - #########################################################
04:16:37.223 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:37.223 [main] [30mTRACE[m  - #########################################################

04:16:37.223 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:37.223 [main] [30mTRACE[m  - ###################################
04:16:37.223 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:37.223 [main] [30mTRACE[m  - ###################################

04:16:37.223 [main] [30mTRACE[m  - ###########################################################################################################
04:16:37.223 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:37.223 [main] [30mTRACE[m  - ###########################################################################################################
04:16:37.223 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:37.223 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:37.223 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:37.223 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  7
04:16:37.223 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, F, F, F, F, F, E, B]
04:16:37.223 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, F, F, F, F, F, E, B]
04:16:37.223 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [1, 3, 4]
04:16:37.223 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 1, 5]
04:16:37.223 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:37.223 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:37.224 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, true, false, false]
04:16:37.224 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
04:16:37.224 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
04:16:37.224 [main] [36mDEBUG[m  - ch_NewLetter :                                A
04:16:37.225 [main] [30mTRACE[m  - ###########################################################################################################
04:16:37.225 [main] [30mTRACE[m  - ###########################################################################################################
04:16:37.225 [main] [30mTRACE[m  - ###########################################################################################################

04:16:37.225 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:37.225 [main] [36mDEBUG[m  - Incr√©mentation String() : AFFFFFEB
04:16:37.225 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AFFFFFEB
04:16:37.431 [main] [30mTRACE[m  - ####################################################
04:16:37.431 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:37.431 [main] [30mTRACE[m  - ####################################################
04:16:37.431 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.431 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:37.431 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:37.432 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, F, F, F, F, F, E, B]
04:16:37.432 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:37.432 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:37.432 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:37.432 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, true, false, false]
04:16:37.432 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:37.432 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:37.432 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:37.432 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:37.432 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.432 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:37.432 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:37.432 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:37.433 [main] [30mTRACE[m  - ###############################################
04:16:37.433 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:37.433 [main] [30mTRACE[m  - ###############################################
04:16:37.433 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:37.433 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.433 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.433 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.433 [main] [36mDEBUG[m  - Index de la lettre
04:16:37.433 [main] [30mTRACE[m  - #############################################
04:16:37.433 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:37.433 [main] [30mTRACE[m  - #############################################

04:16:37.433 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:37.433 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
04:16:37.433 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
04:16:37.433 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 0, 1]
04:16:37.433 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:37.434 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.434 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:37.434 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:37.434 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
04:16:37.434 [main] [30mTRACE[m  - ###############################################
04:16:37.434 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:37.434 [main] [30mTRACE[m  - ###############################################
04:16:37.434 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:37.434 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.434 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.434 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.434 [main] [36mDEBUG[m  - Index de la lettre
04:16:37.434 [main] [30mTRACE[m  - #############################################
04:16:37.434 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:37.434 [main] [30mTRACE[m  - #############################################

04:16:37.434 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
04:16:37.434 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:37.434 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:37.434 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:37.434 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:37.434 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:37.434 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:37.434 [main] [30mTRACE[m  - ###############################################
04:16:37.434 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:37.434 [main] [30mTRACE[m  - ###############################################
04:16:37.434 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:37.434 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:37.434 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.434 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.434 [main] [36mDEBUG[m  - Index de la lettre
04:16:37.434 [main] [30mTRACE[m  - #############################################
04:16:37.434 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:37.434 [main] [30mTRACE[m  - #############################################

04:16:37.434 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:37.435 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:37.435 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:37.435 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.435 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:37.435 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:37.435 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.435 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:37.435 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 1]
04:16:37.435 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:37.435 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:37.435 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.435 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:37.435 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 2]
04:16:37.435 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:37.435 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:37.435 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.435 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:37.435 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 3]
04:16:37.435 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:37.435 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:37.435 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:37.435 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.435 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:37.435 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 4]
04:16:37.435 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:37.436 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:37.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:37.436 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:37.436 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:37.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, false, true]
04:16:37.436 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:37.436 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:37.436 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:37.436 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 0, 1, 1]
04:16:37.436 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:37.436 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 4]
04:16:37.436 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 1, 4]
04:16:37.436 [main] [30mTRACE[m  - ##################################################
04:16:37.436 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:37.436 [main] [30mTRACE[m  - ##################################################

04:16:37.436 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:38.252 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:38.256 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:38.256 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:38.256 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 8
04:16:38.256 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:38.460 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:38.460 [main] [30mTRACE[m  - ##############################################################
04:16:38.460 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:38.460 [main] [30mTRACE[m  - ##############################################################
04:16:38.460 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 1, 5]
04:16:38.460 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 1, 4]
04:16:38.460 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 1, 4]
04:16:38.460 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:38.460 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:38.461 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:38.461 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
04:16:38.461 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:38.461 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:38.461 [main] [30mTRACE[m  - ############################################################
04:16:38.461 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:38.461 [main] [30mTRACE[m  - ############################################################

04:16:38.461 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:38.461 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:38.461 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:38.461 [main] [30mTRACE[m  - ##############################################
04:16:38.461 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:38.461 [main] [30mTRACE[m  - ##############################################
04:16:38.461 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:38.461 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:38.461 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:38.461 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:38.461 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:38.461 [main] [30mTRACE[m  - ###############################################
04:16:38.461 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:38.461 [main] [30mTRACE[m  - ###############################################
04:16:38.461 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:38.461 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.461 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.461 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.461 [main] [36mDEBUG[m  - Index de la lettre
04:16:38.462 [main] [30mTRACE[m  - #############################################
04:16:38.462 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:38.463 [main] [30mTRACE[m  - #############################################

04:16:38.463 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:38.463 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.463 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:38.463 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.463 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:38.463 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:38.463 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.463 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:38.463 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:38.463 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.463 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:38.463 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:38.463 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.464 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:38.464 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:38.464 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.464 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:38.464 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:38.464 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:38.464 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:38.464 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, true, false, false]
04:16:38.465 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:38.465 [main] [30mTRACE[m  - ############################################
04:16:38.465 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:38.465 [main] [30mTRACE[m  - ############################################

04:16:38.465 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:38.465 [main] [30mTRACE[m  - ##########################
04:16:38.465 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:38.465 [main] [30mTRACE[m  - ##########################

04:16:38.465 [main] [30mTRACE[m  - ############################
04:16:38.465 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:38.466 [main] [30mTRACE[m  - ############################
04:16:38.466 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:38.466 [main] [30mTRACE[m  - #####################################
04:16:38.466 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:38.466 [main] [30mTRACE[m  - #####################################
04:16:38.466 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:38.466 [main] [30mTRACE[m  - ###########################################################
04:16:38.466 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:38.466 [main] [30mTRACE[m  - ###########################################################
04:16:38.466 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:38.466 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:38.466 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, F, F, F, F, F, E, B]
04:16:38.466 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, true, false, false]
04:16:38.466 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:38.467 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:38.467 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:38.467 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:38.467 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:38.467 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:38.467 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
04:16:38.467 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:38.467 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:38.468 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:38.468 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:38.468 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
04:16:38.468 [main] [30mTRACE[m  - ###############################################
04:16:38.468 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:38.468 [main] [30mTRACE[m  - ###############################################
04:16:38.468 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:38.468 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.468 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.468 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.468 [main] [36mDEBUG[m  - Index de la lettre
04:16:38.468 [main] [30mTRACE[m  - #############################################
04:16:38.468 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:38.468 [main] [30mTRACE[m  - #############################################

04:16:38.468 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:38.468 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:38.468 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:38.468 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:38.468 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:38.468 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:38.468 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:38.468 [main] [30mTRACE[m  - #########################################################
04:16:38.468 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:38.468 [main] [30mTRACE[m  - #########################################################

04:16:38.468 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:38.468 [main] [30mTRACE[m  - ###################################
04:16:38.468 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:38.468 [main] [30mTRACE[m  - ###################################

04:16:38.468 [main] [30mTRACE[m  - ###########################################################################################################
04:16:38.468 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:38.468 [main] [30mTRACE[m  - ###########################################################################################################
04:16:38.468 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:38.468 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:38.468 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:38.468 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  8
04:16:38.468 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, A, F, F, F, F, E, B]
04:16:38.468 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, A, F, F, F, F, E, B]
04:16:38.468 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 1, 5]
04:16:38.468 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 1, 4]
04:16:38.468 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:38.468 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:38.470 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, true, false, false]
04:16:38.470 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
04:16:38.470 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
04:16:38.470 [main] [36mDEBUG[m  - ch_NewLetter :                                A
04:16:38.470 [main] [30mTRACE[m  - ###########################################################################################################
04:16:38.470 [main] [30mTRACE[m  - ###########################################################################################################
04:16:38.470 [main] [30mTRACE[m  - ###########################################################################################################

04:16:38.470 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:38.470 [main] [36mDEBUG[m  - Incr√©mentation String() : AAFFFFEB
04:16:38.470 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AAFFFFEB
04:16:38.672 [main] [30mTRACE[m  - ####################################################
04:16:38.672 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:38.672 [main] [30mTRACE[m  - ####################################################
04:16:38.672 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.672 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:38.672 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:38.672 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, F, F, F, F, E, B]
04:16:38.672 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:38.672 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:38.672 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:38.672 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:38.672 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:38.672 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:38.672 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:38.673 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:38.673 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.673 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:38.673 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:38.673 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:38.673 [main] [30mTRACE[m  - ###############################################
04:16:38.673 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:38.673 [main] [30mTRACE[m  - ###############################################
04:16:38.673 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:38.673 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.673 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.673 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.673 [main] [36mDEBUG[m  - Index de la lettre
04:16:38.673 [main] [30mTRACE[m  - #############################################
04:16:38.673 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:38.673 [main] [30mTRACE[m  - #############################################

04:16:38.674 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:38.674 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:38.674 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:38.674 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:38.674 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:38.674 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:38.674 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:38.675 [main] [30mTRACE[m  - ###############################################
04:16:38.675 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:38.675 [main] [30mTRACE[m  - ###############################################
04:16:38.675 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:38.675 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.675 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.675 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.675 [main] [36mDEBUG[m  - Index de la lettre
04:16:38.675 [main] [30mTRACE[m  - #############################################
04:16:38.675 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:38.675 [main] [30mTRACE[m  - #############################################

04:16:38.675 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:38.675 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:38.675 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:38.676 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:38.676 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:38.676 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.676 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:38.676 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:38.676 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:38.676 [main] [30mTRACE[m  - ###############################################
04:16:38.676 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:38.676 [main] [30mTRACE[m  - ###############################################
04:16:38.676 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:38.676 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:38.676 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.676 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.676 [main] [36mDEBUG[m  - Index de la lettre
04:16:38.676 [main] [30mTRACE[m  - #############################################
04:16:38.676 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:38.676 [main] [30mTRACE[m  - #############################################

04:16:38.676 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:38.676 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:38.676 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:38.676 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:38.676 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:38.676 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:38.677 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.677 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
04:16:38.677 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:38.677 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:38.677 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:38.677 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:38.677 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:38.677 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
04:16:38.677 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:38.677 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
04:16:38.677 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:38.677 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:38.677 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
04:16:38.677 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:38.677 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:38.677 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:38.677 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 1]
04:16:38.677 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:38.677 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
04:16:38.677 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
04:16:38.678 [main] [30mTRACE[m  - ##################################################
04:16:38.678 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:38.678 [main] [30mTRACE[m  - ##################################################

04:16:38.678 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:39.494 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:39.494 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:39.494 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:39.494 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 9
04:16:39.494 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:39.699 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:39.699 [main] [30mTRACE[m  - ##############################################################
04:16:39.699 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:39.699 [main] [30mTRACE[m  - ##############################################################
04:16:39.700 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 1, 4]
04:16:39.700 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
04:16:39.700 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
04:16:39.700 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:39.700 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
04:16:39.700 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:39.700 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
04:16:39.700 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
04:16:39.700 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
04:16:39.700 [main] [30mTRACE[m  - ############################################################
04:16:39.700 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:39.700 [main] [30mTRACE[m  - ############################################################

04:16:39.700 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:39.700 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
04:16:39.700 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
04:16:39.700 [main] [30mTRACE[m  - ################################################
04:16:39.700 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
04:16:39.700 [main] [30mTRACE[m  - ################################################
04:16:39.700 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:39.700 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 1
04:16:39.700 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : A
04:16:39.700 [main] [30mTRACE[m  - ###############################################
04:16:39.700 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:39.700 [main] [30mTRACE[m  - ###############################################
04:16:39.701 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:39.701 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:39.701 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.701 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.701 [main] [36mDEBUG[m  - Index de la lettre
04:16:39.701 [main] [30mTRACE[m  - #############################################
04:16:39.701 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:39.701 [main] [30mTRACE[m  - #############################################

04:16:39.701 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 0
04:16:39.701 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
04:16:39.701 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
04:16:39.702 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:39.702 [main] [30mTRACE[m  - ##############################################
04:16:39.702 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
04:16:39.702 [main] [30mTRACE[m  - ##############################################
04:16:39.702 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
04:16:39.702 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:39.702 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.702 [main] [36mDEBUG[m  - (int) Nombre de tours : 5
04:16:39.702 [main] [30mTRACE[m  - ############################################
04:16:39.702 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
04:16:39.702 [main] [30mTRACE[m  - ############################################

04:16:39.702 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 5
04:16:39.702 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
04:16:39.702 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
04:16:39.702 [main] [30mTRACE[m  - ########################################################
04:16:39.702 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:39.702 [main] [30mTRACE[m  - ########################################################
04:16:39.702 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:39.702 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:39.702 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 1
04:16:39.702 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:39.702 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:39.702 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 2
04:16:39.702 [main] [30mTRACE[m  - ######################################################
04:16:39.702 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:39.702 [main] [30mTRACE[m  - ######################################################

04:16:39.702 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 2
04:16:39.702 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:39.702 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, F, F, F, F, E, B]
04:16:39.702 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, F, F, F, E, B]
04:16:39.702 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:39.702 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAFFFEB
04:16:39.702 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAFFFEB
04:16:39.903 [main] [30mTRACE[m  - ####################################################
04:16:39.903 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:39.903 [main] [30mTRACE[m  - ####################################################
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, F, F, F, E, B]
04:16:39.903 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:39.903 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:39.903 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:39.903 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:39.903 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:39.903 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:39.903 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:39.903 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.903 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:39.903 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:39.903 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:39.903 [main] [30mTRACE[m  - ###############################################
04:16:39.903 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:39.903 [main] [30mTRACE[m  - ###############################################
04:16:39.903 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:39.903 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:39.903 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.903 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.904 [main] [36mDEBUG[m  - Index de la lettre
04:16:39.904 [main] [30mTRACE[m  - #############################################
04:16:39.904 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:39.904 [main] [30mTRACE[m  - #############################################

04:16:39.904 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:39.904 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:39.904 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:39.904 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:39.904 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:39.904 [main] [30mTRACE[m  - ###############################################
04:16:39.904 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:39.904 [main] [30mTRACE[m  - ###############################################
04:16:39.904 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:39.904 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:39.904 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.904 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.904 [main] [36mDEBUG[m  - Index de la lettre
04:16:39.904 [main] [30mTRACE[m  - #############################################
04:16:39.904 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:39.904 [main] [30mTRACE[m  - #############################################

04:16:39.904 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:39.904 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:39.904 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:39.904 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.904 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:39.904 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:39.904 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:39.904 [main] [30mTRACE[m  - ###############################################
04:16:39.904 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:39.904 [main] [30mTRACE[m  - ###############################################
04:16:39.904 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:39.904 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:39.904 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.904 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.904 [main] [36mDEBUG[m  - Index de la lettre
04:16:39.904 [main] [30mTRACE[m  - #############################################
04:16:39.904 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:39.904 [main] [30mTRACE[m  - #############################################

04:16:39.904 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:39.904 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:39.904 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:39.904 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.904 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:39.904 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:39.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:39.905 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.905 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:39.905 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:39.905 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:39.905 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.905 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:39.905 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
04:16:39.905 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:39.906 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:39.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:39.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:39.906 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:39.906 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.906 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:39.906 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:39.906 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:39.906 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:39.906 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:39.906 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.906 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:39.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
04:16:39.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:39.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:39.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:39.907 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.907 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:39.907 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
04:16:39.907 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:39.907 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:39.907 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:39.907 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:39.908 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:39.908 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
04:16:39.908 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:39.908 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:39.908 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:39.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 1]
04:16:39.908 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:39.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
04:16:39.908 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
04:16:39.909 [main] [30mTRACE[m  - ##################################################
04:16:39.909 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:39.909 [main] [30mTRACE[m  - ##################################################

04:16:39.909 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:40.722 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:40.723 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:40.723 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:40.723 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 10
04:16:40.723 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:40.928 [main] [30mTRACE[m  - ##############################################################
04:16:40.928 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:40.928 [main] [30mTRACE[m  - ##############################################################
04:16:40.928 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
04:16:40.928 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
04:16:40.928 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
04:16:40.928 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:40.928 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:40.928 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:40.928 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:40.928 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:40.928 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:40.928 [main] [30mTRACE[m  - ############################################################
04:16:40.928 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:40.928 [main] [30mTRACE[m  - ############################################################

04:16:40.928 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:40.928 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:40.928 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:40.928 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:40.929 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:40.931 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
04:16:40.931 [main] [30mTRACE[m  - ########################################################
04:16:40.932 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:40.932 [main] [30mTRACE[m  - ########################################################
04:16:40.932 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:40.932 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:40.932 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
04:16:40.932 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:40.932 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:40.932 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
04:16:40.932 [main] [30mTRACE[m  - ######################################################
04:16:40.932 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:40.932 [main] [30mTRACE[m  - ######################################################

04:16:40.932 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
04:16:40.932 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:40.932 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, F, F, F, E, B]
04:16:40.932 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, F, F, E, B]
04:16:40.932 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:40.932 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAFFEB
04:16:40.932 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAFFEB
04:16:41.135 [main] [30mTRACE[m  - ####################################################
04:16:41.135 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:41.136 [main] [30mTRACE[m  - ####################################################
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, F, F, E, B]
04:16:41.136 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:41.136 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:41.136 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:41.136 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:41.136 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:41.136 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:41.136 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:41.136 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.136 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:41.136 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:41.136 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:41.136 [main] [30mTRACE[m  - ###############################################
04:16:41.136 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:41.136 [main] [30mTRACE[m  - ###############################################
04:16:41.136 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:41.136 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:41.136 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.136 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.136 [main] [36mDEBUG[m  - Index de la lettre
04:16:41.137 [main] [30mTRACE[m  - #############################################
04:16:41.137 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:41.137 [main] [30mTRACE[m  - #############################################

04:16:41.137 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:41.137 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:41.137 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:41.137 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:41.137 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:41.137 [main] [30mTRACE[m  - ###############################################
04:16:41.137 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:41.137 [main] [30mTRACE[m  - ###############################################
04:16:41.137 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:41.137 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:41.137 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.137 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.137 [main] [36mDEBUG[m  - Index de la lettre
04:16:41.137 [main] [30mTRACE[m  - #############################################
04:16:41.137 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:41.137 [main] [30mTRACE[m  - #############################################

04:16:41.137 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:41.137 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:41.137 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:41.137 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.137 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:41.137 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:41.137 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:41.137 [main] [30mTRACE[m  - ###############################################
04:16:41.137 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:41.137 [main] [30mTRACE[m  - ###############################################
04:16:41.137 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:41.137 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:41.137 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.137 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.137 [main] [36mDEBUG[m  - Index de la lettre
04:16:41.137 [main] [30mTRACE[m  - #############################################
04:16:41.137 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:41.137 [main] [30mTRACE[m  - #############################################

04:16:41.137 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:41.137 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:41.137 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:41.138 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:41.138 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.138 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:41.138 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:41.138 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:41.138 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.138 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:41.139 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:41.139 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:41.139 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.139 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:41.139 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
04:16:41.139 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:41.139 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:41.139 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:41.139 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:41.140 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:41.140 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.140 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:41.140 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:41.140 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:41.141 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:41.141 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:41.141 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.141 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:41.142 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
04:16:41.142 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:41.142 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:41.142 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:41.142 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.142 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:41.142 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
04:16:41.142 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:41.143 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:41.143 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:41.143 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:41.144 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:41.144 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
04:16:41.144 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:41.144 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:41.144 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:41.144 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 1]
04:16:41.144 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:41.144 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
04:16:41.144 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
04:16:41.144 [main] [30mTRACE[m  - ##################################################
04:16:41.144 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:41.144 [main] [30mTRACE[m  - ##################################################

04:16:41.144 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:41.963 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:41.963 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:41.963 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:41.963 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 11
04:16:41.963 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:42.167 [main] [30mTRACE[m  - ##############################################################
04:16:42.167 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:42.167 [main] [30mTRACE[m  - ##############################################################
04:16:42.167 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
04:16:42.167 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
04:16:42.167 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
04:16:42.167 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:42.167 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:42.167 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:42.167 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:42.167 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:42.168 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:42.168 [main] [30mTRACE[m  - ############################################################
04:16:42.168 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:42.168 [main] [30mTRACE[m  - ############################################################

04:16:42.168 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:42.168 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:42.168 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:42.168 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:42.168 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:42.170 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
04:16:42.170 [main] [30mTRACE[m  - ########################################################
04:16:42.170 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:42.170 [main] [30mTRACE[m  - ########################################################
04:16:42.170 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:42.171 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:42.171 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
04:16:42.171 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:42.171 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:42.171 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
04:16:42.171 [main] [30mTRACE[m  - ######################################################
04:16:42.171 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:42.171 [main] [30mTRACE[m  - ######################################################

04:16:42.171 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
04:16:42.171 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:42.171 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, F, F, E, B]
04:16:42.171 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, E, B]
04:16:42.171 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:42.171 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAFEB
04:16:42.171 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAAFEB
04:16:42.376 [main] [30mTRACE[m  - ####################################################
04:16:42.376 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:42.376 [main] [30mTRACE[m  - ####################################################
04:16:42.376 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:42.376 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:42.376 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:42.376 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, E, B]
04:16:42.377 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:42.377 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:42.377 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:42.377 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:42.378 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:42.378 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:42.378 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:42.378 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:42.378 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.379 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:42.379 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:42.379 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:42.379 [main] [30mTRACE[m  - ###############################################
04:16:42.380 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:42.380 [main] [30mTRACE[m  - ###############################################
04:16:42.380 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:42.380 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:42.380 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.380 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.380 [main] [36mDEBUG[m  - Index de la lettre
04:16:42.380 [main] [30mTRACE[m  - #############################################
04:16:42.380 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:42.380 [main] [30mTRACE[m  - #############################################

04:16:42.381 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:42.381 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:42.381 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:42.381 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:42.381 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:42.381 [main] [30mTRACE[m  - ###############################################
04:16:42.381 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:42.381 [main] [30mTRACE[m  - ###############################################
04:16:42.381 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:42.381 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.381 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.381 [main] [36mDEBUG[m  - Index de la lettre
04:16:42.381 [main] [30mTRACE[m  - #############################################
04:16:42.381 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:42.381 [main] [30mTRACE[m  - #############################################

04:16:42.381 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:42.381 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:42.381 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.381 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:42.381 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:42.381 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:42.381 [main] [30mTRACE[m  - ###############################################
04:16:42.381 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:42.381 [main] [30mTRACE[m  - ###############################################
04:16:42.381 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:42.381 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.381 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.381 [main] [36mDEBUG[m  - Index de la lettre
04:16:42.381 [main] [30mTRACE[m  - #############################################
04:16:42.381 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:42.381 [main] [30mTRACE[m  - #############################################

04:16:42.381 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, true]
04:16:42.381 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:42.381 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.381 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:42.381 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, true]
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.381 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:42.381 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:42.381 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
04:16:42.381 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.382 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
04:16:42.382 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:42.382 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
04:16:42.382 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:42.382 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, true]
04:16:42.382 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.382 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:42.382 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
04:16:42.382 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:42.382 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, true]
04:16:42.382 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.382 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:42.382 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
04:16:42.382 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:42.382 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
04:16:42.382 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.382 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:42.382 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
04:16:42.382 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
04:16:42.382 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:42.382 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:42.382 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
04:16:42.382 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
04:16:42.382 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
04:16:42.382 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:42.382 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
04:16:42.382 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 1, 1]
04:16:42.382 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
04:16:42.382 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
04:16:42.382 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
04:16:42.382 [main] [30mTRACE[m  - ##################################################
04:16:42.382 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:42.382 [main] [30mTRACE[m  - ##################################################

04:16:42.382 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:43.200 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:43.200 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:43.201 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:43.201 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 12
04:16:43.201 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:43.405 [main] [30mTRACE[m  - ##############################################################
04:16:43.405 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:43.405 [main] [30mTRACE[m  - ##############################################################
04:16:43.405 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
04:16:43.405 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
04:16:43.405 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
04:16:43.405 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:43.405 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:43.405 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:43.405 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:43.405 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:43.406 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:43.406 [main] [30mTRACE[m  - ############################################################
04:16:43.406 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:43.406 [main] [30mTRACE[m  - ############################################################

04:16:43.406 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:43.406 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:43.406 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
04:16:43.406 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
04:16:43.406 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
04:16:43.408 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
04:16:43.408 [main] [30mTRACE[m  - ########################################################
04:16:43.408 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
04:16:43.409 [main] [30mTRACE[m  - ########################################################
04:16:43.410 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
04:16:43.411 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:43.411 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
04:16:43.411 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:43.411 [main] [32mINFO [m  - FOR - Chaque unit√©s
04:16:43.411 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
04:16:43.411 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 6
04:16:43.411 [main] [30mTRACE[m  - ######################################################
04:16:43.411 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
04:16:43.411 [main] [30mTRACE[m  - ######################################################

04:16:43.411 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 6
04:16:43.411 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
04:16:43.411 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, E, B]
04:16:43.411 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, A, B]
04:16:43.411 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
04:16:43.411 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAFAB
04:16:43.411 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAAFAB
04:16:43.616 [main] [30mTRACE[m  - ####################################################
04:16:43.616 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:43.616 [main] [30mTRACE[m  - ####################################################
04:16:43.616 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:43.616 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:43.616 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:43.616 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, A, B]
04:16:43.617 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:43.617 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:43.617 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:43.617 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, false, false]
04:16:43.617 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:43.617 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:43.617 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:43.617 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:43.617 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.617 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:43.617 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:43.617 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:43.617 [main] [30mTRACE[m  - ###############################################
04:16:43.618 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:43.618 [main] [30mTRACE[m  - ###############################################
04:16:43.618 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:43.618 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:43.618 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.618 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.618 [main] [36mDEBUG[m  - Index de la lettre
04:16:43.618 [main] [30mTRACE[m  - #############################################
04:16:43.618 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:43.618 [main] [30mTRACE[m  - #############################################

04:16:43.618 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:43.618 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:43.618 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:43.618 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:43.618 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:43.619 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:43.619 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:43.619 [main] [30mTRACE[m  - ###############################################
04:16:43.619 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:43.619 [main] [30mTRACE[m  - ###############################################
04:16:43.619 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:43.619 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:43.619 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.619 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.619 [main] [36mDEBUG[m  - Index de la lettre
04:16:43.619 [main] [30mTRACE[m  - #############################################
04:16:43.619 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:43.619 [main] [30mTRACE[m  - #############################################

04:16:43.619 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:43.619 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:43.619 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:43.621 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:43.621 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:43.621 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.621 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:43.622 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:43.622 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
04:16:43.622 [main] [30mTRACE[m  - ###############################################
04:16:43.622 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:43.623 [main] [30mTRACE[m  - ###############################################
04:16:43.623 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:43.624 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:43.624 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.624 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.624 [main] [36mDEBUG[m  - Index de la lettre
04:16:43.624 [main] [30mTRACE[m  - #############################################
04:16:43.624 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:43.624 [main] [30mTRACE[m  - #############################################

04:16:43.624 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
04:16:43.624 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
04:16:43.624 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
04:16:43.624 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 0, 0, 0, 0, 1]
04:16:43.624 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:43.624 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:43.625 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:43.625 [main] [30mTRACE[m  - ###############################################
04:16:43.625 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:43.625 [main] [30mTRACE[m  - ###############################################
04:16:43.625 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:43.625 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:43.625 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.625 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:43.625 [main] [36mDEBUG[m  - Index de la lettre
04:16:43.625 [main] [30mTRACE[m  - #############################################
04:16:43.625 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:43.625 [main] [30mTRACE[m  - #############################################

04:16:43.625 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:43.625 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:43.625 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
04:16:43.626 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 1]
04:16:43.626 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:43.626 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.626 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:43.626 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:43.626 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
04:16:43.626 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.626 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:43.626 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
04:16:43.626 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:43.626 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:43.626 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:43.626 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.626 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:43.626 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
04:16:43.627 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:43.627 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:43.627 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:43.627 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.627 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:43.627 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
04:16:43.627 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:43.627 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:43.627 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:43.627 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:43.627 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:43.627 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 4]
04:16:43.627 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 0, 4]
04:16:43.627 [main] [30mTRACE[m  - ##################################################
04:16:43.627 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:43.627 [main] [30mTRACE[m  - ##################################################

04:16:43.627 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:44.441 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:44.441 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:44.441 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:44.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 13
04:16:44.441 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:44.645 [main] [30mTRACE[m  - ##############################################################
04:16:44.645 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:44.645 [main] [30mTRACE[m  - ##############################################################
04:16:44.645 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
04:16:44.645 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 0, 4]
04:16:44.645 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 0, 4]
04:16:44.645 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:44.645 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
04:16:44.645 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
04:16:44.645 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
04:16:44.645 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:44.646 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:44.646 [main] [30mTRACE[m  - ############################################################
04:16:44.646 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:44.646 [main] [30mTRACE[m  - ############################################################

04:16:44.646 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:44.646 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:44.646 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:44.646 [main] [30mTRACE[m  - ##############################################
04:16:44.646 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:44.646 [main] [30mTRACE[m  - ##############################################
04:16:44.646 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:44.646 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:44.646 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:44.646 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:44.646 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:44.646 [main] [30mTRACE[m  - ###############################################
04:16:44.646 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.646 [main] [30mTRACE[m  - ###############################################
04:16:44.646 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.646 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.647 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.647 [main] [30mTRACE[m  - #############################################
04:16:44.647 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.647 [main] [30mTRACE[m  - #############################################

04:16:44.647 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:44.647 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:44.647 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:44.647 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:44.647 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:44.647 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:44.647 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.647 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:44.647 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:44.647 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.648 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:44.648 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:44.648 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.648 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:44.648 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:44.648 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:44.648 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:44.648 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, true, true, false]
04:16:44.648 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:44.648 [main] [30mTRACE[m  - ############################################
04:16:44.649 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:44.649 [main] [30mTRACE[m  - ############################################

04:16:44.649 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:44.649 [main] [30mTRACE[m  - ##############################################
04:16:44.649 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
04:16:44.649 [main] [30mTRACE[m  - ##############################################

04:16:44.649 [main] [32mINFO [m  - Lancement diff√©rence positive
04:16:44.649 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
04:16:44.649 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
04:16:44.650 [main] [30mTRACE[m  - ##########################
04:16:44.650 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:44.650 [main] [30mTRACE[m  - ##########################

04:16:44.650 [main] [30mTRACE[m  - ############################
04:16:44.650 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:44.650 [main] [30mTRACE[m  - ############################
04:16:44.651 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:44.651 [main] [30mTRACE[m  - #####################################
04:16:44.651 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:44.651 [main] [30mTRACE[m  - #####################################
04:16:44.651 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:44.651 [main] [30mTRACE[m  - ###########################################################
04:16:44.651 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:44.651 [main] [30mTRACE[m  - ###########################################################
04:16:44.651 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:44.651 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:44.651 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, F, A, B]
04:16:44.651 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, true, true, false]
04:16:44.651 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:44.651 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:44.651 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:44.651 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:44.651 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:44.651 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:44.651 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
04:16:44.651 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
04:16:44.651 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:44.651 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:44.651 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:44.651 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:44.651 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:44.652 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
04:16:44.652 [main] [30mTRACE[m  - ###############################################
04:16:44.653 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.653 [main] [30mTRACE[m  - ###############################################
04:16:44.653 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.653 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.653 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.653 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.653 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.653 [main] [30mTRACE[m  - #############################################
04:16:44.653 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.653 [main] [30mTRACE[m  - #############################################

04:16:44.653 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:44.653 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:44.653 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:44.653 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:44.653 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:44.654 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:44.654 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:44.654 [main] [30mTRACE[m  - #########################################################
04:16:44.654 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:44.654 [main] [30mTRACE[m  - #########################################################

04:16:44.654 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:44.654 [main] [30mTRACE[m  - ###################################
04:16:44.654 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:44.654 [main] [30mTRACE[m  - ###################################

04:16:44.654 [main] [30mTRACE[m  - ###########################################################################################################
04:16:44.654 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:44.654 [main] [30mTRACE[m  - ###########################################################################################################
04:16:44.654 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:44.654 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:44.654 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:44.654 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  13
04:16:44.654 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, A, A, A, F, A, B]
04:16:44.654 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, A, A, A, F, A, B]
04:16:44.654 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 2, 3]
04:16:44.654 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 0, 4]
04:16:44.654 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:44.654 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:44.655 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, true, true, false]
04:16:44.656 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
04:16:44.657 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
04:16:44.657 [main] [36mDEBUG[m  - ch_NewLetter :                                B
04:16:44.657 [main] [30mTRACE[m  - ###########################################################################################################
04:16:44.657 [main] [30mTRACE[m  - ###########################################################################################################
04:16:44.657 [main] [30mTRACE[m  - ###########################################################################################################

04:16:44.657 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:44.657 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAFAB
04:16:44.657 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABAAAFAB
04:16:44.860 [main] [30mTRACE[m  - ####################################################
04:16:44.860 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:44.861 [main] [30mTRACE[m  - ####################################################
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, F, A, B]
04:16:44.861 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:44.861 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:44.861 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, true, true, false]
04:16:44.861 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:44.861 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:44.861 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:44.861 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:44.861 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.861 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:44.861 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:44.861 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:44.861 [main] [30mTRACE[m  - ###############################################
04:16:44.861 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.861 [main] [30mTRACE[m  - ###############################################
04:16:44.861 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.861 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.861 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.861 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.861 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.861 [main] [30mTRACE[m  - #############################################
04:16:44.861 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.861 [main] [30mTRACE[m  - #############################################

04:16:44.862 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:44.862 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:44.862 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:44.862 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:44.862 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:44.862 [main] [30mTRACE[m  - ###############################################
04:16:44.862 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.862 [main] [30mTRACE[m  - ###############################################
04:16:44.862 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.862 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.862 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.862 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.862 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.862 [main] [30mTRACE[m  - #############################################
04:16:44.862 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.862 [main] [30mTRACE[m  - #############################################

04:16:44.862 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, false, false]
04:16:44.862 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 1]
04:16:44.862 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:44.862 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:44.862 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:44.862 [main] [30mTRACE[m  - ###############################################
04:16:44.862 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.862 [main] [30mTRACE[m  - ###############################################
04:16:44.862 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.862 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.862 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.862 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.862 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.862 [main] [30mTRACE[m  - #############################################
04:16:44.862 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.862 [main] [30mTRACE[m  - #############################################

04:16:44.862 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
04:16:44.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
04:16:44.862 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 0, 0, 0, 0, 1]
04:16:44.863 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:44.863 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.863 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:44.863 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:44.863 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:44.863 [main] [30mTRACE[m  - ###############################################
04:16:44.863 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.863 [main] [30mTRACE[m  - ###############################################
04:16:44.863 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.863 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.863 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.863 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.863 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.863 [main] [30mTRACE[m  - #############################################
04:16:44.863 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.863 [main] [30mTRACE[m  - #############################################

04:16:44.863 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:44.863 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:44.863 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:44.863 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 1]
04:16:44.863 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:44.863 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:44.863 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:44.863 [main] [30mTRACE[m  - ###############################################
04:16:44.863 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:44.863 [main] [30mTRACE[m  - ###############################################
04:16:44.863 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:44.863 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:44.863 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.863 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:44.863 [main] [36mDEBUG[m  - Index de la lettre
04:16:44.863 [main] [30mTRACE[m  - #############################################
04:16:44.863 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:44.863 [main] [30mTRACE[m  - #############################################

04:16:44.864 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:44.864 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
04:16:44.864 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
04:16:44.865 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 1]
04:16:44.865 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:44.865 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.865 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:44.865 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:44.865 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:44.865 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.865 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:44.865 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
04:16:44.865 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:44.865 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:44.865 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:44.865 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.865 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:44.865 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
04:16:44.865 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:44.865 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:44.865 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:44.865 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:44.865 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:44.865 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
04:16:44.865 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
04:16:44.865 [main] [30mTRACE[m  - ##################################################
04:16:44.865 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:44.865 [main] [30mTRACE[m  - ##################################################

04:16:44.865 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:45.680 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:45.681 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:45.681 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:45.681 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 14
04:16:45.681 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:45.881 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:45.881 [main] [30mTRACE[m  - ##############################################################
04:16:45.881 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:45.881 [main] [30mTRACE[m  - ##############################################################
04:16:45.882 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 0, 4]
04:16:45.882 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
04:16:45.882 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
04:16:45.882 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:45.882 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:45.882 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:45.882 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
04:16:45.882 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:45.882 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:45.882 [main] [30mTRACE[m  - ############################################################
04:16:45.882 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:45.882 [main] [30mTRACE[m  - ############################################################

04:16:45.882 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:45.882 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:45.882 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:45.882 [main] [30mTRACE[m  - ##############################################
04:16:45.882 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:45.882 [main] [30mTRACE[m  - ##############################################
04:16:45.882 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:45.882 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:45.882 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:45.882 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:45.883 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:45.883 [main] [30mTRACE[m  - ###############################################
04:16:45.883 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:45.883 [main] [30mTRACE[m  - ###############################################
04:16:45.883 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:45.883 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:45.883 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.883 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.883 [main] [36mDEBUG[m  - Index de la lettre
04:16:45.883 [main] [30mTRACE[m  - #############################################
04:16:45.883 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:45.883 [main] [30mTRACE[m  - #############################################

04:16:45.883 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:45.883 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.883 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:45.883 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:45.883 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.883 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:45.883 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.883 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:45.883 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:45.883 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.884 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:45.884 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:45.884 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.884 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:45.884 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:45.884 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.884 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:45.884 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:45.884 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:45.884 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:45.884 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, true, true, false]
04:16:45.884 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:45.884 [main] [30mTRACE[m  - ############################################
04:16:45.884 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:45.884 [main] [30mTRACE[m  - ############################################

04:16:45.884 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:45.884 [main] [30mTRACE[m  - ##########################
04:16:45.884 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:45.884 [main] [30mTRACE[m  - ##########################

04:16:45.884 [main] [30mTRACE[m  - ############################
04:16:45.884 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:45.884 [main] [30mTRACE[m  - ############################
04:16:45.884 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:45.884 [main] [30mTRACE[m  - #####################################
04:16:45.884 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:45.884 [main] [30mTRACE[m  - #####################################
04:16:45.884 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:45.884 [main] [30mTRACE[m  - ###########################################################
04:16:45.885 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:45.885 [main] [30mTRACE[m  - ###########################################################
04:16:45.885 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:45.885 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:45.885 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, F, A, B]
04:16:45.885 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, true, true, false]
04:16:45.885 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:45.885 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:45.885 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:45.885 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:45.885 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:45.885 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:45.885 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:45.885 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
04:16:45.885 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
04:16:45.885 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:45.885 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:45.885 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:45.885 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:45.885 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:45.885 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
04:16:45.885 [main] [30mTRACE[m  - ###############################################
04:16:45.885 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:45.885 [main] [30mTRACE[m  - ###############################################
04:16:45.885 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:45.885 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:45.885 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.885 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:45.885 [main] [36mDEBUG[m  - Index de la lettre
04:16:45.885 [main] [30mTRACE[m  - #############################################
04:16:45.885 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:45.885 [main] [30mTRACE[m  - #############################################

04:16:45.886 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:45.886 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:45.886 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:45.886 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:45.886 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:45.886 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:45.886 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:45.886 [main] [30mTRACE[m  - #########################################################
04:16:45.886 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:45.886 [main] [30mTRACE[m  - #########################################################

04:16:45.886 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:45.886 [main] [30mTRACE[m  - ###################################
04:16:45.886 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:45.886 [main] [30mTRACE[m  - ###################################

04:16:45.886 [main] [30mTRACE[m  - ###########################################################################################################
04:16:45.886 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:45.886 [main] [30mTRACE[m  - ###########################################################################################################
04:16:45.886 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:45.886 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:45.886 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:45.886 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  14
04:16:45.886 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, B, A, A, F, A, B]
04:16:45.886 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, B, A, A, F, A, B]
04:16:45.886 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 0, 4]
04:16:45.886 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
04:16:45.886 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:45.886 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:45.891 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, true, true, false]
04:16:45.891 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
04:16:45.891 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
04:16:45.891 [main] [36mDEBUG[m  - ch_NewLetter :                                B
04:16:45.891 [main] [30mTRACE[m  - ###########################################################################################################
04:16:45.891 [main] [30mTRACE[m  - ###########################################################################################################
04:16:45.891 [main] [30mTRACE[m  - ###########################################################################################################

04:16:45.892 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:45.892 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBAAFAB
04:16:45.892 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABBAAFAB
04:16:46.094 [main] [30mTRACE[m  - ####################################################
04:16:46.094 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:46.094 [main] [30mTRACE[m  - ####################################################
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, A, A, F, A, B]
04:16:46.095 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:46.095 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:46.095 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, true, true, false]
04:16:46.095 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:46.095 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:46.095 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:46.095 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:46.095 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.095 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:46.095 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:46.095 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:46.095 [main] [30mTRACE[m  - ###############################################
04:16:46.095 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:46.095 [main] [30mTRACE[m  - ###############################################
04:16:46.095 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:46.095 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.095 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.095 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.095 [main] [36mDEBUG[m  - Index de la lettre
04:16:46.095 [main] [30mTRACE[m  - #############################################
04:16:46.095 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:46.095 [main] [30mTRACE[m  - #############################################

04:16:46.095 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:46.096 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:46.096 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:46.096 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:46.096 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:46.096 [main] [30mTRACE[m  - ###############################################
04:16:46.096 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:46.096 [main] [30mTRACE[m  - ###############################################
04:16:46.096 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:46.096 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.096 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.096 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.096 [main] [36mDEBUG[m  - Index de la lettre
04:16:46.096 [main] [30mTRACE[m  - #############################################
04:16:46.096 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:46.096 [main] [30mTRACE[m  - #############################################

04:16:46.096 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:46.096 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:46.096 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:46.096 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:46.096 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:46.096 [main] [30mTRACE[m  - ###############################################
04:16:46.096 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:46.096 [main] [30mTRACE[m  - ###############################################
04:16:46.096 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:46.096 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.096 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.096 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.096 [main] [36mDEBUG[m  - Index de la lettre
04:16:46.096 [main] [30mTRACE[m  - #############################################
04:16:46.096 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:46.096 [main] [30mTRACE[m  - #############################################

04:16:46.096 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
04:16:46.096 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
04:16:46.097 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:46.097 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:46.097 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:46.097 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:46.097 [main] [30mTRACE[m  - ###############################################
04:16:46.097 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:46.097 [main] [30mTRACE[m  - ###############################################
04:16:46.097 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:46.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.097 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.097 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.097 [main] [36mDEBUG[m  - Index de la lettre
04:16:46.097 [main] [30mTRACE[m  - #############################################
04:16:46.097 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:46.097 [main] [30mTRACE[m  - #############################################

04:16:46.097 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:46.097 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:46.097 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:46.097 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 1]
04:16:46.097 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:46.097 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.097 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:46.097 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:46.097 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:46.097 [main] [30mTRACE[m  - ###############################################
04:16:46.097 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:46.097 [main] [30mTRACE[m  - ###############################################
04:16:46.097 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:46.097 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:46.097 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.097 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:46.097 [main] [36mDEBUG[m  - Index de la lettre
04:16:46.097 [main] [30mTRACE[m  - #############################################
04:16:46.098 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:46.098 [main] [30mTRACE[m  - #############################################

04:16:46.098 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:46.098 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
04:16:46.098 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
04:16:46.098 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 1]
04:16:46.098 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:46.098 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.098 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:46.098 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:46.098 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:46.098 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.098 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:46.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
04:16:46.098 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:46.098 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:46.098 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:46.098 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.098 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:46.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
04:16:46.098 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:46.098 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:46.098 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:46.098 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:46.098 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:46.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
04:16:46.098 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
04:16:46.098 [main] [30mTRACE[m  - ##################################################
04:16:46.098 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:46.098 [main] [30mTRACE[m  - ##################################################

04:16:46.098 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:46.910 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:46.910 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:46.910 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:46.910 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 15
04:16:46.910 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:47.115 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:47.115 [main] [30mTRACE[m  - ##############################################################
04:16:47.115 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:47.115 [main] [30mTRACE[m  - ##############################################################
04:16:47.115 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
04:16:47.116 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
04:16:47.116 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
04:16:47.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:47.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:47.116 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:47.116 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:47.116 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:47.116 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:47.116 [main] [30mTRACE[m  - ############################################################
04:16:47.116 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:47.116 [main] [30mTRACE[m  - ############################################################

04:16:47.116 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:47.116 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:47.116 [main] [30mTRACE[m  - ##########################
04:16:47.116 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:47.116 [main] [30mTRACE[m  - ##########################

04:16:47.116 [main] [30mTRACE[m  - ############################
04:16:47.116 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:47.116 [main] [30mTRACE[m  - ############################
04:16:47.116 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:47.116 [main] [30mTRACE[m  - #####################################
04:16:47.116 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:47.116 [main] [30mTRACE[m  - #####################################
04:16:47.116 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:47.117 [main] [30mTRACE[m  - ###########################################################
04:16:47.117 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:47.117 [main] [30mTRACE[m  - ###########################################################
04:16:47.117 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:47.117 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:47.117 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, A, A, F, A, B]
04:16:47.117 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, true, true, false]
04:16:47.117 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:47.117 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:47.117 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:47.117 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:47.117 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:47.117 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:47.117 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:47.117 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
04:16:47.117 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
04:16:47.117 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:47.117 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:47.117 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:47.117 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:47.117 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:47.117 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:47.117 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
04:16:47.117 [main] [30mTRACE[m  - ###############################################
04:16:47.118 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.118 [main] [30mTRACE[m  - ###############################################
04:16:47.118 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.118 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.118 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.118 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.118 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.118 [main] [30mTRACE[m  - #############################################
04:16:47.118 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.118 [main] [30mTRACE[m  - #############################################

04:16:47.118 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:47.118 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:47.118 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:47.118 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:47.118 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:47.118 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:47.118 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:47.118 [main] [30mTRACE[m  - #########################################################
04:16:47.118 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:47.118 [main] [30mTRACE[m  - #########################################################

04:16:47.118 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:47.118 [main] [30mTRACE[m  - ###################################
04:16:47.118 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:47.118 [main] [30mTRACE[m  - ###################################

04:16:47.118 [main] [30mTRACE[m  - ###########################################################################################################
04:16:47.118 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:47.119 [main] [30mTRACE[m  - ###########################################################################################################
04:16:47.119 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:47.119 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:47.119 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:47.119 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  15
04:16:47.119 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, A, A, F, A, B]
04:16:47.119 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, A, A, F, A, B]
04:16:47.119 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
04:16:47.119 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
04:16:47.119 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:47.119 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:47.121 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, true, true, false]
04:16:47.121 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
04:16:47.121 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
04:16:47.121 [main] [36mDEBUG[m  - ch_NewLetter :                                C
04:16:47.121 [main] [30mTRACE[m  - ###########################################################################################################
04:16:47.121 [main] [30mTRACE[m  - ###########################################################################################################
04:16:47.121 [main] [30mTRACE[m  - ###########################################################################################################

04:16:47.121 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:47.121 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCAAFAB
04:16:47.121 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCAAFAB
04:16:47.326 [main] [30mTRACE[m  - ####################################################
04:16:47.326 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:47.326 [main] [30mTRACE[m  - ####################################################
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, A, A, F, A, B]
04:16:47.326 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:47.326 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:47.326 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, true, true, false]
04:16:47.326 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:47.326 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:47.326 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:47.326 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:47.326 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:47.326 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:47.326 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:47.326 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:47.326 [main] [30mTRACE[m  - ###############################################
04:16:47.326 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.326 [main] [30mTRACE[m  - ###############################################
04:16:47.326 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.326 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.326 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.326 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.326 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.326 [main] [30mTRACE[m  - #############################################
04:16:47.327 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.327 [main] [30mTRACE[m  - #############################################

04:16:47.327 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:47.327 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:47.327 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:47.327 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:47.327 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:47.327 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:47.327 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:47.327 [main] [30mTRACE[m  - ###############################################
04:16:47.327 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.327 [main] [30mTRACE[m  - ###############################################
04:16:47.327 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.327 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.327 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.327 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.327 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.327 [main] [30mTRACE[m  - #############################################
04:16:47.327 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.327 [main] [30mTRACE[m  - #############################################

04:16:47.327 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:47.327 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:47.328 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:47.328 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:47.328 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:47.328 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:47.328 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:47.328 [main] [30mTRACE[m  - ###############################################
04:16:47.328 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.328 [main] [30mTRACE[m  - ###############################################
04:16:47.328 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.328 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.328 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.328 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.328 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.328 [main] [30mTRACE[m  - #############################################
04:16:47.328 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.328 [main] [30mTRACE[m  - #############################################

04:16:47.328 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:47.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
04:16:47.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, false, false]
04:16:47.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 1]
04:16:47.329 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:47.329 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:47.329 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:47.329 [main] [30mTRACE[m  - ###############################################
04:16:47.329 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.329 [main] [30mTRACE[m  - ###############################################
04:16:47.329 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.329 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.329 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.329 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.329 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.329 [main] [30mTRACE[m  - #############################################
04:16:47.329 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.329 [main] [30mTRACE[m  - #############################################

04:16:47.329 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:47.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:47.329 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
04:16:47.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 1]
04:16:47.329 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:47.329 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:47.329 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:47.329 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:47.329 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
04:16:47.330 [main] [30mTRACE[m  - ###############################################
04:16:47.330 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.330 [main] [30mTRACE[m  - ###############################################
04:16:47.330 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.331 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.331 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.331 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.331 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.331 [main] [30mTRACE[m  - #############################################
04:16:47.331 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.331 [main] [30mTRACE[m  - #############################################

04:16:47.331 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
04:16:47.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:47.331 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:47.332 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 1]
04:16:47.332 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:47.332 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:47.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:47.332 [main] [30mTRACE[m  - ###############################################
04:16:47.332 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:47.332 [main] [30mTRACE[m  - ###############################################
04:16:47.332 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:47.332 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:47.332 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.332 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:47.332 [main] [36mDEBUG[m  - Index de la lettre
04:16:47.332 [main] [30mTRACE[m  - #############################################
04:16:47.332 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:47.332 [main] [30mTRACE[m  - #############################################

04:16:47.332 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:47.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:47.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:47.332 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 1]
04:16:47.332 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:47.332 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:47.332 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:47.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:47.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:47.332 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:47.332 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:47.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
04:16:47.332 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:47.332 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:47.332 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:47.332 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:47.332 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:47.332 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
04:16:47.332 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
04:16:47.332 [main] [30mTRACE[m  - ##################################################
04:16:47.332 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:47.332 [main] [30mTRACE[m  - ##################################################

04:16:47.332 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:48.147 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:48.147 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:48.147 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:48.147 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 16
04:16:48.147 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:48.351 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:48.351 [main] [30mTRACE[m  - ##############################################################
04:16:48.351 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:48.351 [main] [30mTRACE[m  - ##############################################################
04:16:48.351 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
04:16:48.351 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
04:16:48.352 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
04:16:48.352 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:48.352 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:48.352 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:48.352 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
04:16:48.352 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:48.352 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:48.352 [main] [30mTRACE[m  - ############################################################
04:16:48.352 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:48.352 [main] [30mTRACE[m  - ############################################################

04:16:48.352 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:48.352 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:48.352 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:48.352 [main] [30mTRACE[m  - ##############################################
04:16:48.352 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:48.352 [main] [30mTRACE[m  - ##############################################
04:16:48.352 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:48.352 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:48.352 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:48.352 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:48.352 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:48.352 [main] [30mTRACE[m  - ###############################################
04:16:48.352 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.352 [main] [30mTRACE[m  - ###############################################
04:16:48.352 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.352 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.352 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.352 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.352 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.352 [main] [30mTRACE[m  - #############################################
04:16:48.352 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.352 [main] [30mTRACE[m  - #############################################

04:16:48.352 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:48.352 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.352 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:48.352 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:48.352 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.352 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:48.352 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.353 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.353 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:48.353 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.353 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:48.353 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.353 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:48.353 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:48.353 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:48.353 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:48.353 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, true, true, false]
04:16:48.353 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:48.353 [main] [30mTRACE[m  - ############################################
04:16:48.353 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:48.353 [main] [30mTRACE[m  - ############################################

04:16:48.353 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:48.353 [main] [30mTRACE[m  - ##########################
04:16:48.353 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:48.353 [main] [30mTRACE[m  - ##########################

04:16:48.353 [main] [30mTRACE[m  - ############################
04:16:48.353 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:48.353 [main] [30mTRACE[m  - ############################
04:16:48.353 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:48.353 [main] [30mTRACE[m  - #####################################
04:16:48.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:48.353 [main] [30mTRACE[m  - #####################################
04:16:48.353 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:48.353 [main] [30mTRACE[m  - ###########################################################
04:16:48.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:48.353 [main] [30mTRACE[m  - ###########################################################
04:16:48.353 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:48.353 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:48.353 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, A, A, F, A, B]
04:16:48.353 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, true, true, false]
04:16:48.353 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:48.353 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:48.353 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:48.353 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:48.354 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:48.354 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
04:16:48.354 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
04:16:48.354 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:48.354 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:48.354 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:48.354 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:48.354 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:48.354 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
04:16:48.354 [main] [30mTRACE[m  - ###############################################
04:16:48.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.354 [main] [30mTRACE[m  - ###############################################
04:16:48.354 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.354 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.354 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.354 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.354 [main] [30mTRACE[m  - #############################################
04:16:48.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.354 [main] [30mTRACE[m  - #############################################

04:16:48.354 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:48.354 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:48.354 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:48.354 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:48.354 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:48.354 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:48.354 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:48.354 [main] [30mTRACE[m  - #########################################################
04:16:48.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:48.354 [main] [30mTRACE[m  - #########################################################

04:16:48.354 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:48.354 [main] [30mTRACE[m  - ###################################
04:16:48.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:48.354 [main] [30mTRACE[m  - ###################################

04:16:48.354 [main] [30mTRACE[m  - ###########################################################################################################
04:16:48.354 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:48.354 [main] [30mTRACE[m  - ###########################################################################################################
04:16:48.354 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:48.354 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:48.354 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:48.354 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  16
04:16:48.354 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, B, A, F, A, B]
04:16:48.354 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, B, A, F, A, B]
04:16:48.354 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
04:16:48.354 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
04:16:48.354 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:48.354 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:48.355 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, true, true, false]
04:16:48.355 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
04:16:48.355 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
04:16:48.356 [main] [36mDEBUG[m  - ch_NewLetter :                                B
04:16:48.356 [main] [30mTRACE[m  - ###########################################################################################################
04:16:48.356 [main] [30mTRACE[m  - ###########################################################################################################
04:16:48.356 [main] [30mTRACE[m  - ###########################################################################################################

04:16:48.356 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:48.356 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCBAFAB
04:16:48.356 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCBAFAB
04:16:48.561 [main] [30mTRACE[m  - ####################################################
04:16:48.561 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:48.561 [main] [30mTRACE[m  - ####################################################
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, B, A, F, A, B]
04:16:48.562 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:48.562 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:48.562 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, true, true, false]
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:48.562 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:48.562 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:48.562 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:48.562 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:48.562 [main] [30mTRACE[m  - ###############################################
04:16:48.562 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.562 [main] [30mTRACE[m  - ###############################################
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.562 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.562 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.562 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.562 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.562 [main] [30mTRACE[m  - #############################################
04:16:48.562 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.562 [main] [30mTRACE[m  - #############################################

04:16:48.562 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:48.562 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:48.562 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:48.562 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:48.562 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:48.562 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:48.562 [main] [30mTRACE[m  - ###############################################
04:16:48.562 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.562 [main] [30mTRACE[m  - ###############################################
04:16:48.562 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.563 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.563 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.563 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.563 [main] [30mTRACE[m  - #############################################
04:16:48.563 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.563 [main] [30mTRACE[m  - #############################################

04:16:48.563 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:48.563 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:48.563 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:48.563 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:48.563 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:48.563 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:48.563 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:48.563 [main] [30mTRACE[m  - ###############################################
04:16:48.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.563 [main] [30mTRACE[m  - ###############################################
04:16:48.563 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.563 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.563 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.563 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.563 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.563 [main] [30mTRACE[m  - #############################################
04:16:48.563 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.563 [main] [30mTRACE[m  - #############################################

04:16:48.563 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:48.563 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:48.563 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:48.563 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:48.563 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:48.563 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:48.563 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:48.563 [main] [30mTRACE[m  - ###############################################
04:16:48.563 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.563 [main] [30mTRACE[m  - ###############################################
04:16:48.563 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.564 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.564 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.564 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.564 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.564 [main] [30mTRACE[m  - #############################################
04:16:48.564 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.564 [main] [30mTRACE[m  - #############################################

04:16:48.564 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:48.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:48.564 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:48.564 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 1]
04:16:48.564 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:48.564 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:48.564 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:48.564 [main] [30mTRACE[m  - ###############################################
04:16:48.564 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.565 [main] [30mTRACE[m  - ###############################################
04:16:48.565 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.565 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.565 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.565 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.565 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.565 [main] [30mTRACE[m  - #############################################
04:16:48.565 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.565 [main] [30mTRACE[m  - #############################################

04:16:48.565 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:48.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:48.565 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:48.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 1]
04:16:48.566 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:48.566 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:48.566 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:48.566 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:48.566 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:48.566 [main] [30mTRACE[m  - ###############################################
04:16:48.566 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:48.566 [main] [30mTRACE[m  - ###############################################
04:16:48.566 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:48.566 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:48.566 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.566 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:48.566 [main] [36mDEBUG[m  - Index de la lettre
04:16:48.566 [main] [30mTRACE[m  - #############################################
04:16:48.566 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:48.566 [main] [30mTRACE[m  - #############################################

04:16:48.566 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:48.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:48.567 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:48.567 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 1]
04:16:48.567 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:48.567 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:48.567 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:48.567 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:48.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:48.568 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:48.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:48.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
04:16:48.568 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:48.568 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:48.568 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:48.568 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:48.568 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:48.568 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
04:16:48.568 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
04:16:48.568 [main] [30mTRACE[m  - ##################################################
04:16:48.568 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:48.568 [main] [30mTRACE[m  - ##################################################

04:16:48.568 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:49.384 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:49.384 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:49.384 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:49.384 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 17
04:16:49.384 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:49.589 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:49.589 [main] [30mTRACE[m  - ##############################################################
04:16:49.589 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:49.590 [main] [30mTRACE[m  - ##############################################################
04:16:49.590 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
04:16:49.590 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
04:16:49.590 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
04:16:49.590 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:49.590 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:49.590 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:49.590 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:49.590 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:49.590 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:49.590 [main] [30mTRACE[m  - ############################################################
04:16:49.590 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:49.590 [main] [30mTRACE[m  - ############################################################

04:16:49.590 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:49.590 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:49.591 [main] [30mTRACE[m  - ##########################
04:16:49.591 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:49.591 [main] [30mTRACE[m  - ##########################

04:16:49.591 [main] [30mTRACE[m  - ############################
04:16:49.591 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:49.591 [main] [30mTRACE[m  - ############################
04:16:49.591 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:49.591 [main] [30mTRACE[m  - #####################################
04:16:49.591 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:49.591 [main] [30mTRACE[m  - #####################################
04:16:49.591 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:49.591 [main] [30mTRACE[m  - ###########################################################
04:16:49.591 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:49.591 [main] [30mTRACE[m  - ###########################################################
04:16:49.591 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:49.591 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:49.591 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, B, A, F, A, B]
04:16:49.591 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, true, true, false]
04:16:49.591 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:49.591 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:49.591 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:49.591 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:49.591 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:49.591 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:49.591 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:49.591 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:49.591 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
04:16:49.591 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
04:16:49.591 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:49.591 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:49.591 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:49.591 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:49.591 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:49.591 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:49.592 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
04:16:49.592 [main] [30mTRACE[m  - ###############################################
04:16:49.592 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.592 [main] [30mTRACE[m  - ###############################################
04:16:49.592 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.592 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.592 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.592 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.592 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.592 [main] [30mTRACE[m  - #############################################
04:16:49.592 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.592 [main] [30mTRACE[m  - #############################################

04:16:49.592 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:49.592 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:49.592 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:49.592 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:49.592 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:49.592 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:49.592 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:49.592 [main] [30mTRACE[m  - #########################################################
04:16:49.592 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:49.592 [main] [30mTRACE[m  - #########################################################

04:16:49.592 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:49.592 [main] [30mTRACE[m  - ###################################
04:16:49.592 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:49.592 [main] [30mTRACE[m  - ###################################

04:16:49.592 [main] [30mTRACE[m  - ###########################################################################################################
04:16:49.592 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:49.592 [main] [30mTRACE[m  - ###########################################################################################################
04:16:49.592 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:49.592 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:49.592 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:49.592 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  17
04:16:49.592 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, C, A, F, A, B]
04:16:49.592 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, C, A, F, A, B]
04:16:49.592 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
04:16:49.592 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
04:16:49.592 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:49.592 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:49.594 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, true, true, false]
04:16:49.594 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
04:16:49.594 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
04:16:49.594 [main] [36mDEBUG[m  - ch_NewLetter :                                C
04:16:49.594 [main] [30mTRACE[m  - ###########################################################################################################
04:16:49.594 [main] [30mTRACE[m  - ###########################################################################################################
04:16:49.594 [main] [30mTRACE[m  - ###########################################################################################################

04:16:49.594 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:49.594 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCCAFAB
04:16:49.594 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCCAFAB
04:16:49.798 [main] [30mTRACE[m  - ####################################################
04:16:49.798 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:49.799 [main] [30mTRACE[m  - ####################################################
04:16:49.799 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.799 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:49.799 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:49.799 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, C, A, F, A, B]
04:16:49.799 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:49.799 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:49.799 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:49.799 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, true, true, false]
04:16:49.800 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:49.800 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:49.800 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:49.800 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:49.800 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:49.800 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:49.801 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.801 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.801 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.801 [main] [30mTRACE[m  - #############################################
04:16:49.801 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - #############################################

04:16:49.801 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:49.801 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:49.801 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:49.801 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:49.801 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:49.801 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.801 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.801 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.801 [main] [30mTRACE[m  - #############################################
04:16:49.801 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - #############################################

04:16:49.801 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:49.801 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:49.801 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:49.801 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:49.801 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:49.801 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - ###############################################
04:16:49.801 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.801 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.801 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.801 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.801 [main] [30mTRACE[m  - #############################################
04:16:49.801 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.801 [main] [30mTRACE[m  - #############################################

04:16:49.801 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:49.802 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.802 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.802 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.802 [main] [30mTRACE[m  - #############################################
04:16:49.802 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - #############################################

04:16:49.802 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 1]
04:16:49.802 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.802 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.802 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.802 [main] [30mTRACE[m  - #############################################
04:16:49.802 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - #############################################

04:16:49.802 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:49.802 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 1]
04:16:49.802 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:49.802 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:49.802 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:49.802 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - ###############################################
04:16:49.802 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:49.802 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:49.802 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:49.802 [main] [36mDEBUG[m  - Index de la lettre
04:16:49.802 [main] [30mTRACE[m  - #############################################
04:16:49.802 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:49.802 [main] [30mTRACE[m  - #############################################

04:16:49.802 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:49.803 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:49.803 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, true]
04:16:49.803 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 1]
04:16:49.803 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:49.803 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:49.803 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:49.803 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:49.803 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:49.803 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:49.803 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:49.803 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
04:16:49.803 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:49.803 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:49.803 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:49.803 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:49.803 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:49.803 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
04:16:49.803 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
04:16:49.803 [main] [30mTRACE[m  - ##################################################
04:16:49.803 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:49.803 [main] [30mTRACE[m  - ##################################################

04:16:49.803 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:50.617 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:50.617 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:50.617 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:50.617 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 18
04:16:50.617 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:50.820 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:50.821 [main] [30mTRACE[m  - ##############################################################
04:16:50.821 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:50.821 [main] [30mTRACE[m  - ##############################################################
04:16:50.821 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
04:16:50.821 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
04:16:50.821 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
04:16:50.821 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:50.821 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:50.821 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:50.821 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:50.821 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:50.821 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:50.821 [main] [30mTRACE[m  - ############################################################
04:16:50.821 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:50.821 [main] [30mTRACE[m  - ############################################################

04:16:50.821 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:50.821 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:50.821 [main] [30mTRACE[m  - ##########################
04:16:50.821 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:50.821 [main] [30mTRACE[m  - ##########################

04:16:50.821 [main] [30mTRACE[m  - ############################
04:16:50.821 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:50.821 [main] [30mTRACE[m  - ############################
04:16:50.821 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:50.821 [main] [30mTRACE[m  - #####################################
04:16:50.821 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:50.821 [main] [30mTRACE[m  - #####################################
04:16:50.821 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:50.822 [main] [30mTRACE[m  - ###########################################################
04:16:50.822 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:50.822 [main] [30mTRACE[m  - ###########################################################
04:16:50.822 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:50.822 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:50.822 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, C, A, F, A, B]
04:16:50.822 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, true, true, false]
04:16:50.822 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:50.822 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:50.822 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:50.822 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:50.822 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:50.822 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:50.822 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:50.822 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:50.822 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
04:16:50.822 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
04:16:50.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:50.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:50.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:50.822 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:50.822 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:50.822 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:50.822 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:50.822 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
04:16:50.822 [main] [30mTRACE[m  - ###############################################
04:16:50.822 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:50.822 [main] [30mTRACE[m  - ###############################################
04:16:50.822 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:50.822 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:50.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:50.822 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:50.822 [main] [36mDEBUG[m  - Index de la lettre
04:16:50.823 [main] [30mTRACE[m  - #############################################
04:16:50.823 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:50.823 [main] [30mTRACE[m  - #############################################

04:16:50.823 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:50.823 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:50.823 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:50.823 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:50.823 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:50.823 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:50.823 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:50.823 [main] [30mTRACE[m  - #########################################################
04:16:50.823 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:50.823 [main] [30mTRACE[m  - #########################################################

04:16:50.823 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:50.823 [main] [30mTRACE[m  - ###################################
04:16:50.823 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:50.823 [main] [30mTRACE[m  - ###################################

04:16:50.823 [main] [30mTRACE[m  - ###########################################################################################################
04:16:50.823 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:50.823 [main] [30mTRACE[m  - ###########################################################################################################
04:16:50.823 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:50.823 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:50.823 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:50.823 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  18
04:16:50.823 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, A, F, A, B]
04:16:50.823 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, A, F, A, B]
04:16:50.823 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
04:16:50.823 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
04:16:50.823 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:50.823 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:50.825 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, true, true, false]
04:16:50.825 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
04:16:50.825 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
04:16:50.825 [main] [36mDEBUG[m  - ch_NewLetter :                                D
04:16:50.825 [main] [30mTRACE[m  - ###########################################################################################################
04:16:50.825 [main] [30mTRACE[m  - ###########################################################################################################
04:16:50.825 [main] [30mTRACE[m  - ###########################################################################################################

04:16:50.825 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:50.825 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDAFAB
04:16:50.825 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDAFAB
04:16:51.031 [main] [30mTRACE[m  - ####################################################
04:16:51.031 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:51.031 [main] [30mTRACE[m  - ####################################################
04:16:51.032 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.032 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:51.032 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:51.032 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, A, F, A, B]
04:16:51.032 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:51.032 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:51.032 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:51.032 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, true, true, false]
04:16:51.032 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:51.032 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:51.033 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:51.033 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:51.033 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:51.033 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:51.033 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:51.033 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:51.033 [main] [30mTRACE[m  - ###############################################
04:16:51.033 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.033 [main] [30mTRACE[m  - ###############################################
04:16:51.033 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.033 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.033 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.033 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.033 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.033 [main] [30mTRACE[m  - #############################################
04:16:51.033 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.033 [main] [30mTRACE[m  - #############################################

04:16:51.033 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:51.033 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:51.033 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:51.033 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:51.033 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:51.033 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:51.033 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.034 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.034 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.034 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.034 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.034 [main] [30mTRACE[m  - #############################################
04:16:51.034 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.034 [main] [30mTRACE[m  - #############################################

04:16:51.034 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:51.034 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:51.034 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:51.034 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:51.034 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:51.034 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:51.034 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.034 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.034 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.034 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.034 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.034 [main] [30mTRACE[m  - #############################################
04:16:51.034 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.034 [main] [30mTRACE[m  - #############################################

04:16:51.034 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:51.034 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:51.034 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:51.034 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:51.034 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:51.034 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:51.034 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.034 [main] [30mTRACE[m  - ###############################################
04:16:51.034 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.035 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.035 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.035 [main] [30mTRACE[m  - #############################################
04:16:51.035 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.035 [main] [30mTRACE[m  - #############################################

04:16:51.035 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:51.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:51.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, false, false]
04:16:51.035 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 1]
04:16:51.035 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:51.035 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:51.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:51.035 [main] [30mTRACE[m  - ###############################################
04:16:51.035 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.035 [main] [30mTRACE[m  - ###############################################
04:16:51.035 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.035 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.035 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.035 [main] [30mTRACE[m  - #############################################
04:16:51.035 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.035 [main] [30mTRACE[m  - #############################################

04:16:51.035 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:51.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:51.035 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
04:16:51.035 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 1]
04:16:51.035 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:51.035 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:51.035 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:51.035 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:51.035 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
04:16:51.035 [main] [30mTRACE[m  - ###############################################
04:16:51.035 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.035 [main] [30mTRACE[m  - ###############################################
04:16:51.035 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.035 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.035 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.035 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.035 [main] [30mTRACE[m  - #############################################
04:16:51.035 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.036 [main] [30mTRACE[m  - #############################################

04:16:51.036 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
04:16:51.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:51.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:51.036 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 1]
04:16:51.036 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:51.036 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
04:16:51.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:51.036 [main] [30mTRACE[m  - ###############################################
04:16:51.036 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:51.036 [main] [30mTRACE[m  - ###############################################
04:16:51.036 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:51.036 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:51.036 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.036 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:51.036 [main] [36mDEBUG[m  - Index de la lettre
04:16:51.036 [main] [30mTRACE[m  - #############################################
04:16:51.036 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:51.036 [main] [30mTRACE[m  - #############################################

04:16:51.036 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:51.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:51.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:51.036 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 1]
04:16:51.036 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:51.036 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:51.036 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:51.036 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:51.036 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:51.036 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:51.036 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:51.036 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
04:16:51.036 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
04:16:51.036 [main] [30mTRACE[m  - ##################################################
04:16:51.036 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:51.036 [main] [30mTRACE[m  - ##################################################

04:16:51.036 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:51.852 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:51.852 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:51.853 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:51.853 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 19
04:16:51.853 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:52.055 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:52.055 [main] [30mTRACE[m  - ##############################################################
04:16:52.055 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:52.055 [main] [30mTRACE[m  - ##############################################################
04:16:52.055 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
04:16:52.055 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
04:16:52.056 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
04:16:52.056 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
04:16:52.056 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:52.056 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
04:16:52.056 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
04:16:52.056 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
04:16:52.056 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
04:16:52.056 [main] [30mTRACE[m  - ############################################################
04:16:52.056 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:52.056 [main] [30mTRACE[m  - ############################################################

04:16:52.056 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:52.056 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
04:16:52.056 [main] [32mINFO [m  - IF - "=" appara√Æt
04:16:52.056 [main] [30mTRACE[m  - ##############################################
04:16:52.056 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
04:16:52.056 [main] [30mTRACE[m  - ##############################################
04:16:52.056 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
04:16:52.056 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
04:16:52.056 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
04:16:52.056 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
04:16:52.056 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
04:16:52.056 [main] [30mTRACE[m  - ###############################################
04:16:52.056 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.056 [main] [30mTRACE[m  - ###############################################
04:16:52.056 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.056 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.056 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.056 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.056 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.056 [main] [30mTRACE[m  - #############################################
04:16:52.056 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.056 [main] [30mTRACE[m  - #############################################

04:16:52.056 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:52.057 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.057 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
04:16:52.057 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
04:16:52.057 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
04:16:52.057 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
04:16:52.057 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, true, true, false]
04:16:52.057 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
04:16:52.057 [main] [30mTRACE[m  - ############################################
04:16:52.057 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
04:16:52.057 [main] [30mTRACE[m  - ############################################

04:16:52.057 [main] [32mINFO [m  - Lancement √©galit√© positive
04:16:52.057 [main] [30mTRACE[m  - ##########################
04:16:52.057 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:52.057 [main] [30mTRACE[m  - ##########################

04:16:52.057 [main] [30mTRACE[m  - ############################
04:16:52.057 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:52.057 [main] [30mTRACE[m  - ############################
04:16:52.057 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:52.057 [main] [30mTRACE[m  - #####################################
04:16:52.057 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:52.057 [main] [30mTRACE[m  - #####################################
04:16:52.057 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:52.058 [main] [30mTRACE[m  - ###########################################################
04:16:52.058 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:52.058 [main] [30mTRACE[m  - ###########################################################
04:16:52.058 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:52.058 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:52.058 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, A, F, A, B]
04:16:52.058 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, true, true, false]
04:16:52.058 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:52.058 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:52.058 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:52.058 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:52.058 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:52.058 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:52.058 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:52.058 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:52.058 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:52.058 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
04:16:52.058 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
04:16:52.058 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:52.058 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:52.058 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:52.058 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:52.058 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:52.058 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
04:16:52.058 [main] [30mTRACE[m  - ###############################################
04:16:52.058 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.058 [main] [30mTRACE[m  - ###############################################
04:16:52.058 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.058 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.058 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.058 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.058 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.059 [main] [30mTRACE[m  - #############################################
04:16:52.059 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.059 [main] [30mTRACE[m  - #############################################

04:16:52.059 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:52.059 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:52.059 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:52.059 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:52.059 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:52.059 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:52.059 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:52.059 [main] [30mTRACE[m  - #########################################################
04:16:52.059 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:52.059 [main] [30mTRACE[m  - #########################################################

04:16:52.059 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:52.059 [main] [30mTRACE[m  - ###################################
04:16:52.059 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:52.059 [main] [30mTRACE[m  - ###################################

04:16:52.059 [main] [30mTRACE[m  - ###########################################################################################################
04:16:52.059 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:52.059 [main] [30mTRACE[m  - ###########################################################################################################
04:16:52.059 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:52.059 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:52.059 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:52.059 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  19
04:16:52.059 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, B, F, A, B]
04:16:52.059 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, B, F, A, B]
04:16:52.059 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
04:16:52.059 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
04:16:52.059 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
04:16:52.059 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:52.061 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, true, true, false]
04:16:52.061 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
04:16:52.061 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
04:16:52.061 [main] [36mDEBUG[m  - ch_NewLetter :                                B
04:16:52.061 [main] [30mTRACE[m  - ###########################################################################################################
04:16:52.061 [main] [30mTRACE[m  - ###########################################################################################################
04:16:52.061 [main] [30mTRACE[m  - ###########################################################################################################

04:16:52.061 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:52.061 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDBFAB
04:16:52.061 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDBFAB
04:16:52.264 [main] [30mTRACE[m  - ####################################################
04:16:52.264 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:52.264 [main] [30mTRACE[m  - ####################################################
04:16:52.264 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.265 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:52.265 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:52.265 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, B, F, A, B]
04:16:52.265 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:52.265 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:52.265 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:52.265 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, true, true, false]
04:16:52.265 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:52.265 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:52.265 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:52.265 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:52.265 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:52.265 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.265 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:52.265 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:52.265 [main] [30mTRACE[m  - ###############################################
04:16:52.265 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.265 [main] [30mTRACE[m  - ###############################################
04:16:52.265 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.265 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.266 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.266 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.266 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.266 [main] [30mTRACE[m  - #############################################
04:16:52.266 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.266 [main] [30mTRACE[m  - #############################################

04:16:52.266 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:52.266 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:52.266 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:52.266 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:52.266 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.266 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:52.266 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:52.266 [main] [30mTRACE[m  - ###############################################
04:16:52.266 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.266 [main] [30mTRACE[m  - ###############################################
04:16:52.266 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.267 [main] [30mTRACE[m  - #############################################
04:16:52.267 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.267 [main] [30mTRACE[m  - #############################################

04:16:52.267 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:52.267 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:52.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:52.267 [main] [30mTRACE[m  - ###############################################
04:16:52.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.267 [main] [30mTRACE[m  - ###############################################
04:16:52.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.267 [main] [30mTRACE[m  - #############################################
04:16:52.267 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.267 [main] [30mTRACE[m  - #############################################

04:16:52.267 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:52.267 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:52.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
04:16:52.267 [main] [30mTRACE[m  - ###############################################
04:16:52.267 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.267 [main] [30mTRACE[m  - ###############################################
04:16:52.267 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.267 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.267 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.267 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.267 [main] [30mTRACE[m  - #############################################
04:16:52.267 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.267 [main] [30mTRACE[m  - #############################################

04:16:52.267 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
04:16:52.267 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.267 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:52.267 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.268 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.268 [main] [30mTRACE[m  - #############################################
04:16:52.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - #############################################

04:16:52.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:52.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 1]
04:16:52.268 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:52.268 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:52.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.268 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.268 [main] [30mTRACE[m  - #############################################
04:16:52.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - #############################################

04:16:52.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:52.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 1]
04:16:52.268 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:52.268 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:52.268 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:52.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
04:16:52.268 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - ###############################################
04:16:52.268 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:52.268 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:52.268 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:52.268 [main] [36mDEBUG[m  - Index de la lettre
04:16:52.268 [main] [30mTRACE[m  - #############################################
04:16:52.268 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:52.268 [main] [30mTRACE[m  - #############################################

04:16:52.268 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:52.268 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:52.268 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 1]
04:16:52.268 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:52.268 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:52.268 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:52.269 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:52.269 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:52.269 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:52.269 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:52.269 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
04:16:52.269 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
04:16:52.269 [main] [30mTRACE[m  - ##################################################
04:16:52.269 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:52.269 [main] [30mTRACE[m  - ##################################################

04:16:52.269 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:53.086 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:53.086 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:53.086 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:53.086 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 20
04:16:53.086 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:53.290 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:53.290 [main] [30mTRACE[m  - ##############################################################
04:16:53.291 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:53.291 [main] [30mTRACE[m  - ##############################################################
04:16:53.291 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
04:16:53.291 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
04:16:53.291 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
04:16:53.291 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:53.291 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:53.291 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:53.291 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:53.291 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:53.291 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:53.291 [main] [30mTRACE[m  - ############################################################
04:16:53.291 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:53.291 [main] [30mTRACE[m  - ############################################################

04:16:53.291 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:53.291 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:53.291 [main] [30mTRACE[m  - ##########################
04:16:53.291 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:53.291 [main] [30mTRACE[m  - ##########################

04:16:53.291 [main] [30mTRACE[m  - ############################
04:16:53.291 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:53.291 [main] [30mTRACE[m  - ############################
04:16:53.291 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:53.291 [main] [30mTRACE[m  - #####################################
04:16:53.291 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:53.292 [main] [30mTRACE[m  - #####################################
04:16:53.292 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:53.292 [main] [30mTRACE[m  - ###########################################################
04:16:53.292 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:53.292 [main] [30mTRACE[m  - ###########################################################
04:16:53.292 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:53.292 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:53.292 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, B, F, A, B]
04:16:53.292 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, true, true, false]
04:16:53.292 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:53.292 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:53.292 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:53.292 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:53.292 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:53.292 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:53.292 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:53.292 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:53.292 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:53.292 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
04:16:53.292 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
04:16:53.292 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:53.292 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:53.292 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:53.292 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:53.292 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:53.292 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:53.292 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
04:16:53.292 [main] [30mTRACE[m  - ###############################################
04:16:53.292 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.292 [main] [30mTRACE[m  - ###############################################
04:16:53.292 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.292 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.292 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.292 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.292 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.292 [main] [30mTRACE[m  - #############################################
04:16:53.293 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.293 [main] [30mTRACE[m  - #############################################

04:16:53.293 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:53.293 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:53.293 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:53.293 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:53.293 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:53.293 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:53.293 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:53.293 [main] [30mTRACE[m  - #########################################################
04:16:53.293 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:53.293 [main] [30mTRACE[m  - #########################################################

04:16:53.293 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:53.293 [main] [30mTRACE[m  - ###################################
04:16:53.293 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:53.293 [main] [30mTRACE[m  - ###################################

04:16:53.293 [main] [30mTRACE[m  - ###########################################################################################################
04:16:53.293 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:53.293 [main] [30mTRACE[m  - ###########################################################################################################
04:16:53.293 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:53.293 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:53.293 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:53.293 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  20
04:16:53.293 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, C, F, A, B]
04:16:53.293 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, C, F, A, B]
04:16:53.293 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
04:16:53.293 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
04:16:53.293 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:53.293 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:53.294 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, true, true, false]
04:16:53.294 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
04:16:53.294 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
04:16:53.294 [main] [36mDEBUG[m  - ch_NewLetter :                                C
04:16:53.294 [main] [30mTRACE[m  - ###########################################################################################################
04:16:53.294 [main] [30mTRACE[m  - ###########################################################################################################
04:16:53.294 [main] [30mTRACE[m  - ###########################################################################################################

04:16:53.294 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:53.294 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDCFAB
04:16:53.294 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDCFAB
04:16:53.498 [main] [30mTRACE[m  - ####################################################
04:16:53.498 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:53.498 [main] [30mTRACE[m  - ####################################################
04:16:53.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:53.498 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:53.498 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, C, F, A, B]
04:16:53.498 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:53.499 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:53.499 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:53.499 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, true, true, false]
04:16:53.499 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:53.499 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:53.499 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:53.501 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:53.501 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:53.501 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.501 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:53.501 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:53.501 [main] [30mTRACE[m  - ###############################################
04:16:53.501 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.501 [main] [30mTRACE[m  - ###############################################
04:16:53.501 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.501 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.501 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.501 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.501 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.501 [main] [30mTRACE[m  - #############################################
04:16:53.502 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - #############################################

04:16:53.502 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:53.502 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.502 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.502 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.502 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.502 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.502 [main] [30mTRACE[m  - #############################################
04:16:53.502 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - #############################################

04:16:53.502 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:53.502 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.502 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.502 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.502 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.502 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.502 [main] [30mTRACE[m  - #############################################
04:16:53.502 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - #############################################

04:16:53.502 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:53.502 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.502 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.502 [main] [30mTRACE[m  - ###############################################
04:16:53.502 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.502 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.502 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.502 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.503 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.503 [main] [30mTRACE[m  - #############################################
04:16:53.503 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.503 [main] [30mTRACE[m  - #############################################

04:16:53.503 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
04:16:53.503 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:53.503 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:53.503 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
04:16:53.504 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.504 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:53.504 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:53.504 [main] [30mTRACE[m  - ###############################################
04:16:53.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.504 [main] [30mTRACE[m  - ###############################################
04:16:53.504 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.504 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.504 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.504 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.504 [main] [30mTRACE[m  - #############################################
04:16:53.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.504 [main] [30mTRACE[m  - #############################################

04:16:53.504 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:53.504 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:53.504 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:53.504 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 1]
04:16:53.504 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:53.504 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:53.504 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:53.504 [main] [30mTRACE[m  - ###############################################
04:16:53.504 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.504 [main] [30mTRACE[m  - ###############################################
04:16:53.504 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.504 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.504 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.504 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.504 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.504 [main] [30mTRACE[m  - #############################################
04:16:53.504 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.504 [main] [30mTRACE[m  - #############################################

04:16:53.504 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:53.504 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:53.504 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:53.504 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 1]
04:16:53.504 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:53.505 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:53.505 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:53.505 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
04:16:53.505 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:53.505 [main] [30mTRACE[m  - ###############################################
04:16:53.505 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:53.505 [main] [30mTRACE[m  - ###############################################
04:16:53.505 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:53.505 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:53.505 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.505 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:53.505 [main] [36mDEBUG[m  - Index de la lettre
04:16:53.505 [main] [30mTRACE[m  - #############################################
04:16:53.505 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:53.505 [main] [30mTRACE[m  - #############################################

04:16:53.505 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:53.505 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:53.505 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:53.505 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 1]
04:16:53.505 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:53.505 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:53.505 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:53.506 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:53.506 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:53.506 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:53.506 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:53.506 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
04:16:53.506 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
04:16:53.506 [main] [30mTRACE[m  - ##################################################
04:16:53.506 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:53.506 [main] [30mTRACE[m  - ##################################################

04:16:53.506 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:54.320 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:54.320 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:54.320 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:54.320 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 21
04:16:54.321 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:54.522 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:54.522 [main] [30mTRACE[m  - ##############################################################
04:16:54.522 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:54.522 [main] [30mTRACE[m  - ##############################################################
04:16:54.522 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
04:16:54.522 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
04:16:54.523 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
04:16:54.523 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:54.523 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:54.523 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:54.523 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:54.523 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:54.523 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:54.523 [main] [30mTRACE[m  - ############################################################
04:16:54.523 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:54.523 [main] [30mTRACE[m  - ############################################################

04:16:54.523 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:54.523 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:54.523 [main] [30mTRACE[m  - ##########################
04:16:54.523 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:54.523 [main] [30mTRACE[m  - ##########################

04:16:54.523 [main] [30mTRACE[m  - ############################
04:16:54.523 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:54.523 [main] [30mTRACE[m  - ############################
04:16:54.523 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:54.523 [main] [30mTRACE[m  - #####################################
04:16:54.523 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:54.523 [main] [30mTRACE[m  - #####################################
04:16:54.523 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:54.523 [main] [30mTRACE[m  - ###########################################################
04:16:54.523 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:54.523 [main] [30mTRACE[m  - ###########################################################
04:16:54.523 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:54.523 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:54.524 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, C, F, A, B]
04:16:54.524 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, true, true, false]
04:16:54.524 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:54.524 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:54.524 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:54.524 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:54.524 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:54.524 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:54.524 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:54.524 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:54.524 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:54.524 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
04:16:54.524 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
04:16:54.524 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:54.524 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:54.524 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:54.524 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:54.524 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:54.524 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:54.524 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:54.524 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
04:16:54.524 [main] [30mTRACE[m  - ###############################################
04:16:54.524 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.524 [main] [30mTRACE[m  - ###############################################
04:16:54.524 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.524 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.524 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.524 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.524 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.524 [main] [30mTRACE[m  - #############################################
04:16:54.524 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.524 [main] [30mTRACE[m  - #############################################

04:16:54.524 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:54.524 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:54.524 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:54.524 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:54.524 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:54.524 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:54.524 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:54.525 [main] [30mTRACE[m  - #########################################################
04:16:54.525 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:54.525 [main] [30mTRACE[m  - #########################################################

04:16:54.525 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:54.525 [main] [30mTRACE[m  - ###################################
04:16:54.525 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:54.525 [main] [30mTRACE[m  - ###################################

04:16:54.525 [main] [30mTRACE[m  - ###########################################################################################################
04:16:54.525 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:54.525 [main] [30mTRACE[m  - ###########################################################################################################
04:16:54.525 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:54.525 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:54.525 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:54.525 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  21
04:16:54.525 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, D, F, A, B]
04:16:54.525 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, D, F, A, B]
04:16:54.525 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
04:16:54.525 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
04:16:54.525 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:54.525 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:54.526 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, true, true, false]
04:16:54.526 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
04:16:54.526 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
04:16:54.526 [main] [36mDEBUG[m  - ch_NewLetter :                                D
04:16:54.526 [main] [30mTRACE[m  - ###########################################################################################################
04:16:54.526 [main] [30mTRACE[m  - ###########################################################################################################
04:16:54.526 [main] [30mTRACE[m  - ###########################################################################################################

04:16:54.526 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:54.526 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDDFAB
04:16:54.526 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDDFAB
04:16:54.732 [main] [30mTRACE[m  - ####################################################
04:16:54.732 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:54.732 [main] [30mTRACE[m  - ####################################################
04:16:54.732 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.732 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:54.732 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:54.732 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, D, F, A, B]
04:16:54.732 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:54.732 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:54.732 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:54.732 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, true, true, false]
04:16:54.732 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:54.732 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:54.732 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:54.732 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:54.733 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:54.733 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.733 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:54.733 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:54.733 [main] [30mTRACE[m  - ###############################################
04:16:54.733 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.733 [main] [30mTRACE[m  - ###############################################
04:16:54.733 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.733 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.733 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.733 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.733 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.733 [main] [30mTRACE[m  - #############################################
04:16:54.733 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.733 [main] [30mTRACE[m  - #############################################

04:16:54.733 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:54.733 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:54.733 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:54.733 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:54.733 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.733 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:54.733 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:54.733 [main] [30mTRACE[m  - ###############################################
04:16:54.733 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.734 [main] [30mTRACE[m  - ###############################################
04:16:54.734 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.734 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.734 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.734 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.734 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.734 [main] [30mTRACE[m  - #############################################
04:16:54.734 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.734 [main] [30mTRACE[m  - #############################################

04:16:54.734 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:54.734 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:54.734 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:54.734 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:54.734 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.734 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:54.734 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:54.734 [main] [30mTRACE[m  - ###############################################
04:16:54.734 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.734 [main] [30mTRACE[m  - ###############################################
04:16:54.734 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.734 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.734 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.734 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.734 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.734 [main] [30mTRACE[m  - #############################################
04:16:54.734 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.734 [main] [30mTRACE[m  - #############################################

04:16:54.734 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:54.734 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:54.734 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:54.734 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:54.734 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.734 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:54.734 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
04:16:54.735 [main] [30mTRACE[m  - ###############################################
04:16:54.735 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.735 [main] [30mTRACE[m  - ###############################################
04:16:54.736 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.736 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.736 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.736 [main] [30mTRACE[m  - #############################################
04:16:54.736 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.736 [main] [30mTRACE[m  - #############################################

04:16:54.736 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
04:16:54.736 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:54.736 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:54.736 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
04:16:54.736 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.736 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:54.736 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:54.736 [main] [30mTRACE[m  - ###############################################
04:16:54.736 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.736 [main] [30mTRACE[m  - ###############################################
04:16:54.736 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.736 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.737 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.737 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.737 [main] [30mTRACE[m  - #############################################
04:16:54.737 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.737 [main] [30mTRACE[m  - #############################################

04:16:54.737 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:54.737 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:54.737 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:54.738 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 1]
04:16:54.738 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:54.739 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:54.739 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:54.739 [main] [30mTRACE[m  - ###############################################
04:16:54.739 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.741 [main] [30mTRACE[m  - ###############################################
04:16:54.741 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.741 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.741 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.741 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.741 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.741 [main] [30mTRACE[m  - #############################################
04:16:54.741 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.741 [main] [30mTRACE[m  - #############################################

04:16:54.741 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:54.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:54.741 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:54.741 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 1]
04:16:54.742 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:54.742 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:54.742 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:54.742 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
04:16:54.742 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:54.742 [main] [30mTRACE[m  - ###############################################
04:16:54.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:54.742 [main] [30mTRACE[m  - ###############################################
04:16:54.742 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:54.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:54.742 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.742 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:54.742 [main] [36mDEBUG[m  - Index de la lettre
04:16:54.742 [main] [30mTRACE[m  - #############################################
04:16:54.742 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:54.742 [main] [30mTRACE[m  - #############################################

04:16:54.742 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:54.742 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:54.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, true]
04:16:54.743 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 1]
04:16:54.743 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:54.743 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:54.743 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
04:16:54.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
04:16:54.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:54.744 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:54.744 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
04:16:54.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
04:16:54.744 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
04:16:54.744 [main] [30mTRACE[m  - ##################################################
04:16:54.744 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:54.744 [main] [30mTRACE[m  - ##################################################

04:16:54.744 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:55.554 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:55.554 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
04:16:55.554 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
04:16:55.554 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 22
04:16:55.554 [main] [32mINFO [m  - Injection (int) Compteur de tours
04:16:55.757 [main] [32mINFO [m  - IF - Apr√®s premier tour
04:16:55.757 [main] [30mTRACE[m  - ##############################################################
04:16:55.757 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:55.757 [main] [30mTRACE[m  - ##############################################################
04:16:55.757 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
04:16:55.757 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
04:16:55.757 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
04:16:55.757 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
04:16:55.757 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
04:16:55.757 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
04:16:55.757 [main] [32mINFO [m  - ELSE - Sinon ...
04:16:55.757 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
04:16:55.757 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
04:16:55.757 [main] [30mTRACE[m  - ############################################################
04:16:55.757 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
04:16:55.757 [main] [30mTRACE[m  - ############################################################

04:16:55.757 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
04:16:55.757 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
04:16:55.757 [main] [30mTRACE[m  - ##########################
04:16:55.757 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
04:16:55.757 [main] [30mTRACE[m  - ##########################

04:16:55.758 [main] [30mTRACE[m  - ############################
04:16:55.758 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
04:16:55.758 [main] [30mTRACE[m  - ############################
04:16:55.758 [main] [32mINFO [m  - IF - Mode "Duel"
04:16:55.758 [main] [30mTRACE[m  - #####################################
04:16:55.758 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
04:16:55.758 [main] [30mTRACE[m  - #####################################
04:16:55.758 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
04:16:55.758 [main] [30mTRACE[m  - ###########################################################
04:16:55.758 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:55.758 [main] [30mTRACE[m  - ###########################################################
04:16:55.758 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
04:16:55.758 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
04:16:55.758 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, D, F, A, B]
04:16:55.758 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, true, true, false]
04:16:55.758 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
04:16:55.758 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
04:16:55.758 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
04:16:55.758 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:55.758 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:55.758 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:55.758 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:55.758 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
04:16:55.758 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
04:16:55.758 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
04:16:55.758 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
04:16:55.758 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:55.758 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:55.758 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:55.758 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
04:16:55.758 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
04:16:55.758 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
04:16:55.758 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
04:16:55.758 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
04:16:55.758 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
04:16:55.759 [main] [30mTRACE[m  - ###############################################
04:16:55.759 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.759 [main] [30mTRACE[m  - ###############################################
04:16:55.759 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.759 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.759 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.759 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.759 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.759 [main] [30mTRACE[m  - #############################################
04:16:55.759 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.759 [main] [30mTRACE[m  - #############################################

04:16:55.759 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
04:16:55.759 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
04:16:55.759 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
04:16:55.759 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
04:16:55.759 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
04:16:55.759 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
04:16:55.759 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
04:16:55.759 [main] [30mTRACE[m  - #########################################################
04:16:55.759 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
04:16:55.759 [main] [30mTRACE[m  - #########################################################

04:16:55.759 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
04:16:55.759 [main] [30mTRACE[m  - ###################################
04:16:55.759 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
04:16:55.759 [main] [30mTRACE[m  - ###################################

04:16:55.759 [main] [30mTRACE[m  - ###########################################################################################################
04:16:55.759 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
04:16:55.759 [main] [30mTRACE[m  - ###########################################################################################################
04:16:55.759 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
04:16:55.759 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
04:16:55.759 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
04:16:55.759 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  22
04:16:55.760 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, F, A, B]
04:16:55.760 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, F, A, B]
04:16:55.760 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
04:16:55.760 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
04:16:55.760 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
04:16:55.760 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

04:16:55.761 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, true, true, false]
04:16:55.761 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
04:16:55.761 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
04:16:55.761 [main] [36mDEBUG[m  - ch_NewLetter :                                E
04:16:55.761 [main] [30mTRACE[m  - ###########################################################################################################
04:16:55.761 [main] [30mTRACE[m  - ###########################################################################################################
04:16:55.761 [main] [30mTRACE[m  - ###########################################################################################################

04:16:55.761 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
04:16:55.761 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
04:16:55.761 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEFAB
04:16:55.963 [main] [30mTRACE[m  - ####################################################
04:16:55.963 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
04:16:55.963 [main] [30mTRACE[m  - ####################################################
04:16:55.963 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.963 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
04:16:55.963 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
04:16:55.963 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, F, A, B]
04:16:55.963 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
04:16:55.963 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
04:16:55.963 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
04:16:55.963 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, true, true, false]
04:16:55.963 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
04:16:55.963 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:55.963 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
04:16:55.963 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
04:16:55.963 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:55.963 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.963 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
04:16:55.963 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:55.963 [main] [30mTRACE[m  - ###############################################
04:16:55.963 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.963 [main] [30mTRACE[m  - ###############################################
04:16:55.964 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.964 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.964 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.964 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.964 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.964 [main] [30mTRACE[m  - #############################################
04:16:55.964 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.964 [main] [30mTRACE[m  - #############################################

04:16:55.964 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:55.964 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:55.964 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
04:16:55.964 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
04:16:55.964 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.964 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
04:16:55.964 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
04:16:55.964 [main] [30mTRACE[m  - ###############################################
04:16:55.964 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.964 [main] [30mTRACE[m  - ###############################################
04:16:55.964 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.964 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.964 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.964 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.965 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.965 [main] [30mTRACE[m  - #############################################
04:16:55.965 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.965 [main] [30mTRACE[m  - #############################################

04:16:55.965 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
04:16:55.965 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:55.965 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
04:16:55.965 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
04:16:55.965 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.965 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
04:16:55.965 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
04:16:55.965 [main] [30mTRACE[m  - ###############################################
04:16:55.965 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.966 [main] [30mTRACE[m  - ###############################################
04:16:55.966 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.966 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.966 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.966 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.966 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.966 [main] [30mTRACE[m  - #############################################
04:16:55.966 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.966 [main] [30mTRACE[m  - #############################################

04:16:55.966 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
04:16:55.966 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:55.967 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
04:16:55.967 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
04:16:55.967 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.967 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
04:16:55.967 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
04:16:55.967 [main] [30mTRACE[m  - ###############################################
04:16:55.967 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.967 [main] [30mTRACE[m  - ###############################################
04:16:55.967 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.968 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.968 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.968 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.968 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.968 [main] [30mTRACE[m  - #############################################
04:16:55.968 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.968 [main] [30mTRACE[m  - #############################################

04:16:55.968 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
04:16:55.968 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:55.969 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
04:16:55.969 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
04:16:55.969 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.969 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
04:16:55.969 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
04:16:55.969 [main] [30mTRACE[m  - ###############################################
04:16:55.969 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.969 [main] [30mTRACE[m  - ###############################################
04:16:55.969 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.970 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.970 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.972 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.972 [main] [30mTRACE[m  - #############################################
04:16:55.972 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.972 [main] [30mTRACE[m  - #############################################

04:16:55.972 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
04:16:55.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:55.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
04:16:55.972 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 1]
04:16:55.972 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
04:16:55.972 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
04:16:55.972 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
04:16:55.972 [main] [30mTRACE[m  - ###############################################
04:16:55.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.973 [main] [30mTRACE[m  - ###############################################
04:16:55.973 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.973 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.973 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.973 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.973 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.973 [main] [30mTRACE[m  - #############################################
04:16:55.973 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.973 [main] [30mTRACE[m  - #############################################

04:16:55.973 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
04:16:55.973 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:55.973 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
04:16:55.973 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 1]
04:16:55.973 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
04:16:55.973 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:55.973 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:55.973 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
04:16:55.973 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
04:16:55.973 [main] [30mTRACE[m  - ###############################################
04:16:55.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.973 [main] [30mTRACE[m  - ###############################################
04:16:55.973 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.973 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.973 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.973 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.974 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.974 [main] [30mTRACE[m  - #############################################
04:16:55.974 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.974 [main] [30mTRACE[m  - #############################################

04:16:55.974 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
04:16:55.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
04:16:55.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
04:16:55.974 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 1]
04:16:55.974 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
04:16:55.974 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [8, 0, 0]
04:16:55.974 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
04:16:55.974 [main] [30mTRACE[m  - ###############################################
04:16:55.974 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
04:16:55.974 [main] [30mTRACE[m  - ###############################################
04:16:55.974 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
04:16:55.975 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
04:16:55.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.975 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
04:16:55.976 [main] [36mDEBUG[m  - Index de la lettre
04:16:55.976 [main] [30mTRACE[m  - #############################################
04:16:55.976 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
04:16:55.976 [main] [30mTRACE[m  - #############################################

04:16:55.976 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
04:16:55.977 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:55.977 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
04:16:55.977 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 1]
04:16:55.977 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
04:16:55.977 [main] [32mINFO [m  - FOR - Chaque unit√©
04:16:55.977 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [8, 0, 0]
04:16:55.977 [main] [30mTRACE[m  - ##################################################
04:16:55.977 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
04:16:55.977 [main] [30mTRACE[m  - ##################################################

04:16:55.977 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
04:16:56.794 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
04:16:56.794 [main] [32mINFO [m  - SI - Mode "D√©fense"
04:16:58.815 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
04:16:58.815 [main] [30mTRACE[m  - ##########################
04:16:58.816 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
04:16:58.816 [main] [30mTRACE[m  - ##########################
04:16:58.816 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
04:16:58.816 [main] [30mTRACE[m  - ####################################################################
04:16:58.816 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
04:16:58.816 [main] [30mTRACE[m  - ####################################################################
04:16:59.225 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
04:16:59.226 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
04:16:59.226 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
05:25:57.790 [main] [30mTRACE[m  - #######################################
05:25:57.797 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
05:25:57.798 [main] [30mTRACE[m  - #######################################
05:25:57.798 [main] [30mTRACE[m  - ######################################################################################
05:25:57.798 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
05:25:57.798 [main] [30mTRACE[m  - ######################################################################################
05:25:57.798 [main] [30mTRACE[m  - #############################################
05:25:57.799 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
05:25:57.799 [main] [30mTRACE[m  - #############################################
05:25:57.802 [main] [30mTRACE[m  - ###########################################
05:25:57.802 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
05:25:57.802 [main] [30mTRACE[m  - ###########################################

05:25:57.803 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
05:25:57.803 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
05:25:57.804 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
05:25:57.804 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
05:25:57.805 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
05:25:57.805 [main] [30mTRACE[m  - #########################################################
05:25:57.805 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
05:25:57.805 [main] [30mTRACE[m  - #########################################################
05:25:57.807 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
05:25:57.807 [main] [32mINFO [m  - FOR - Lancement boucle infini
05:25:57.808 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
05:25:57.808 [main] [32mINFO [m  - IF - Premier tour
05:26:00.343 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
05:26:00.343 [main] [30mTRACE[m  - ###########################################################
05:26:00.343 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
05:26:00.343 [main] [30mTRACE[m  - ###########################################################
05:26:00.344 [main] [30mTRACE[m  - #######################################
05:26:00.344 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
05:26:00.344 [main] [30mTRACE[m  - #######################################
05:26:00.344 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
05:26:00.345 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
05:26:00.345 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
05:26:01.157 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
05:26:01.157 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
05:26:01.158 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
05:26:03.130 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
05:26:03.131 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
05:26:03.133 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
05:26:03.134 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
05:26:03.134 [main] [32mINFO [m  - CASE - "Games"
05:26:03.134 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
05:26:03.336 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
05:26:03.337 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
05:26:03.338 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
05:26:04.151 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
05:26:04.151 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
05:26:04.152 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
05:26:05.257 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
05:26:05.257 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
05:26:05.258 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
05:26:05.259 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
05:26:05.260 [main] [32mINFO [m  - CASE - "Comfirm"
05:26:05.260 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
05:26:05.261 [main] [32mINFO [m  - CASE - 'O'
05:26:05.262 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
05:26:05.262 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
05:26:05.263 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
05:26:05.264 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
05:26:06.276 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
05:26:06.276 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
05:26:06.277 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
05:26:08.318 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
05:26:08.319 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
05:26:08.321 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
05:26:08.321 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
05:26:08.321 [main] [32mINFO [m  - CASE - "Modes"
05:26:08.322 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
05:26:08.322 [main] [32mINFO [m  - CASE - '2'
05:26:08.523 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
05:26:08.529 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
05:26:08.529 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
05:26:09.339 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
05:26:09.339 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
05:26:09.339 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
05:26:10.742 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
05:26:10.743 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
05:26:10.744 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
05:26:10.744 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
05:26:10.744 [main] [32mINFO [m  - CASE - "Comfirm"
05:26:10.744 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
05:26:10.745 [main] [32mINFO [m  - CASE - 'O'
05:26:10.747 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
05:26:10.747 [main] [36mDEBUG[m  - str_ConfirmChoise : O
05:26:10.748 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
05:26:10.749 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
05:26:13.020 [main] [30mTRACE[m  - #####################################
05:26:13.020 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
05:26:13.021 [main] [30mTRACE[m  - #####################################

05:26:13.021 [main] [30mTRACE[m  - ################################################################################################
05:26:13.021 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
05:26:13.021 [main] [30mTRACE[m  - ################################################################################################
05:26:13.021 [main] [32mINFO [m  - SWITCH - Choix du jeu
05:26:13.021 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
05:26:13.042 [main] [32mINFO [m  - Instance "Mastermind"
05:26:13.042 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
05:26:13.043 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
05:26:13.043 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
05:26:13.044 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
05:26:13.044 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
05:26:13.044 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:13.045 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
05:26:13.045 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
05:26:13.045 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
05:26:13.045 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
05:26:13.045 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
05:26:13.045 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
05:26:13.046 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
05:26:13.047 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
05:26:13.047 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
05:26:13.047 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
05:26:13.047 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
05:26:13.048 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
05:26:13.048 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
05:26:13.048 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
05:26:13.048 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
05:26:13.048 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
05:26:13.049 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
05:26:13.049 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
05:26:13.049 [main] [32mINFO [m  - Lancement du compteur de tours
05:26:13.049 [main] [30mTRACE[m  - ############################
05:26:13.049 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:13.050 [main] [30mTRACE[m  - ############################
05:26:13.050 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:13.050 [main] [32mINFO [m  - SI - Premier tour
05:26:14.116 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
05:26:14.116 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
05:26:14.117 [main] [32mINFO [m  - SWITCH - Mode des jeux
05:26:14.117 [main] [32mINFO [m  - CASE - Mode "D√©fense"
05:26:14.321 [main] [32mINFO [m  - Lance le scanner pour la combinaison
05:26:14.322 [main] [30mTRACE[m  - #####################################
05:26:14.323 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
05:26:14.323 [main] [30mTRACE[m  - #####################################
05:26:14.324 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
05:26:14.324 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
05:26:20.934 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : abcdefab
05:26:20.935 [main] [32mINFO [m  - Instance "Pattern"
05:26:20.935 [main] [32mINFO [m  - Instance "Matcher"
05:26:20.935 [main] [32mINFO [m  - IF - Match
05:26:20.935 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
05:26:20.936 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
05:26:20.937 [main] [36mDEBUG[m  - String() Combinaison : abcdefab
05:26:20.938 [main] [30mTRACE[m  - ###################################
05:26:20.938 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
05:26:20.938 [main] [30mTRACE[m  - ###################################

05:26:20.938 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
05:26:20.938 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
05:26:20.938 [main] [30mTRACE[m  - ##########################################
05:26:20.938 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
05:26:20.938 [main] [30mTRACE[m  - ##########################################
05:26:20.939 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
05:26:20.939 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
05:26:20.939 [main] [30mTRACE[m  - ########################################
05:26:20.940 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
05:26:20.940 [main] [30mTRACE[m  - ########################################

05:26:20.940 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
05:26:20.942 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
05:26:20.942 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
05:26:20.944 [main] [30mTRACE[m  - ##############################################
05:26:20.944 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
05:26:20.944 [main] [30mTRACE[m  - ##############################################
05:26:20.945 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
05:26:20.946 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
05:26:20.947 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
05:26:20.947 [main] [30mTRACE[m  - ##########################################
05:26:20.947 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
05:26:20.947 [main] [30mTRACE[m  - ##########################################

05:26:20.947 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
05:26:20.948 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
05:26:20.948 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
05:26:20.948 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
05:26:20.949 [main] [36mDEBUG[m  - array_ch_Combination[] : [A, B, C, D, E, F, A, B]
05:26:20.949 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [A, B, C, D, E, F, A, B]
05:26:20.950 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
05:26:20.950 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
05:26:20.950 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:20.950 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:20.951 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
05:26:20.958 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
05:26:20.958 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
05:26:21.164 [main] [30mTRACE[m  - #####################################
05:26:21.164 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:21.165 [main] [30mTRACE[m  - #####################################
05:26:21.165 [main] [32mINFO [m  - IF - Premier tour
05:26:21.165 [main] [30mTRACE[m  - ##########################################################
05:26:21.165 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_FirstTypeComputerProposal()
05:26:21.165 [main] [30mTRACE[m  - ##########################################################
05:26:21.165 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
05:26:21.166 [main] [32mINFO [m  - Initialisation (char[]) Nouvelle proposition de l'ordinateur
05:26:21.167 [main] [36mDEBUG[m  - Injection (char[]) Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:21.167 [main] [32mINFO [m  - Injection mouvelle proposition de l'ordinateur dans donn√©es de d√©fense
05:26:21.168 [main] [30mTRACE[m  - ########################################################
05:26:21.168 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_FirstTypeComputerProposal()
05:26:21.168 [main] [30mTRACE[m  - ########################################################

05:26:21.168 [main] [32mINFO [m  - Lancement premi√®re proposition de l'ordinateur
05:26:21.168 [main] [30mTRACE[m  - ###################################
05:26:21.168 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:21.168 [main] [30mTRACE[m  - ###################################

05:26:21.169 [main] [30mTRACE[m  - ###########################################################################################################
05:26:21.169 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:21.169 [main] [30mTRACE[m  - ###########################################################################################################
05:26:21.170 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:21.170 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:21.171 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:21.171 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  0
05:26:21.171 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [ ,  ,  ,  ,  ,  ,  ,  ]
05:26:21.172 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, E, F, D, B, B, F, B]
05:26:21.172 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
05:26:21.173 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [0, 0, 0]
05:26:21.174 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
05:26:21.174 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:21.187 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
05:26:21.188 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
05:26:21.188 [main] [36mDEBUG[m  - ch_PreviousLetter :                            
05:26:21.188 [main] [36mDEBUG[m  - ch_NewLetter :                                 
05:26:21.188 [main] [30mTRACE[m  - ###########################################################################################################
05:26:21.188 [main] [30mTRACE[m  - ###########################################################################################################
05:26:21.189 [main] [30mTRACE[m  - ###########################################################################################################

05:26:21.189 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:21.189 [main] [36mDEBUG[m  - Incr√©mentation String() : AEFDBBFB
05:26:21.189 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AEFDBBFB
05:26:21.400 [main] [30mTRACE[m  - ####################################################
05:26:21.401 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:21.401 [main] [30mTRACE[m  - ####################################################
05:26:21.401 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:21.402 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:21.402 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:21.402 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:21.403 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:21.403 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:21.403 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:21.404 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
05:26:21.405 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:21.406 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:21.408 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:21.408 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:21.408 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.408 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:21.408 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.408 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:21.409 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:21.409 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
05:26:21.410 [main] [30mTRACE[m  - ###############################################
05:26:21.410 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:21.410 [main] [30mTRACE[m  - ###############################################
05:26:21.410 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:21.411 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:21.411 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.411 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.411 [main] [36mDEBUG[m  - Index de la lettre
05:26:21.411 [main] [30mTRACE[m  - #############################################
05:26:21.411 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:21.412 [main] [30mTRACE[m  - #############################################

05:26:21.412 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
05:26:21.412 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:21.412 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:21.413 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:21.413 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:21.413 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:21.413 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:21.413 [main] [30mTRACE[m  - ###############################################
05:26:21.413 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:21.413 [main] [30mTRACE[m  - ###############################################
05:26:21.413 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:21.413 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:21.414 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.414 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.414 [main] [36mDEBUG[m  - Index de la lettre
05:26:21.414 [main] [30mTRACE[m  - #############################################
05:26:21.414 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:21.414 [main] [30mTRACE[m  - #############################################

05:26:21.414 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:21.417 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:21.417 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:21.418 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 1, 0, 0]
05:26:21.418 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:21.418 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:21.418 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:21.418 [main] [30mTRACE[m  - ###############################################
05:26:21.418 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:21.418 [main] [30mTRACE[m  - ###############################################
05:26:21.418 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:21.418 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:21.418 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.418 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.419 [main] [36mDEBUG[m  - Index de la lettre
05:26:21.419 [main] [30mTRACE[m  - #############################################
05:26:21.419 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:21.419 [main] [30mTRACE[m  - #############################################

05:26:21.419 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:21.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:21.419 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:21.419 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 1, 0, 0]
05:26:21.419 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:21.419 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.419 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:21.420 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:21.420 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:21.420 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.420 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:21.421 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, true, false, false, true]
05:26:21.421 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
05:26:21.421 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.421 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:21.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 1, 0]
05:26:21.422 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:21.422 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
05:26:21.422 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:21.422 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:21.422 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:21.423 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.423 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:21.423 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, true, true, false, true]
05:26:21.423 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:21.423 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.423 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:21.423 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 1, 1]
05:26:21.423 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:21.423 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 0]
05:26:21.423 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:21.423 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:21.424 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:21.424 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.424 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:21.424 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, true, true, false, true]
05:26:21.424 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:21.424 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:21.424 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:21.424 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 1, 1, 1]
05:26:21.424 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:21.424 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 0]
05:26:21.424 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:21.425 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:21.425 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:21.425 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.425 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:21.425 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 1]
05:26:21.425 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:21.425 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:21.426 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:21.426 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:21.426 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:21.426 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 2]
05:26:21.426 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
05:26:21.426 [main] [30mTRACE[m  - ##################################################
05:26:21.427 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:21.427 [main] [30mTRACE[m  - ##################################################

05:26:21.427 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:22.248 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:22.248 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:22.248 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:22.249 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
05:26:22.249 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:22.473 [main] [30mTRACE[m  - ##########################
05:26:22.474 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:22.474 [main] [30mTRACE[m  - ##########################

05:26:22.474 [main] [30mTRACE[m  - ############################
05:26:22.474 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:22.474 [main] [30mTRACE[m  - ############################
05:26:22.474 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:22.474 [main] [30mTRACE[m  - #####################################
05:26:22.474 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:22.474 [main] [30mTRACE[m  - #####################################
05:26:22.474 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:22.474 [main] [30mTRACE[m  - ###########################################################
05:26:22.474 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:22.475 [main] [30mTRACE[m  - ###########################################################
05:26:22.475 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:22.475 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:22.475 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:22.476 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
05:26:22.476 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:22.476 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:22.476 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:22.477 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:22.477 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:22.477 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
05:26:22.478 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:22.479 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:22.479 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:22.479 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:22.480 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:22.480 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:22.480 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:22.480 [main] [30mTRACE[m  - ###############################################
05:26:22.481 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:22.481 [main] [30mTRACE[m  - ###############################################
05:26:22.481 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:22.481 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:22.481 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.481 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.481 [main] [36mDEBUG[m  - Index de la lettre
05:26:22.481 [main] [30mTRACE[m  - #############################################
05:26:22.481 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:22.481 [main] [30mTRACE[m  - #############################################

05:26:22.481 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:22.481 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:22.481 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:22.481 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:22.481 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:22.481 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:22.482 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:22.482 [main] [30mTRACE[m  - #########################################################
05:26:22.482 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:22.482 [main] [30mTRACE[m  - #########################################################

05:26:22.482 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:22.482 [main] [30mTRACE[m  - ###################################
05:26:22.482 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:22.482 [main] [30mTRACE[m  - ###################################

05:26:22.482 [main] [30mTRACE[m  - ###########################################################################################################
05:26:22.482 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:22.482 [main] [30mTRACE[m  - ###########################################################################################################
05:26:22.482 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:22.482 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:22.482 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:22.482 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  1
05:26:22.482 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [B, E, F, D, B, B, F, B]
05:26:22.482 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [B, E, F, D, B, B, F, B]
05:26:22.482 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
05:26:22.483 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
05:26:22.483 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
05:26:22.483 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:22.485 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
05:26:22.485 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
05:26:22.485 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:22.485 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:22.485 [main] [30mTRACE[m  - ###########################################################################################################
05:26:22.485 [main] [30mTRACE[m  - ###########################################################################################################
05:26:22.485 [main] [30mTRACE[m  - ###########################################################################################################

05:26:22.485 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:22.485 [main] [36mDEBUG[m  - Incr√©mentation String() : BEFDBBFB
05:26:22.486 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : BEFDBBFB
05:26:22.690 [main] [30mTRACE[m  - ####################################################
05:26:22.690 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:22.690 [main] [30mTRACE[m  - ####################################################
05:26:22.691 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:22.691 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:22.691 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:22.691 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [B, E, F, D, B, B, F, B]
05:26:22.691 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:22.691 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:22.691 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:22.692 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
05:26:22.692 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:22.692 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:22.692 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:22.692 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:22.692 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.692 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:22.693 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.693 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:22.693 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:22.693 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:22.693 [main] [30mTRACE[m  - ###############################################
05:26:22.693 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:22.694 [main] [30mTRACE[m  - ###############################################
05:26:22.694 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:22.694 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:22.694 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.694 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.694 [main] [36mDEBUG[m  - Index de la lettre
05:26:22.694 [main] [30mTRACE[m  - #############################################
05:26:22.695 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:22.695 [main] [30mTRACE[m  - #############################################

05:26:22.695 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:22.695 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
05:26:22.695 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
05:26:22.695 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 1, 0, 0]
05:26:22.695 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:22.695 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:22.696 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:22.696 [main] [30mTRACE[m  - ###############################################
05:26:22.696 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:22.696 [main] [30mTRACE[m  - ###############################################
05:26:22.696 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:22.697 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:22.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.698 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.698 [main] [36mDEBUG[m  - Index de la lettre
05:26:22.698 [main] [30mTRACE[m  - #############################################
05:26:22.699 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:22.699 [main] [30mTRACE[m  - #############################################

05:26:22.699 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:22.700 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, true]
05:26:22.701 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, true]
05:26:22.702 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 1, 0, 0]
05:26:22.702 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:22.702 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.702 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.702 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:22.702 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:22.702 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.702 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:22.702 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, false, false, true]
05:26:22.702 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:22.702 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.703 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:22.703 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 0, 1, 0, 0]
05:26:22.703 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:22.703 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
05:26:22.703 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.703 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:22.703 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:22.704 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.704 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:22.704 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, true, false, false, true]
05:26:22.705 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
05:26:22.705 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.705 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:22.705 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 0, 1, 1, 0]
05:26:22.705 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:22.705 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
05:26:22.705 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.705 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:22.706 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:22.706 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.706 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:22.706 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, true, true, false, true]
05:26:22.706 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:22.706 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:22.706 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:22.706 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 2, 0, 1, 1, 1]
05:26:22.706 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:22.706 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 0]
05:26:22.707 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.707 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:22.707 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:22.707 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.707 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:22.707 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 1]
05:26:22.707 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.707 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:22.707 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:22.708 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.708 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:22.708 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 2]
05:26:22.708 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:22.708 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:22.708 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:22.709 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:22.709 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:22.709 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 3]
05:26:22.710 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
05:26:22.710 [main] [30mTRACE[m  - ##################################################
05:26:22.710 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:22.711 [main] [30mTRACE[m  - ##################################################

05:26:22.711 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:23.523 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:23.523 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:23.523 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:23.524 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
05:26:23.524 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:23.724 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:23.724 [main] [30mTRACE[m  - ##############################################################
05:26:23.725 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:23.725 [main] [30mTRACE[m  - ##############################################################
05:26:23.726 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
05:26:23.726 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
05:26:23.727 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
05:26:23.727 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
05:26:23.728 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:23.728 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
05:26:23.728 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
05:26:23.729 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
05:26:23.729 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
05:26:23.729 [main] [30mTRACE[m  - ############################################################
05:26:23.729 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:23.730 [main] [30mTRACE[m  - ############################################################

05:26:23.730 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:23.730 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
05:26:23.731 [main] [32mINFO [m  - IF - "‚â†" n'est pas apparu et que "=" a disparu
05:26:23.731 [main] [30mTRACE[m  - ##############################################
05:26:23.731 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_NegativeEquality()
05:26:23.732 [main] [30mTRACE[m  - ##############################################
05:26:23.732 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:23.732 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition : [B, E, F, D, B, B, F, B]
05:26:23.732 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:23.733 [main] [36mDEBUG[m  - R√©cup√©ration (int) Nouvelle position de remplacement : 0
05:26:23.733 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettre pr√©c√©dente : A
05:26:23.733 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:23.733 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:23.733 [main] [30mTRACE[m  - ###############################################
05:26:23.733 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.733 [main] [30mTRACE[m  - ###############################################
05:26:23.734 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.734 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.734 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.734 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.734 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.734 [main] [30mTRACE[m  - #############################################
05:26:23.734 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.734 [main] [30mTRACE[m  - #############################################

05:26:23.734 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre pr√©c√©dente : 0
05:26:23.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.735 [main] [32mINFO [m  - ELSE - "i" = Index de la lettre pr√©c√©dente
05:26:23.735 [main] [36mDEBUG[m  - La lettre est pr√©sente √† cette position = 'LETTRE PRECEDENTE'
05:26:23.735 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.735 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
05:26:23.736 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:23.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.736 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
05:26:23.736 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:23.736 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.736 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
05:26:23.737 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:23.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.737 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
05:26:23.737 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:23.737 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.737 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
05:26:23.737 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:23.738 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
05:26:23.738 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
05:26:23.739 [main] [32mINFO [m  - Injection (boolean[]) Lettres de la combinaison trouv√©es
05:26:23.739 [main] [30mTRACE[m  - ####################################################
05:26:23.739 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:23.739 [main] [30mTRACE[m  - ####################################################
05:26:23.739 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.739 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:23.739 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:23.740 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:23.740 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:23.740 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:23.740 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:23.740 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:23.740 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:23.740 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:23.740 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:23.740 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:23.740 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.741 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:23.741 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:23.742 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:23.742 [main] [30mTRACE[m  - ###############################################
05:26:23.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.742 [main] [30mTRACE[m  - ###############################################
05:26:23.743 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.743 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.743 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.743 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.744 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.744 [main] [30mTRACE[m  - #############################################
05:26:23.744 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.744 [main] [30mTRACE[m  - #############################################

05:26:23.744 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:23.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:23.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:23.746 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:23.746 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:23.746 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.746 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:23.747 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:23.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:23.747 [main] [30mTRACE[m  - ###############################################
05:26:23.747 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.747 [main] [30mTRACE[m  - ###############################################
05:26:23.747 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.747 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.747 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.747 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.747 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.747 [main] [30mTRACE[m  - #############################################
05:26:23.747 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.748 [main] [30mTRACE[m  - #############################################

05:26:23.748 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:23.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:23.748 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:23.749 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 1, 0, 0]
05:26:23.749 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:23.749 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:23.749 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:23.749 [main] [30mTRACE[m  - ###############################################
05:26:23.749 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.749 [main] [30mTRACE[m  - ###############################################
05:26:23.749 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.749 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.750 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.750 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.750 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.750 [main] [30mTRACE[m  - #############################################
05:26:23.750 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.750 [main] [30mTRACE[m  - #############################################

05:26:23.750 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:23.750 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:23.750 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:23.751 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 1, 0, 0]
05:26:23.751 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:23.751 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.751 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.751 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:23.751 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:23.751 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.752 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:23.752 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, true, false, false, true]
05:26:23.752 [main] [36mDEBUG[m  - array_ch_Combination[j] : E
05:26:23.752 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.752 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:23.752 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 1, 0]
05:26:23.752 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:23.752 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
05:26:23.752 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.752 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:23.752 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:23.752 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.752 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:23.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, true, true, false, true]
05:26:23.753 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:23.753 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.753 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:23.753 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 1, 1]
05:26:23.753 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:23.753 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 0]
05:26:23.753 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.753 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:23.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:23.754 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.754 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:23.754 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, true, true, false, true]
05:26:23.754 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:23.754 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.754 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:23.754 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 1, 1, 1]
05:26:23.754 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:23.754 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 0]
05:26:23.755 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.755 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:23.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:23.755 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.755 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:23.755 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 1]
05:26:23.755 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.755 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:23.756 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:23.756 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.756 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:23.756 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 2]
05:26:23.756 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
05:26:23.756 [main] [30mTRACE[m  - ##################################################
05:26:23.756 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:23.756 [main] [30mTRACE[m  - ##################################################

05:26:23.756 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:23.756 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:23.756 [main] [30mTRACE[m  - ############################################
05:26:23.756 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_NegativeEquality()
05:26:23.756 [main] [30mTRACE[m  - ############################################

05:26:23.756 [main] [32mINFO [m  - Lancement √©galit√© n√©gative
05:26:23.756 [main] [30mTRACE[m  - ##########################
05:26:23.757 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:23.757 [main] [30mTRACE[m  - ##########################

05:26:23.757 [main] [30mTRACE[m  - ############################
05:26:23.757 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:23.757 [main] [30mTRACE[m  - ############################
05:26:23.757 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:23.757 [main] [30mTRACE[m  - #####################################
05:26:23.757 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:23.757 [main] [30mTRACE[m  - #####################################
05:26:23.757 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:23.757 [main] [30mTRACE[m  - ###########################################################
05:26:23.757 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:23.759 [main] [30mTRACE[m  - ###########################################################
05:26:23.760 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:23.760 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:23.760 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, E, F, D, B, B, F, B]
05:26:23.760 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
05:26:23.760 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:23.760 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:23.761 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:23.761 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:23.761 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:23.761 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:23.761 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
05:26:23.761 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
05:26:23.761 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:23.761 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:23.761 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:23.761 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:23.761 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
05:26:23.762 [main] [30mTRACE[m  - ###############################################
05:26:23.762 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.762 [main] [30mTRACE[m  - ###############################################
05:26:23.762 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.762 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.762 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.762 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.762 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.762 [main] [30mTRACE[m  - #############################################
05:26:23.762 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.762 [main] [30mTRACE[m  - #############################################

05:26:23.762 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:23.762 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:23.762 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:23.762 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:23.762 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:23.762 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:23.762 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:23.762 [main] [30mTRACE[m  - #########################################################
05:26:23.763 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:23.763 [main] [30mTRACE[m  - #########################################################

05:26:23.763 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:23.763 [main] [30mTRACE[m  - ###################################
05:26:23.763 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:23.763 [main] [30mTRACE[m  - ###################################

05:26:23.763 [main] [30mTRACE[m  - ###########################################################################################################
05:26:23.763 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:23.763 [main] [30mTRACE[m  - ###########################################################################################################
05:26:23.763 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:23.763 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:23.763 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:23.763 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  2
05:26:23.763 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, F, F, D, B, B, F, B]
05:26:23.763 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, F, F, D, B, B, F, B]
05:26:23.763 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
05:26:23.764 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 3, 2]
05:26:23.764 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, =]
05:26:23.764 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:23.766 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, false, false, false]
05:26:23.766 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
05:26:23.766 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
05:26:23.766 [main] [36mDEBUG[m  - ch_NewLetter :                                F
05:26:23.767 [main] [30mTRACE[m  - ###########################################################################################################
05:26:23.767 [main] [30mTRACE[m  - ###########################################################################################################
05:26:23.767 [main] [30mTRACE[m  - ###########################################################################################################

05:26:23.767 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:23.767 [main] [36mDEBUG[m  - Incr√©mentation String() : AFFDBBFB
05:26:23.767 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AFFDBBFB
05:26:23.969 [main] [30mTRACE[m  - ####################################################
05:26:23.969 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:23.970 [main] [30mTRACE[m  - ####################################################
05:26:23.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:23.970 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:23.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, F, F, D, B, B, F, B]
05:26:23.970 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:23.970 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:23.970 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:23.970 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:23.970 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:23.970 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:23.971 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:23.971 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:23.971 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.971 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:23.971 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:23.971 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:23.971 [main] [30mTRACE[m  - ###############################################
05:26:23.971 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.971 [main] [30mTRACE[m  - ###############################################
05:26:23.971 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.971 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.971 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.971 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.972 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.972 [main] [30mTRACE[m  - #############################################
05:26:23.972 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.972 [main] [30mTRACE[m  - #############################################

05:26:23.972 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:23.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:23.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:23.972 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:23.972 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:23.972 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.972 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:23.972 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:23.972 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:23.972 [main] [30mTRACE[m  - ###############################################
05:26:23.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.973 [main] [30mTRACE[m  - ###############################################
05:26:23.973 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.974 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.974 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.974 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.975 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.975 [main] [30mTRACE[m  - #############################################
05:26:23.975 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.975 [main] [30mTRACE[m  - #############################################

05:26:23.975 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:23.975 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:23.976 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:23.977 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 1, 0, 0]
05:26:23.977 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:23.978 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:23.978 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:23.978 [main] [30mTRACE[m  - ###############################################
05:26:23.979 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:23.979 [main] [30mTRACE[m  - ###############################################
05:26:23.979 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:23.979 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:23.979 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.979 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.979 [main] [36mDEBUG[m  - Index de la lettre
05:26:23.979 [main] [30mTRACE[m  - #############################################
05:26:23.979 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:23.979 [main] [30mTRACE[m  - #############################################

05:26:23.980 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:23.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:23.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:23.980 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 1, 0, 0]
05:26:23.980 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:23.980 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.980 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.980 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:23.980 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:23.980 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.981 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:23.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, true, false, true]
05:26:23.981 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:23.981 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.981 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:23.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 0, 1, 0, 1]
05:26:23.981 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:23.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
05:26:23.981 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.981 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:23.981 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:23.981 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.981 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:23.981 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
05:26:23.982 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:23.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:23.982 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.982 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:23.982 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, true]
05:26:23.982 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:23.982 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:23.982 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:23.982 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 2, 0, 1, 0, 1]
05:26:23.982 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:23.982 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 1]
05:26:23.983 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.983 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:23.983 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:23.983 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.983 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:23.983 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 2, 2]
05:26:23.983 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:23.983 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:23.983 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:23.983 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:23.983 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:23.983 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 2, 3]
05:26:23.983 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
05:26:23.984 [main] [30mTRACE[m  - ##################################################
05:26:23.984 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:23.984 [main] [30mTRACE[m  - ##################################################

05:26:23.984 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:24.791 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:24.792 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:24.792 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:24.792 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
05:26:24.792 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:24.997 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:24.998 [main] [30mTRACE[m  - ##############################################################
05:26:24.998 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:24.998 [main] [30mTRACE[m  - ##############################################################
05:26:24.998 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
05:26:24.998 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
05:26:24.998 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
05:26:24.998 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:24.998 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
05:26:24.998 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
05:26:24.998 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
05:26:24.999 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
05:26:24.999 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
05:26:24.999 [main] [30mTRACE[m  - ############################################################
05:26:24.999 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:24.999 [main] [30mTRACE[m  - ############################################################

05:26:24.999 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:25.000 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
05:26:25.000 [main] [30mTRACE[m  - ##########################
05:26:25.000 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:25.000 [main] [30mTRACE[m  - ##########################

05:26:25.000 [main] [30mTRACE[m  - ############################
05:26:25.000 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:25.000 [main] [30mTRACE[m  - ############################
05:26:25.000 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:25.000 [main] [30mTRACE[m  - #####################################
05:26:25.000 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:25.000 [main] [30mTRACE[m  - #####################################
05:26:25.000 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:25.001 [main] [30mTRACE[m  - ###########################################################
05:26:25.001 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:25.001 [main] [30mTRACE[m  - ###########################################################
05:26:25.001 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:25.001 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:25.001 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, F, F, D, B, B, F, B]
05:26:25.001 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, false, false]
05:26:25.001 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:25.001 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:25.001 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:25.001 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:25.001 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:25.001 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:25.001 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
05:26:25.001 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
05:26:25.001 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:25.002 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:25.002 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:25.002 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:25.002 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
05:26:25.003 [main] [30mTRACE[m  - ###############################################
05:26:25.003 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:25.003 [main] [30mTRACE[m  - ###############################################
05:26:25.003 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:25.003 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:25.003 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.003 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.003 [main] [36mDEBUG[m  - Index de la lettre
05:26:25.003 [main] [30mTRACE[m  - #############################################
05:26:25.003 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:25.004 [main] [30mTRACE[m  - #############################################

05:26:25.004 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:25.004 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:25.004 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:25.004 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:25.004 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:25.004 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:25.004 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:25.004 [main] [30mTRACE[m  - #########################################################
05:26:25.004 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:25.004 [main] [30mTRACE[m  - #########################################################

05:26:25.004 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:25.004 [main] [30mTRACE[m  - ###################################
05:26:25.004 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:25.004 [main] [30mTRACE[m  - ###################################

05:26:25.005 [main] [30mTRACE[m  - ###########################################################################################################
05:26:25.005 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:25.005 [main] [30mTRACE[m  - ###########################################################################################################
05:26:25.005 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:25.005 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:25.005 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:25.005 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  3
05:26:25.005 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, A, F, D, B, B, F, B]
05:26:25.005 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, A, F, D, B, B, F, B]
05:26:25.005 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 3, 2]
05:26:25.006 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 2, 3]
05:26:25.006 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, ‚â†]
05:26:25.006 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:25.009 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, false, false, false]
05:26:25.009 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
05:26:25.009 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
05:26:25.009 [main] [36mDEBUG[m  - ch_NewLetter :                                A
05:26:25.009 [main] [30mTRACE[m  - ###########################################################################################################
05:26:25.009 [main] [30mTRACE[m  - ###########################################################################################################
05:26:25.010 [main] [30mTRACE[m  - ###########################################################################################################

05:26:25.010 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:25.010 [main] [36mDEBUG[m  - Incr√©mentation String() : AAFDBBFB
05:26:25.010 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AAFDBBFB
05:26:25.212 [main] [30mTRACE[m  - ####################################################
05:26:25.213 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:25.213 [main] [30mTRACE[m  - ####################################################
05:26:25.214 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:25.214 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:25.214 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:25.215 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, F, D, B, B, F, B]
05:26:25.215 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:25.215 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:25.215 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:25.215 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:25.215 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:25.215 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:25.216 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:25.216 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:25.216 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.217 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:25.217 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:25.218 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:25.218 [main] [30mTRACE[m  - ###############################################
05:26:25.218 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:25.219 [main] [30mTRACE[m  - ###############################################
05:26:25.219 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:25.219 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:25.219 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.219 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.219 [main] [36mDEBUG[m  - Index de la lettre
05:26:25.219 [main] [30mTRACE[m  - #############################################
05:26:25.219 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:25.219 [main] [30mTRACE[m  - #############################################

05:26:25.219 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:25.219 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:25.219 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:25.219 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:25.220 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:25.220 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.220 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:25.220 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:25.220 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:25.220 [main] [30mTRACE[m  - ###############################################
05:26:25.220 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:25.220 [main] [30mTRACE[m  - ###############################################
05:26:25.220 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:25.220 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:25.220 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.220 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.220 [main] [36mDEBUG[m  - Index de la lettre
05:26:25.220 [main] [30mTRACE[m  - #############################################
05:26:25.220 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:25.220 [main] [30mTRACE[m  - #############################################

05:26:25.220 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:25.220 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:25.221 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:25.221 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 1, 0, 0]
05:26:25.221 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:25.221 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:25.221 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:25.221 [main] [30mTRACE[m  - ###############################################
05:26:25.221 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:25.221 [main] [30mTRACE[m  - ###############################################
05:26:25.221 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:25.221 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:25.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.221 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.221 [main] [36mDEBUG[m  - Index de la lettre
05:26:25.221 [main] [30mTRACE[m  - #############################################
05:26:25.221 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:25.221 [main] [30mTRACE[m  - #############################################

05:26:25.221 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:25.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:25.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:25.222 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 1, 0, 0]
05:26:25.222 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:25.222 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.222 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:25.222 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:25.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:25.222 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.222 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:25.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, true, true]
05:26:25.223 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
05:26:25.223 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.223 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:25.223 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 1, 0, 0]
05:26:25.223 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:25.223 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
05:26:25.223 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:25.223 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:25.223 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:25.223 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.223 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:25.223 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, true]
05:26:25.223 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:25.223 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.223 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:25.223 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 1, 0, 1]
05:26:25.223 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:25.223 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 0]
05:26:25.224 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:25.224 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:25.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:25.224 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.224 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:25.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, true]
05:26:25.224 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:25.224 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:25.224 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:25.224 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 1, 0, 1]
05:26:25.224 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:25.224 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 0]
05:26:25.224 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:25.224 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:25.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:25.224 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.224 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:25.224 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 1]
05:26:25.224 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:25.224 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:25.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:25.224 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:25.225 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:25.225 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 3, 2]
05:26:25.225 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
05:26:25.225 [main] [30mTRACE[m  - ##################################################
05:26:25.225 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:25.225 [main] [30mTRACE[m  - ##################################################

05:26:25.225 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:26.038 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:26.038 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:26.038 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:26.038 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
05:26:26.038 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:26.240 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:26.240 [main] [30mTRACE[m  - ##############################################################
05:26:26.240 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:26.240 [main] [30mTRACE[m  - ##############################################################
05:26:26.240 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
05:26:26.240 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 3, 2]
05:26:26.240 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 3, 2]
05:26:26.240 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:26.240 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
05:26:26.241 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
05:26:26.241 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
05:26:26.241 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
05:26:26.241 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
05:26:26.242 [main] [30mTRACE[m  - ############################################################
05:26:26.242 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:26.242 [main] [30mTRACE[m  - ############################################################

05:26:26.242 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:26.242 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
05:26:26.242 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
05:26:26.242 [main] [30mTRACE[m  - ################################################
05:26:26.242 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
05:26:26.242 [main] [30mTRACE[m  - ################################################
05:26:26.242 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:26.242 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 1
05:26:26.242 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : A
05:26:26.243 [main] [30mTRACE[m  - ###############################################
05:26:26.243 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:26.243 [main] [30mTRACE[m  - ###############################################
05:26:26.243 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:26.243 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:26.243 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.243 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.243 [main] [36mDEBUG[m  - Index de la lettre
05:26:26.243 [main] [30mTRACE[m  - #############################################
05:26:26.243 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:26.243 [main] [30mTRACE[m  - #############################################

05:26:26.243 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 0
05:26:26.243 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
05:26:26.243 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
05:26:26.247 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:26.247 [main] [30mTRACE[m  - ##############################################
05:26:26.247 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
05:26:26.247 [main] [30mTRACE[m  - ##############################################
05:26:26.247 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
05:26:26.248 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:26.248 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.248 [main] [36mDEBUG[m  - (int) Nombre de tours : 6
05:26:26.249 [main] [30mTRACE[m  - ############################################
05:26:26.249 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
05:26:26.249 [main] [30mTRACE[m  - ############################################

05:26:26.249 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 6
05:26:26.249 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
05:26:26.249 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
05:26:26.250 [main] [30mTRACE[m  - ########################################################
05:26:26.250 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
05:26:26.250 [main] [30mTRACE[m  - ########################################################
05:26:26.250 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
05:26:26.250 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:26.250 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 1
05:26:26.250 [main] [32mINFO [m  - FOR - Chaque unit√©s
05:26:26.250 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
05:26:26.250 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 2
05:26:26.250 [main] [30mTRACE[m  - ######################################################
05:26:26.251 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
05:26:26.251 [main] [30mTRACE[m  - ######################################################

05:26:26.251 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 2
05:26:26.251 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
05:26:26.251 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, F, D, B, B, F, B]
05:26:26.252 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, D, B, B, F, B]
05:26:26.252 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:26.252 [main] [36mDEBUG[m  - Incr√©mentation String() : AAADBBFB
05:26:26.252 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAADBBFB
05:26:26.455 [main] [30mTRACE[m  - ####################################################
05:26:26.456 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:26.456 [main] [30mTRACE[m  - ####################################################
05:26:26.456 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:26.456 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:26.456 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:26.456 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, D, B, B, F, B]
05:26:26.456 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:26.456 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:26.456 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:26.456 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:26.456 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:26.456 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:26.456 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:26.456 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:26.456 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.456 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:26.457 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:26.457 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:26.457 [main] [30mTRACE[m  - ###############################################
05:26:26.457 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:26.457 [main] [30mTRACE[m  - ###############################################
05:26:26.457 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:26.457 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:26.457 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.457 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.457 [main] [36mDEBUG[m  - Index de la lettre
05:26:26.457 [main] [30mTRACE[m  - #############################################
05:26:26.457 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:26.457 [main] [30mTRACE[m  - #############################################

05:26:26.457 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:26.457 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:26.457 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:26.457 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:26.457 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:26.457 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.457 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:26.457 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:26.457 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:26.457 [main] [30mTRACE[m  - ###############################################
05:26:26.457 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:26.457 [main] [30mTRACE[m  - ###############################################
05:26:26.457 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:26.457 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:26.457 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.457 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.458 [main] [36mDEBUG[m  - Index de la lettre
05:26:26.458 [main] [30mTRACE[m  - #############################################
05:26:26.458 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:26.458 [main] [30mTRACE[m  - #############################################

05:26:26.458 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:26.458 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:26.458 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, false]
05:26:26.458 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 1, 0, 0]
05:26:26.458 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:26.458 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:26.458 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:26.458 [main] [30mTRACE[m  - ###############################################
05:26:26.458 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:26.458 [main] [30mTRACE[m  - ###############################################
05:26:26.458 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:26.458 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:26.458 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.458 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.458 [main] [36mDEBUG[m  - Index de la lettre
05:26:26.458 [main] [30mTRACE[m  - #############################################
05:26:26.458 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:26.458 [main] [30mTRACE[m  - #############################################

05:26:26.458 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:26.458 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:26.458 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, false, true]
05:26:26.458 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 1, 0, 0]
05:26:26.458 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:26.459 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.459 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:26.459 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:26.459 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, true]
05:26:26.459 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.459 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:26.459 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, false, true, true]
05:26:26.459 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
05:26:26.459 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.459 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:26.459 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 1, 0, 0]
05:26:26.459 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:26.459 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
05:26:26.459 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:26.459 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:26.459 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:26.459 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.459 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:26.459 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
05:26:26.459 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:26.459 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:26.459 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:26.459 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.459 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:26.460 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, true, true]
05:26:26.460 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:26.460 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.460 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:26.460 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 1, 0, 0]
05:26:26.460 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:26.460 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 1]
05:26:26.460 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:26.460 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:26.460 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:26.460 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.460 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:26.460 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 2, 2]
05:26:26.460 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:26.460 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:26.460 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:26.460 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:26.461 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:26.461 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, true]
05:26:26.461 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:26.461 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:26.461 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:26.461 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 1, 0, 1]
05:26:26.461 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:26.461 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 3, 2]
05:26:26.461 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 3, 2]
05:26:26.461 [main] [30mTRACE[m  - ##################################################
05:26:26.461 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:26.461 [main] [30mTRACE[m  - ##################################################

05:26:26.461 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:27.273 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:27.273 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:27.273 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:27.274 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
05:26:27.274 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:27.476 [main] [30mTRACE[m  - ##############################################################
05:26:27.477 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:27.477 [main] [30mTRACE[m  - ##############################################################
05:26:27.477 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
05:26:27.477 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 3, 2]
05:26:27.477 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 3, 2]
05:26:27.477 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:27.477 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:27.477 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:27.477 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:27.477 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:27.477 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:27.478 [main] [30mTRACE[m  - ############################################################
05:26:27.478 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:27.478 [main] [30mTRACE[m  - ############################################################

05:26:27.478 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:27.478 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:27.478 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
05:26:27.478 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:27.478 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
05:26:27.481 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
05:26:27.481 [main] [30mTRACE[m  - ########################################################
05:26:27.481 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
05:26:27.481 [main] [30mTRACE[m  - ########################################################
05:26:27.481 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
05:26:27.481 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:27.481 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
05:26:27.481 [main] [32mINFO [m  - FOR - Chaque unit√©s
05:26:27.481 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
05:26:27.481 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
05:26:27.481 [main] [30mTRACE[m  - ######################################################
05:26:27.481 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
05:26:27.481 [main] [30mTRACE[m  - ######################################################

05:26:27.481 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
05:26:27.481 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
05:26:27.481 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, D, B, B, F, B]
05:26:27.482 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, B, B, F, B]
05:26:27.482 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:27.482 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAABBFB
05:26:27.482 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAABBFB
05:26:27.684 [main] [30mTRACE[m  - ####################################################
05:26:27.685 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:27.685 [main] [30mTRACE[m  - ####################################################
05:26:27.685 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:27.685 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:27.685 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:27.685 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, B, B, F, B]
05:26:27.685 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:27.685 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:27.685 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:27.685 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:27.686 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:27.686 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:27.687 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:27.687 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:27.687 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.687 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:27.687 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:27.687 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:27.687 [main] [30mTRACE[m  - ###############################################
05:26:27.687 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:27.687 [main] [30mTRACE[m  - ###############################################
05:26:27.687 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:27.688 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:27.688 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.688 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.688 [main] [36mDEBUG[m  - Index de la lettre
05:26:27.688 [main] [30mTRACE[m  - #############################################
05:26:27.688 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:27.688 [main] [30mTRACE[m  - #############################################

05:26:27.688 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:27.688 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:27.689 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:27.689 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:27.689 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:27.689 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.689 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:27.690 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:27.691 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:27.691 [main] [30mTRACE[m  - ###############################################
05:26:27.692 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:27.692 [main] [30mTRACE[m  - ###############################################
05:26:27.692 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:27.693 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:27.693 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.693 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.693 [main] [36mDEBUG[m  - Index de la lettre
05:26:27.693 [main] [30mTRACE[m  - #############################################
05:26:27.693 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:27.693 [main] [30mTRACE[m  - #############################################

05:26:27.693 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:27.693 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:27.693 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:27.693 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:27.693 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:27.693 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.693 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.693 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:27.693 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, true]
05:26:27.693 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.693 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:27.693 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, true]
05:26:27.693 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
05:26:27.693 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.694 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
05:26:27.694 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:27.694 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
05:26:27.694 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:27.694 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, true]
05:26:27.694 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.694 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:27.694 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
05:26:27.694 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:27.694 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:27.694 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.694 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:27.694 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
05:26:27.694 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:27.694 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:27.694 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.694 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:27.694 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:27.694 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:27.694 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.694 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
05:26:27.694 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:27.694 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 2]
05:26:27.694 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.694 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:27.695 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:27.695 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.695 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:27.695 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 3]
05:26:27.695 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:27.695 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:27.695 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:27.695 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:27.695 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:27.695 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
05:26:27.695 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:27.695 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:27.695 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:27.695 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 1]
05:26:27.695 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:27.695 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
05:26:27.695 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
05:26:27.695 [main] [30mTRACE[m  - ##################################################
05:26:27.695 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:27.695 [main] [30mTRACE[m  - ##################################################

05:26:27.695 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:28.509 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:28.509 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:28.509 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:28.509 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 6
05:26:28.509 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:28.713 [main] [30mTRACE[m  - ##############################################################
05:26:28.714 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:28.714 [main] [30mTRACE[m  - ##############################################################
05:26:28.714 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 3, 2]
05:26:28.714 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
05:26:28.715 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
05:26:28.716 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
05:26:28.716 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:28.716 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
05:26:28.716 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
05:26:28.716 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
05:26:28.716 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
05:26:28.716 [main] [30mTRACE[m  - ############################################################
05:26:28.716 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:28.716 [main] [30mTRACE[m  - ############################################################

05:26:28.716 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:28.716 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
05:26:28.716 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
05:26:28.716 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:28.716 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
05:26:28.720 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
05:26:28.720 [main] [30mTRACE[m  - ########################################################
05:26:28.720 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
05:26:28.720 [main] [30mTRACE[m  - ########################################################
05:26:28.720 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
05:26:28.720 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:28.721 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 3
05:26:28.721 [main] [32mINFO [m  - FOR - Chaque unit√©s
05:26:28.721 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
05:26:28.721 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 4
05:26:28.721 [main] [30mTRACE[m  - ######################################################
05:26:28.722 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
05:26:28.722 [main] [30mTRACE[m  - ######################################################

05:26:28.722 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 4
05:26:28.723 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
05:26:28.723 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, B, B, F, B]
05:26:28.723 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, B, F, B]
05:26:28.723 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:28.724 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAABFB
05:26:28.724 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAABFB
05:26:28.927 [main] [30mTRACE[m  - ####################################################
05:26:28.928 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:28.928 [main] [30mTRACE[m  - ####################################################
05:26:28.929 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:28.930 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:28.930 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:28.930 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, B, F, B]
05:26:28.931 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:28.931 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:28.931 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:28.932 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:28.932 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:28.932 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:28.932 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:28.932 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:28.932 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.932 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:28.933 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:28.933 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:28.933 [main] [30mTRACE[m  - ###############################################
05:26:28.933 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:28.934 [main] [30mTRACE[m  - ###############################################
05:26:28.934 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:28.934 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:28.934 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.934 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.934 [main] [36mDEBUG[m  - Index de la lettre
05:26:28.934 [main] [30mTRACE[m  - #############################################
05:26:28.934 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:28.934 [main] [30mTRACE[m  - #############################################

05:26:28.934 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:28.934 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:28.934 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:28.934 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:28.934 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:28.934 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.934 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:28.934 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:28.935 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:28.935 [main] [30mTRACE[m  - ###############################################
05:26:28.935 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:28.935 [main] [30mTRACE[m  - ###############################################
05:26:28.935 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:28.935 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:28.935 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.935 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.935 [main] [36mDEBUG[m  - Index de la lettre
05:26:28.935 [main] [30mTRACE[m  - #############################################
05:26:28.935 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:28.935 [main] [30mTRACE[m  - #############################################

05:26:28.935 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:28.935 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:28.935 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:28.935 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:28.935 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:28.935 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.935 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.935 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:28.935 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, true]
05:26:28.935 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.935 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:28.935 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, true]
05:26:28.935 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
05:26:28.936 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.936 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:28.936 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
05:26:28.936 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:28.936 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
05:26:28.936 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.936 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:28.936 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, true]
05:26:28.936 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.936 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:28.936 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
05:26:28.936 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.936 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:28.936 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:28.936 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.936 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:28.936 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
05:26:28.936 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.936 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:28.937 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:28.937 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.937 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:28.937 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
05:26:28.937 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.937 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:28.938 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:28.938 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.938 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:28.938 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:28.938 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
05:26:28.938 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.938 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:28.938 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 0]
05:26:28.938 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:28.938 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 3]
05:26:28.938 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:28.938 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:28.938 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:28.938 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:28.938 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:28.938 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, true]
05:26:28.938 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:28.938 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:28.939 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:28.939 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 2, 0, 0, 0, 1]
05:26:28.939 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:28.939 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
05:26:28.939 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
05:26:28.939 [main] [30mTRACE[m  - ##################################################
05:26:28.939 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:28.939 [main] [30mTRACE[m  - ##################################################

05:26:28.939 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:29.749 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:29.749 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:29.749 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:29.749 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 7
05:26:29.749 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:29.955 [main] [30mTRACE[m  - ##############################################################
05:26:29.955 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:29.955 [main] [30mTRACE[m  - ##############################################################
05:26:29.955 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
05:26:29.955 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
05:26:29.956 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
05:26:29.957 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:29.957 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:29.957 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:29.957 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:29.957 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:29.957 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:29.957 [main] [30mTRACE[m  - ############################################################
05:26:29.957 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:29.957 [main] [30mTRACE[m  - ############################################################

05:26:29.958 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:29.958 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:29.958 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
05:26:29.958 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:29.958 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
05:26:29.960 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
05:26:29.960 [main] [30mTRACE[m  - ########################################################
05:26:29.960 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
05:26:29.960 [main] [30mTRACE[m  - ########################################################
05:26:29.960 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
05:26:29.960 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:29.960 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 4
05:26:29.961 [main] [32mINFO [m  - FOR - Chaque unit√©s
05:26:29.961 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
05:26:29.961 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 5
05:26:29.962 [main] [30mTRACE[m  - ######################################################
05:26:29.962 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
05:26:29.962 [main] [30mTRACE[m  - ######################################################

05:26:29.962 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 5
05:26:29.962 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
05:26:29.962 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, B, F, B]
05:26:29.962 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, F, B]
05:26:29.962 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:29.963 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAFB
05:26:29.963 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAAAFB
05:26:30.164 [main] [30mTRACE[m  - ####################################################
05:26:30.164 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:30.164 [main] [30mTRACE[m  - ####################################################
05:26:30.164 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:30.164 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:30.164 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:30.165 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, F, B]
05:26:30.165 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:30.165 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:30.165 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:30.165 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:30.165 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:30.165 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:30.165 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:30.166 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:30.166 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.167 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:30.167 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:30.167 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.167 [main] [30mTRACE[m  - ###############################################
05:26:30.167 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:30.167 [main] [30mTRACE[m  - ###############################################
05:26:30.167 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:30.167 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:30.167 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.168 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.168 [main] [36mDEBUG[m  - Index de la lettre
05:26:30.168 [main] [30mTRACE[m  - #############################################
05:26:30.168 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:30.168 [main] [30mTRACE[m  - #############################################

05:26:30.168 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:30.168 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:30.168 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:30.168 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:30.168 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:30.168 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.168 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:30.168 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:30.169 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:30.169 [main] [30mTRACE[m  - ###############################################
05:26:30.169 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:30.169 [main] [30mTRACE[m  - ###############################################
05:26:30.169 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:30.169 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:30.169 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.169 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.169 [main] [36mDEBUG[m  - Index de la lettre
05:26:30.169 [main] [30mTRACE[m  - #############################################
05:26:30.169 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:30.169 [main] [30mTRACE[m  - #############################################

05:26:30.169 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:30.169 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:30.169 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, true]
05:26:30.169 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:30.169 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:30.170 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.170 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.170 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.170 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, true]
05:26:30.170 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.170 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:30.170 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, true]
05:26:30.170 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
05:26:30.170 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.170 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:30.170 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 0]
05:26:30.170 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:30.171 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
05:26:30.171 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.171 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.171 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, true]
05:26:30.172 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.172 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:30.172 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
05:26:30.172 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.172 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.172 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, true]
05:26:30.172 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.172 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:30.172 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
05:26:30.172 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.172 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.172 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, true]
05:26:30.172 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.172 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:30.173 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
05:26:30.173 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.173 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:30.173 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
05:26:30.173 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.174 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:30.174 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 4]
05:26:30.174 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:30.174 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
05:26:30.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:30.175 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:30.175 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
05:26:30.175 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, true]
05:26:30.176 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
05:26:30.176 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:30.176 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
05:26:30.176 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [2, 1, 0, 0, 0, 1]
05:26:30.176 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
05:26:30.176 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 4]
05:26:30.176 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 2, 4]
05:26:30.176 [main] [30mTRACE[m  - ##################################################
05:26:30.176 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:30.176 [main] [30mTRACE[m  - ##################################################

05:26:30.176 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:30.988 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:30.988 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:30.988 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:30.989 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 8
05:26:30.989 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:31.194 [main] [30mTRACE[m  - ##############################################################
05:26:31.194 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:31.194 [main] [30mTRACE[m  - ##############################################################
05:26:31.194 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
05:26:31.194 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 2, 4]
05:26:31.194 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 2, 4]
05:26:31.194 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:31.194 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
05:26:31.194 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
05:26:31.194 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
05:26:31.194 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
05:26:31.195 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
05:26:31.195 [main] [30mTRACE[m  - ############################################################
05:26:31.195 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:31.195 [main] [30mTRACE[m  - ############################################################

05:26:31.195 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:31.195 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
05:26:31.195 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
05:26:31.195 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
05:26:31.195 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
05:26:31.196 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
05:26:31.196 [main] [30mTRACE[m  - ########################################################
05:26:31.196 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
05:26:31.196 [main] [30mTRACE[m  - ########################################################
05:26:31.197 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
05:26:31.197 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:31.197 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 5
05:26:31.197 [main] [32mINFO [m  - FOR - Chaque unit√©s
05:26:31.197 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
05:26:31.197 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 6
05:26:31.197 [main] [30mTRACE[m  - ######################################################
05:26:31.197 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
05:26:31.197 [main] [30mTRACE[m  - ######################################################

05:26:31.197 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 6
05:26:31.197 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
05:26:31.197 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, F, B]
05:26:31.197 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, B]
05:26:31.197 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
05:26:31.198 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAAAAB
05:26:31.198 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAAAAB
05:26:31.400 [main] [30mTRACE[m  - ####################################################
05:26:31.401 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:31.401 [main] [30mTRACE[m  - ####################################################
05:26:31.401 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:31.401 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:31.401 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:31.401 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, B]
05:26:31.401 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:31.402 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:31.402 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:31.402 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, false, false]
05:26:31.402 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:31.402 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:31.403 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:31.403 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:31.403 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.403 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:31.403 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:31.403 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.403 [main] [30mTRACE[m  - ###############################################
05:26:31.403 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:31.403 [main] [30mTRACE[m  - ###############################################
05:26:31.403 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:31.403 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:31.403 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.403 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.403 [main] [36mDEBUG[m  - Index de la lettre
05:26:31.403 [main] [30mTRACE[m  - #############################################
05:26:31.403 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:31.404 [main] [30mTRACE[m  - #############################################

05:26:31.404 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:31.404 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:31.404 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:31.404 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:31.404 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:31.404 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.404 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:31.405 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:31.406 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
05:26:31.406 [main] [30mTRACE[m  - ###############################################
05:26:31.407 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:31.407 [main] [30mTRACE[m  - ###############################################
05:26:31.407 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:31.408 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:31.408 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.408 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.408 [main] [36mDEBUG[m  - Index de la lettre
05:26:31.408 [main] [30mTRACE[m  - #############################################
05:26:31.408 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:31.408 [main] [30mTRACE[m  - #############################################

05:26:31.408 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
05:26:31.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, false]
05:26:31.408 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, false]
05:26:31.408 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 0, 0, 0, 0, 0]
05:26:31.408 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:31.408 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:31.408 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:31.408 [main] [30mTRACE[m  - ###############################################
05:26:31.408 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:31.408 [main] [30mTRACE[m  - ###############################################
05:26:31.408 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:31.408 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:31.408 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.408 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:31.408 [main] [36mDEBUG[m  - Index de la lettre
05:26:31.409 [main] [30mTRACE[m  - #############################################
05:26:31.409 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:31.409 [main] [30mTRACE[m  - #############################################

05:26:31.409 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:31.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, true]
05:26:31.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, true]
05:26:31.409 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
05:26:31.409 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:31.409 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.409 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:31.409 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:31.409 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.409 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:31.409 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 1]
05:26:31.409 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:31.409 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.409 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:31.409 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.409 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:31.409 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 2]
05:26:31.409 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:31.410 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.410 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:31.410 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:31.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 3]
05:26:31.410 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:31.410 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.410 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:31.410 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:31.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 4]
05:26:31.410 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:31.410 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:31.410 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:31.410 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:31.410 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:31.410 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 5]
05:26:31.410 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 0, 5]
05:26:31.410 [main] [30mTRACE[m  - ##################################################
05:26:31.410 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:31.410 [main] [30mTRACE[m  - ##################################################

05:26:31.410 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:32.222 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:32.223 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:32.223 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:32.223 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 9
05:26:32.223 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:32.428 [main] [30mTRACE[m  - ##############################################################
05:26:32.428 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:32.428 [main] [30mTRACE[m  - ##############################################################
05:26:32.428 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 2, 4]
05:26:32.428 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 0, 5]
05:26:32.428 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 0, 5]
05:26:32.428 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
05:26:32.428 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -2
05:26:32.428 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
05:26:32.428 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente && Plus une lettre pr√©sente mais √† la mauvaise place
05:26:32.429 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
05:26:32.429 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
05:26:32.429 [main] [30mTRACE[m  - ############################################################
05:26:32.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:32.429 [main] [30mTRACE[m  - ############################################################

05:26:32.429 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:32.429 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
05:26:32.429 [main] [32mINFO [m  - IF - "=" appara√Æt
05:26:32.429 [main] [30mTRACE[m  - ##############################################
05:26:32.429 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
05:26:32.429 [main] [30mTRACE[m  - ##############################################
05:26:32.429 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
05:26:32.429 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:32.429 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:32.429 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
05:26:32.430 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
05:26:32.430 [main] [30mTRACE[m  - ###############################################
05:26:32.430 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.430 [main] [30mTRACE[m  - ###############################################
05:26:32.430 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.430 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.430 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.430 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.430 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.430 [main] [30mTRACE[m  - #############################################
05:26:32.430 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.430 [main] [30mTRACE[m  - #############################################

05:26:32.430 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:32.430 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.430 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
05:26:32.430 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.430 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:32.430 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:32.430 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.430 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:32.430 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:32.431 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.431 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:32.431 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:32.431 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.431 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:32.431 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:32.431 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.431 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:32.431 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:32.431 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
05:26:32.431 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
05:26:32.431 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, true, false]
05:26:32.431 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
05:26:32.431 [main] [30mTRACE[m  - ############################################
05:26:32.431 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
05:26:32.431 [main] [30mTRACE[m  - ############################################

05:26:32.431 [main] [32mINFO [m  - Lancement √©galit√© positive
05:26:32.431 [main] [30mTRACE[m  - ##############################################
05:26:32.432 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
05:26:32.432 [main] [30mTRACE[m  - ##############################################

05:26:32.432 [main] [32mINFO [m  - Lancement diff√©rence positive
05:26:32.432 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
05:26:32.432 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
05:26:32.432 [main] [30mTRACE[m  - ##########################
05:26:32.432 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:32.432 [main] [30mTRACE[m  - ##########################

05:26:32.432 [main] [30mTRACE[m  - ############################
05:26:32.432 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:32.432 [main] [30mTRACE[m  - ############################
05:26:32.432 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:32.432 [main] [30mTRACE[m  - #####################################
05:26:32.432 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:32.432 [main] [30mTRACE[m  - #####################################
05:26:32.432 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:32.432 [main] [30mTRACE[m  - ###########################################################
05:26:32.432 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:32.432 [main] [30mTRACE[m  - ###########################################################
05:26:32.432 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:32.432 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:32.432 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, A, A, A, B]
05:26:32.432 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, false, false, false, false, false, true, false]
05:26:32.432 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:32.432 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:32.433 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:32.433 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:32.433 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:32.433 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:32.433 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 1
05:26:32.433 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:32.433 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:32.433 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:32.433 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:32.433 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:32.433 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:32.433 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:32.433 [main] [30mTRACE[m  - ###############################################
05:26:32.433 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.433 [main] [30mTRACE[m  - ###############################################
05:26:32.433 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.433 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.433 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.433 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.433 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.433 [main] [30mTRACE[m  - #############################################
05:26:32.433 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.433 [main] [30mTRACE[m  - #############################################

05:26:32.433 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:32.433 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:32.433 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:32.434 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:32.434 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:32.434 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:32.434 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:32.434 [main] [30mTRACE[m  - #########################################################
05:26:32.434 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:32.434 [main] [30mTRACE[m  - #########################################################

05:26:32.434 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:32.434 [main] [30mTRACE[m  - ###################################
05:26:32.434 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:32.434 [main] [30mTRACE[m  - ###################################

05:26:32.434 [main] [30mTRACE[m  - ###########################################################################################################
05:26:32.434 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:32.434 [main] [30mTRACE[m  - ###########################################################################################################
05:26:32.434 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:32.434 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:32.434 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:32.434 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  9
05:26:32.434 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, A, A, A, A, A, B]
05:26:32.434 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, A, A, A, A, A, B]
05:26:32.434 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 2, 4]
05:26:32.434 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 0, 5]
05:26:32.434 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
05:26:32.434 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:32.436 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, false, false, false, false, false, true, false]
05:26:32.436 [main] [36mDEBUG[m  - int_ReplacementPosition :                     1
05:26:32.436 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:32.436 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:32.436 [main] [30mTRACE[m  - ###########################################################################################################
05:26:32.436 [main] [30mTRACE[m  - ###########################################################################################################
05:26:32.436 [main] [30mTRACE[m  - ###########################################################################################################

05:26:32.436 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:32.436 [main] [36mDEBUG[m  - Incr√©mentation String() : ABAAAAAB
05:26:32.436 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABAAAAAB
05:26:32.639 [main] [30mTRACE[m  - ####################################################
05:26:32.640 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:32.640 [main] [30mTRACE[m  - ####################################################
05:26:32.640 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.640 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:32.640 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:32.640 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, B]
05:26:32.640 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:32.640 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:32.641 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:32.641 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, false, false, false, false, false, true, false]
05:26:32.641 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:32.641 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:32.641 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:32.641 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:32.641 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.641 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:32.641 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:32.641 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.641 [main] [30mTRACE[m  - ###############################################
05:26:32.641 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.641 [main] [30mTRACE[m  - ###############################################
05:26:32.641 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.641 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.641 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.641 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.641 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.642 [main] [30mTRACE[m  - #############################################
05:26:32.642 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.642 [main] [30mTRACE[m  - #############################################

05:26:32.642 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:32.642 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:32.642 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:32.642 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:32.642 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:32.642 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:32.642 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.642 [main] [30mTRACE[m  - ###############################################
05:26:32.642 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.642 [main] [30mTRACE[m  - ###############################################
05:26:32.642 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.642 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.642 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.643 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.643 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.643 [main] [30mTRACE[m  - #############################################
05:26:32.644 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.644 [main] [30mTRACE[m  - #############################################

05:26:32.644 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:32.645 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, false]
05:26:32.645 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, true, false]
05:26:32.645 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 0, 0, 0, 0, 0]
05:26:32.645 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:32.645 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.645 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:32.646 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:32.646 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:32.646 [main] [30mTRACE[m  - ###############################################
05:26:32.646 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.646 [main] [30mTRACE[m  - ###############################################
05:26:32.646 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.646 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.647 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.647 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.648 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.648 [main] [30mTRACE[m  - #############################################
05:26:32.648 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.649 [main] [30mTRACE[m  - #############################################

05:26:32.649 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:32.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:32.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:32.649 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
05:26:32.649 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:32.649 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:32.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:32.649 [main] [30mTRACE[m  - ###############################################
05:26:32.649 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:32.649 [main] [30mTRACE[m  - ###############################################
05:26:32.649 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:32.649 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:32.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:32.650 [main] [36mDEBUG[m  - Index de la lettre
05:26:32.650 [main] [30mTRACE[m  - #############################################
05:26:32.650 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:32.650 [main] [30mTRACE[m  - #############################################

05:26:32.650 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:32.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:32.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:32.650 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
05:26:32.650 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:32.650 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:32.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:32.650 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.650 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:32.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
05:26:32.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:32.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:32.650 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.650 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:32.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
05:26:32.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:32.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:32.651 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.651 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:32.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
05:26:32.651 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:32.651 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:32.651 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:32.651 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:32.651 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:32.651 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 4]
05:26:32.651 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 0, 4]
05:26:32.651 [main] [30mTRACE[m  - ##################################################
05:26:32.651 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:32.651 [main] [30mTRACE[m  - ##################################################

05:26:32.651 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:33.466 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:33.466 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:33.466 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:33.466 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 10
05:26:33.466 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:33.670 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:33.670 [main] [30mTRACE[m  - ##############################################################
05:26:33.670 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:33.670 [main] [30mTRACE[m  - ##############################################################
05:26:33.670 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 0, 5]
05:26:33.670 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 0, 4]
05:26:33.671 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 0, 4]
05:26:33.671 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
05:26:33.671 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:33.671 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
05:26:33.671 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
05:26:33.671 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
05:26:33.671 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
05:26:33.671 [main] [30mTRACE[m  - ############################################################
05:26:33.671 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:33.671 [main] [30mTRACE[m  - ############################################################

05:26:33.671 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:33.671 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
05:26:33.671 [main] [32mINFO [m  - IF - "=" appara√Æt
05:26:33.671 [main] [30mTRACE[m  - ##############################################
05:26:33.672 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
05:26:33.672 [main] [30mTRACE[m  - ##############################################
05:26:33.672 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
05:26:33.672 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:33.672 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:33.672 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
05:26:33.672 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
05:26:33.672 [main] [30mTRACE[m  - ###############################################
05:26:33.672 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.672 [main] [30mTRACE[m  - ###############################################
05:26:33.672 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.672 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.672 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.672 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.672 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.672 [main] [30mTRACE[m  - #############################################
05:26:33.672 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.672 [main] [30mTRACE[m  - #############################################

05:26:33.672 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:33.672 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.672 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:33.672 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:33.672 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.672 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
05:26:33.672 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.672 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:33.673 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:33.673 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.673 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:33.673 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:33.673 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.673 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:33.673 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:33.673 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.673 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:33.673 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:33.673 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
05:26:33.673 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
05:26:33.674 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
05:26:33.674 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
05:26:33.674 [main] [30mTRACE[m  - ############################################
05:26:33.674 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
05:26:33.674 [main] [30mTRACE[m  - ############################################

05:26:33.674 [main] [32mINFO [m  - Lancement √©galit√© positive
05:26:33.675 [main] [30mTRACE[m  - ##########################
05:26:33.675 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:33.675 [main] [30mTRACE[m  - ##########################

05:26:33.675 [main] [30mTRACE[m  - ############################
05:26:33.675 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:33.675 [main] [30mTRACE[m  - ############################
05:26:33.675 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:33.675 [main] [30mTRACE[m  - #####################################
05:26:33.676 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:33.676 [main] [30mTRACE[m  - #####################################
05:26:33.676 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:33.676 [main] [30mTRACE[m  - ###########################################################
05:26:33.677 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:33.677 [main] [30mTRACE[m  - ###########################################################
05:26:33.678 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:33.678 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:33.679 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, A, A, A, A, A, B]
05:26:33.679 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
05:26:33.679 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:33.680 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:33.680 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:33.680 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:33.680 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:33.680 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:33.680 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:33.680 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
05:26:33.681 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:33.681 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:33.681 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:33.681 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:33.681 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:33.681 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:33.681 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:33.681 [main] [30mTRACE[m  - ###############################################
05:26:33.681 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.681 [main] [30mTRACE[m  - ###############################################
05:26:33.681 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.681 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.681 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.681 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.682 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.682 [main] [30mTRACE[m  - #############################################
05:26:33.682 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.682 [main] [30mTRACE[m  - #############################################

05:26:33.682 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:33.682 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:33.682 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:33.682 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:33.682 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:33.682 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:33.682 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:33.682 [main] [30mTRACE[m  - #########################################################
05:26:33.682 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:33.683 [main] [30mTRACE[m  - #########################################################

05:26:33.683 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:33.683 [main] [30mTRACE[m  - ###################################
05:26:33.683 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:33.683 [main] [30mTRACE[m  - ###################################

05:26:33.683 [main] [30mTRACE[m  - ###########################################################################################################
05:26:33.683 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:33.683 [main] [30mTRACE[m  - ###########################################################################################################
05:26:33.683 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:33.683 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:33.683 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:33.683 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  10
05:26:33.683 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, B, A, A, A, A, B]
05:26:33.683 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, B, A, A, A, A, B]
05:26:33.683 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 0, 5]
05:26:33.683 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 0, 4]
05:26:33.683 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
05:26:33.683 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:33.685 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, false]
05:26:33.685 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
05:26:33.685 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:33.685 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:33.685 [main] [30mTRACE[m  - ###########################################################################################################
05:26:33.685 [main] [30mTRACE[m  - ###########################################################################################################
05:26:33.685 [main] [30mTRACE[m  - ###########################################################################################################

05:26:33.685 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:33.685 [main] [36mDEBUG[m  - Incr√©mentation String() : ABBAAAAB
05:26:33.685 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABBAAAAB
05:26:33.886 [main] [30mTRACE[m  - ####################################################
05:26:33.887 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:33.887 [main] [30mTRACE[m  - ####################################################
05:26:33.887 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.887 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:33.887 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:33.887 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, B]
05:26:33.887 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:33.887 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:33.887 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:33.887 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
05:26:33.887 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:33.887 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:33.887 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:33.887 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:33.888 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.888 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:33.888 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:33.888 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:33.888 [main] [30mTRACE[m  - ###############################################
05:26:33.888 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.888 [main] [30mTRACE[m  - ###############################################
05:26:33.888 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.888 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.888 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.888 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.888 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.888 [main] [30mTRACE[m  - #############################################
05:26:33.888 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.888 [main] [30mTRACE[m  - #############################################

05:26:33.888 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:33.888 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:33.888 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:33.888 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:33.888 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:33.888 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:33.888 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:33.888 [main] [30mTRACE[m  - ###############################################
05:26:33.888 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.888 [main] [30mTRACE[m  - ###############################################
05:26:33.888 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.889 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.889 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.889 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.889 [main] [30mTRACE[m  - #############################################
05:26:33.889 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.889 [main] [30mTRACE[m  - #############################################

05:26:33.889 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:33.889 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:33.889 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:33.889 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:33.889 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:33.889 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:33.889 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:33.889 [main] [30mTRACE[m  - ###############################################
05:26:33.889 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.889 [main] [30mTRACE[m  - ###############################################
05:26:33.889 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.889 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.889 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.889 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.889 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.889 [main] [30mTRACE[m  - #############################################
05:26:33.889 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.889 [main] [30mTRACE[m  - #############################################

05:26:33.889 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:33.890 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:33.890 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:33.890 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
05:26:33.890 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:33.890 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.890 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:33.890 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:33.890 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:33.890 [main] [30mTRACE[m  - ###############################################
05:26:33.890 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:33.890 [main] [30mTRACE[m  - ###############################################
05:26:33.890 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:33.890 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:33.890 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.890 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:33.890 [main] [36mDEBUG[m  - Index de la lettre
05:26:33.890 [main] [30mTRACE[m  - #############################################
05:26:33.890 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:33.890 [main] [30mTRACE[m  - #############################################

05:26:33.890 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:33.891 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:33.891 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, true]
05:26:33.891 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 0, 0, 0, 0]
05:26:33.891 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:33.891 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.891 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:33.891 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:33.891 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:33.891 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.891 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:33.892 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
05:26:33.892 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:33.892 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:33.892 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:33.892 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.892 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:33.892 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
05:26:33.892 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:33.892 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:33.892 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:33.892 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.892 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:33.892 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
05:26:33.892 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:33.892 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:33.892 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:33.892 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:33.892 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:33.892 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 4]
05:26:33.892 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 0, 4]
05:26:33.892 [main] [30mTRACE[m  - ##################################################
05:26:33.892 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:33.892 [main] [30mTRACE[m  - ##################################################

05:26:33.892 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:34.705 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:34.705 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:34.705 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:34.706 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 11
05:26:34.706 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:34.909 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:34.909 [main] [30mTRACE[m  - ##############################################################
05:26:34.909 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:34.909 [main] [30mTRACE[m  - ##############################################################
05:26:34.909 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 0, 4]
05:26:34.910 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 0, 4]
05:26:34.910 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 0, 4]
05:26:34.910 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:34.910 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:34.910 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:34.910 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:34.910 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:34.910 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:34.910 [main] [30mTRACE[m  - ############################################################
05:26:34.910 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:34.910 [main] [30mTRACE[m  - ############################################################

05:26:34.910 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:34.910 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:34.910 [main] [30mTRACE[m  - ##########################
05:26:34.910 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:34.910 [main] [30mTRACE[m  - ##########################

05:26:34.910 [main] [30mTRACE[m  - ############################
05:26:34.910 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:34.910 [main] [30mTRACE[m  - ############################
05:26:34.910 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:34.910 [main] [30mTRACE[m  - #####################################
05:26:34.910 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:34.910 [main] [30mTRACE[m  - #####################################
05:26:34.910 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:34.910 [main] [30mTRACE[m  - ###########################################################
05:26:34.910 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:34.910 [main] [30mTRACE[m  - ###########################################################
05:26:34.910 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:34.910 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:34.910 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, B, A, A, A, A, B]
05:26:34.910 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, false, false, false, true, false]
05:26:34.911 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:34.911 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:34.911 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:34.911 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:34.911 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:34.911 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:34.911 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:34.911 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
05:26:34.911 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
05:26:34.911 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:34.911 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:34.911 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:34.911 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:34.911 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:34.911 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:34.911 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
05:26:34.911 [main] [30mTRACE[m  - ###############################################
05:26:34.911 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:34.911 [main] [30mTRACE[m  - ###############################################
05:26:34.911 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:34.911 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:34.911 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:34.911 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:34.911 [main] [36mDEBUG[m  - Index de la lettre
05:26:34.911 [main] [30mTRACE[m  - #############################################
05:26:34.911 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:34.911 [main] [30mTRACE[m  - #############################################

05:26:34.911 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:34.911 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:34.911 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:34.911 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:34.911 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:34.912 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:34.912 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:34.912 [main] [30mTRACE[m  - #########################################################
05:26:34.912 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:34.912 [main] [30mTRACE[m  - #########################################################

05:26:34.912 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:34.912 [main] [30mTRACE[m  - ###################################
05:26:34.912 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:34.912 [main] [30mTRACE[m  - ###################################

05:26:34.912 [main] [30mTRACE[m  - ###########################################################################################################
05:26:34.912 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:34.912 [main] [30mTRACE[m  - ###########################################################################################################
05:26:34.912 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:34.912 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:34.912 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:34.912 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  11
05:26:34.913 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, A, A, A, A, B]
05:26:34.913 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, A, A, A, A, B]
05:26:34.913 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 0, 4]
05:26:34.913 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 0, 4]
05:26:34.913 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:34.913 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:34.915 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, false, false, false, true, false]
05:26:34.915 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
05:26:34.915 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
05:26:34.915 [main] [36mDEBUG[m  - ch_NewLetter :                                C
05:26:34.915 [main] [30mTRACE[m  - ###########################################################################################################
05:26:34.915 [main] [30mTRACE[m  - ###########################################################################################################
05:26:34.915 [main] [30mTRACE[m  - ###########################################################################################################

05:26:34.915 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:34.915 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCAAAAB
05:26:34.915 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCAAAAB
05:26:35.120 [main] [30mTRACE[m  - ####################################################
05:26:35.121 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:35.121 [main] [30mTRACE[m  - ####################################################
05:26:35.121 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.121 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:35.121 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:35.121 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, A, A, A, A, B]
05:26:35.121 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:35.121 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:35.121 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:35.122 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, false, false, false, true, false]
05:26:35.122 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:35.122 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:35.122 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:35.122 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:35.122 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.122 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:35.122 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:35.122 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:35.122 [main] [30mTRACE[m  - ###############################################
05:26:35.122 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:35.122 [main] [30mTRACE[m  - ###############################################
05:26:35.122 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:35.122 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.122 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.122 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.122 [main] [36mDEBUG[m  - Index de la lettre
05:26:35.122 [main] [30mTRACE[m  - #############################################
05:26:35.123 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:35.123 [main] [30mTRACE[m  - #############################################

05:26:35.123 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:35.123 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:35.123 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:35.123 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:35.123 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:35.123 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:35.123 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:35.123 [main] [30mTRACE[m  - ###############################################
05:26:35.123 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:35.123 [main] [30mTRACE[m  - ###############################################
05:26:35.123 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:35.123 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.123 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.123 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.123 [main] [36mDEBUG[m  - Index de la lettre
05:26:35.123 [main] [30mTRACE[m  - #############################################
05:26:35.123 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:35.123 [main] [30mTRACE[m  - #############################################

05:26:35.124 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:35.124 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:35.124 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:35.124 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:35.125 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:35.125 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:35.125 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:35.125 [main] [30mTRACE[m  - ###############################################
05:26:35.125 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:35.125 [main] [30mTRACE[m  - ###############################################
05:26:35.125 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:35.125 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.126 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.126 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.126 [main] [36mDEBUG[m  - Index de la lettre
05:26:35.126 [main] [30mTRACE[m  - #############################################
05:26:35.126 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:35.126 [main] [30mTRACE[m  - #############################################

05:26:35.127 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:35.127 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:35.127 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, true, false]
05:26:35.127 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 0, 0, 0, 0]
05:26:35.127 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:35.127 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.128 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:35.128 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:35.128 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
05:26:35.128 [main] [30mTRACE[m  - ###############################################
05:26:35.129 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:35.129 [main] [30mTRACE[m  - ###############################################
05:26:35.129 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:35.129 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.129 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.129 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.129 [main] [36mDEBUG[m  - Index de la lettre
05:26:35.129 [main] [30mTRACE[m  - #############################################
05:26:35.129 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:35.129 [main] [30mTRACE[m  - #############################################

05:26:35.129 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
05:26:35.129 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:35.129 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:35.129 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
05:26:35.129 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:35.129 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:35.129 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:35.129 [main] [30mTRACE[m  - ###############################################
05:26:35.129 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:35.129 [main] [30mTRACE[m  - ###############################################
05:26:35.129 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:35.129 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:35.129 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.129 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:35.129 [main] [36mDEBUG[m  - Index de la lettre
05:26:35.129 [main] [30mTRACE[m  - #############################################
05:26:35.129 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:35.129 [main] [30mTRACE[m  - #############################################

05:26:35.129 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:35.130 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:35.130 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:35.130 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
05:26:35.130 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:35.130 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.130 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:35.130 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:35.131 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:35.131 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.131 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:35.131 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
05:26:35.131 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:35.131 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:35.131 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:35.131 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.131 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:35.131 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
05:26:35.131 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:35.131 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:35.131 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:35.131 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:35.131 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:35.131 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
05:26:35.131 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
05:26:35.131 [main] [30mTRACE[m  - ##################################################
05:26:35.131 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:35.131 [main] [30mTRACE[m  - ##################################################

05:26:35.131 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:35.938 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:35.938 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:35.938 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:35.938 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 12
05:26:35.938 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:36.143 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:36.143 [main] [30mTRACE[m  - ##############################################################
05:26:36.143 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:36.143 [main] [30mTRACE[m  - ##############################################################
05:26:36.143 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 0, 4]
05:26:36.143 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
05:26:36.143 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
05:26:36.143 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
05:26:36.143 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:36.143 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
05:26:36.143 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
05:26:36.143 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
05:26:36.143 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
05:26:36.143 [main] [30mTRACE[m  - ############################################################
05:26:36.143 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:36.143 [main] [30mTRACE[m  - ############################################################

05:26:36.144 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:36.144 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
05:26:36.144 [main] [32mINFO [m  - IF - "=" appara√Æt
05:26:36.144 [main] [30mTRACE[m  - ##############################################
05:26:36.144 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
05:26:36.144 [main] [30mTRACE[m  - ##############################################
05:26:36.144 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
05:26:36.144 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:36.144 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:36.144 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
05:26:36.144 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
05:26:36.144 [main] [30mTRACE[m  - ###############################################
05:26:36.144 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.144 [main] [30mTRACE[m  - ###############################################
05:26:36.144 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.144 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.144 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.144 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.144 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.144 [main] [30mTRACE[m  - #############################################
05:26:36.144 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.144 [main] [30mTRACE[m  - #############################################

05:26:36.144 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:36.144 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.144 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:36.144 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:36.144 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.145 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:36.145 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:36.145 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.145 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
05:26:36.145 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.145 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:36.145 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:36.145 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.145 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:36.145 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:36.145 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.145 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:36.145 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:36.145 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
05:26:36.145 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
05:26:36.145 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, false]
05:26:36.145 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
05:26:36.145 [main] [30mTRACE[m  - ############################################
05:26:36.145 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
05:26:36.145 [main] [30mTRACE[m  - ############################################

05:26:36.145 [main] [32mINFO [m  - Lancement √©galit√© positive
05:26:36.145 [main] [30mTRACE[m  - ##########################
05:26:36.145 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:36.145 [main] [30mTRACE[m  - ##########################

05:26:36.145 [main] [30mTRACE[m  - ############################
05:26:36.145 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:36.145 [main] [30mTRACE[m  - ############################
05:26:36.145 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:36.146 [main] [30mTRACE[m  - #####################################
05:26:36.146 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:36.146 [main] [30mTRACE[m  - #####################################
05:26:36.146 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:36.146 [main] [30mTRACE[m  - ###########################################################
05:26:36.146 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:36.146 [main] [30mTRACE[m  - ###########################################################
05:26:36.146 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:36.146 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:36.146 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, A, A, A, A, B]
05:26:36.146 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, false]
05:26:36.146 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:36.146 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:36.146 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:36.146 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:36.146 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:36.146 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:36.146 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:36.146 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:36.146 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
05:26:36.146 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:36.146 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:36.146 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:36.146 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:36.146 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:36.146 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:36.146 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:36.147 [main] [30mTRACE[m  - ###############################################
05:26:36.147 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.147 [main] [30mTRACE[m  - ###############################################
05:26:36.147 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.147 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.147 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.147 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.147 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.147 [main] [30mTRACE[m  - #############################################
05:26:36.147 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.147 [main] [30mTRACE[m  - #############################################

05:26:36.147 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:36.147 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:36.147 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:36.147 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:36.147 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:36.147 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:36.147 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:36.147 [main] [30mTRACE[m  - #########################################################
05:26:36.147 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:36.147 [main] [30mTRACE[m  - #########################################################

05:26:36.147 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:36.147 [main] [30mTRACE[m  - ###################################
05:26:36.147 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:36.147 [main] [30mTRACE[m  - ###################################

05:26:36.147 [main] [30mTRACE[m  - ###########################################################################################################
05:26:36.148 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:36.148 [main] [30mTRACE[m  - ###########################################################################################################
05:26:36.148 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:36.148 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:36.148 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:36.148 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  12
05:26:36.148 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, B, A, A, A, B]
05:26:36.148 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, B, A, A, A, B]
05:26:36.148 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 0, 4]
05:26:36.148 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
05:26:36.148 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
05:26:36.148 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:36.149 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, false]
05:26:36.149 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
05:26:36.150 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:36.150 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:36.150 [main] [30mTRACE[m  - ###########################################################################################################
05:26:36.150 [main] [30mTRACE[m  - ###########################################################################################################
05:26:36.150 [main] [30mTRACE[m  - ###########################################################################################################

05:26:36.150 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:36.150 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCBAAAB
05:26:36.150 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCBAAAB
05:26:36.352 [main] [30mTRACE[m  - ####################################################
05:26:36.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:36.353 [main] [30mTRACE[m  - ####################################################
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, B, A, A, A, B]
05:26:36.353 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:36.353 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:36.353 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, false]
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:36.353 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:36.353 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.353 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:36.353 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:36.353 [main] [30mTRACE[m  - ###############################################
05:26:36.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.353 [main] [30mTRACE[m  - ###############################################
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.353 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.353 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.353 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.353 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.353 [main] [30mTRACE[m  - #############################################
05:26:36.353 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.353 [main] [30mTRACE[m  - #############################################

05:26:36.353 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:36.353 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:36.353 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:36.353 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:36.353 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:36.353 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:36.353 [main] [30mTRACE[m  - ###############################################
05:26:36.353 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.353 [main] [30mTRACE[m  - ###############################################
05:26:36.353 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.354 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.354 [main] [30mTRACE[m  - #############################################
05:26:36.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.354 [main] [30mTRACE[m  - #############################################

05:26:36.354 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:36.354 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:36.354 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:36.354 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:36.354 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:36.354 [main] [30mTRACE[m  - ###############################################
05:26:36.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.354 [main] [30mTRACE[m  - ###############################################
05:26:36.354 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.354 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.354 [main] [30mTRACE[m  - #############################################
05:26:36.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.354 [main] [30mTRACE[m  - #############################################

05:26:36.354 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:36.354 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:36.354 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:36.354 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:36.354 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:36.354 [main] [30mTRACE[m  - ###############################################
05:26:36.354 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.354 [main] [30mTRACE[m  - ###############################################
05:26:36.354 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.354 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.354 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.354 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.354 [main] [30mTRACE[m  - #############################################
05:26:36.354 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.354 [main] [30mTRACE[m  - #############################################

05:26:36.354 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:36.354 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:36.354 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
05:26:36.355 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.355 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:36.355 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:36.355 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:36.355 [main] [30mTRACE[m  - ###############################################
05:26:36.355 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:36.355 [main] [30mTRACE[m  - ###############################################
05:26:36.355 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:36.355 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.355 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:36.355 [main] [36mDEBUG[m  - Index de la lettre
05:26:36.355 [main] [30mTRACE[m  - #############################################
05:26:36.355 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:36.355 [main] [30mTRACE[m  - #############################################

05:26:36.355 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:36.355 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:36.355 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:36.355 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
05:26:36.355 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.355 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:36.355 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:36.355 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.355 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:36.355 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
05:26:36.355 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:36.355 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:36.355 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.355 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:36.355 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
05:26:36.355 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:36.355 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:36.355 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:36.355 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:36.355 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:36.355 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
05:26:36.355 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
05:26:36.355 [main] [30mTRACE[m  - ##################################################
05:26:36.355 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:36.355 [main] [30mTRACE[m  - ##################################################

05:26:36.355 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:37.160 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:37.160 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:37.160 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:37.160 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 13
05:26:37.160 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:37.361 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:37.361 [main] [30mTRACE[m  - ##############################################################
05:26:37.361 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:37.361 [main] [30mTRACE[m  - ##############################################################
05:26:37.361 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
05:26:37.361 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
05:26:37.361 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
05:26:37.361 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:37.361 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:37.361 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:37.361 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:37.361 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:37.362 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:37.362 [main] [30mTRACE[m  - ############################################################
05:26:37.362 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:37.362 [main] [30mTRACE[m  - ############################################################

05:26:37.362 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:37.362 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:37.362 [main] [30mTRACE[m  - ##########################
05:26:37.362 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:37.362 [main] [30mTRACE[m  - ##########################

05:26:37.362 [main] [30mTRACE[m  - ############################
05:26:37.362 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:37.362 [main] [30mTRACE[m  - ############################
05:26:37.362 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:37.362 [main] [30mTRACE[m  - #####################################
05:26:37.362 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:37.362 [main] [30mTRACE[m  - #####################################
05:26:37.363 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:37.363 [main] [30mTRACE[m  - ###########################################################
05:26:37.363 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:37.363 [main] [30mTRACE[m  - ###########################################################
05:26:37.363 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:37.363 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:37.363 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, B, A, A, A, B]
05:26:37.363 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, false]
05:26:37.363 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:37.363 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:37.363 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:37.363 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:37.363 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:37.363 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:37.364 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:37.364 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:37.364 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
05:26:37.364 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
05:26:37.364 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:37.364 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:37.364 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:37.364 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:37.364 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:37.364 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:37.364 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
05:26:37.364 [main] [30mTRACE[m  - ###############################################
05:26:37.364 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.364 [main] [30mTRACE[m  - ###############################################
05:26:37.364 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.364 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.364 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.364 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.364 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.364 [main] [30mTRACE[m  - #############################################
05:26:37.364 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.364 [main] [30mTRACE[m  - #############################################

05:26:37.364 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:37.364 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:37.364 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:37.365 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:37.365 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:37.365 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:37.365 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:37.365 [main] [30mTRACE[m  - #########################################################
05:26:37.365 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:37.365 [main] [30mTRACE[m  - #########################################################

05:26:37.365 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:37.365 [main] [30mTRACE[m  - ###################################
05:26:37.365 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:37.365 [main] [30mTRACE[m  - ###################################

05:26:37.365 [main] [30mTRACE[m  - ###########################################################################################################
05:26:37.365 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:37.365 [main] [30mTRACE[m  - ###########################################################################################################
05:26:37.365 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:37.365 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:37.365 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:37.365 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  13
05:26:37.365 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, C, A, A, A, B]
05:26:37.365 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, C, A, A, A, B]
05:26:37.366 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
05:26:37.366 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
05:26:37.366 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:37.366 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:37.368 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, false]
05:26:37.368 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
05:26:37.368 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
05:26:37.369 [main] [36mDEBUG[m  - ch_NewLetter :                                C
05:26:37.369 [main] [30mTRACE[m  - ###########################################################################################################
05:26:37.369 [main] [30mTRACE[m  - ###########################################################################################################
05:26:37.369 [main] [30mTRACE[m  - ###########################################################################################################

05:26:37.369 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:37.369 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCCAAAB
05:26:37.369 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCCAAAB
05:26:37.570 [main] [30mTRACE[m  - ####################################################
05:26:37.570 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:37.571 [main] [30mTRACE[m  - ####################################################
05:26:37.571 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.571 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:37.571 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:37.571 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, C, A, A, A, B]
05:26:37.571 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:37.571 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:37.571 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:37.571 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, false]
05:26:37.571 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:37.571 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:37.571 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:37.571 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:37.571 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.571 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:37.571 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:37.571 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:37.571 [main] [30mTRACE[m  - ###############################################
05:26:37.571 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.571 [main] [30mTRACE[m  - ###############################################
05:26:37.571 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.572 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.572 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.572 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.572 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.572 [main] [30mTRACE[m  - #############################################
05:26:37.572 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.572 [main] [30mTRACE[m  - #############################################

05:26:37.572 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:37.572 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:37.572 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:37.572 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:37.572 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:37.572 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:37.572 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:37.572 [main] [30mTRACE[m  - ###############################################
05:26:37.572 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.572 [main] [30mTRACE[m  - ###############################################
05:26:37.572 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.572 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.572 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.572 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.572 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.572 [main] [30mTRACE[m  - #############################################
05:26:37.572 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.572 [main] [30mTRACE[m  - #############################################

05:26:37.572 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:37.572 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:37.573 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:37.573 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:37.573 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:37.573 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:37.573 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:37.573 [main] [30mTRACE[m  - ###############################################
05:26:37.573 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.573 [main] [30mTRACE[m  - ###############################################
05:26:37.573 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.573 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.573 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.573 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.573 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.573 [main] [30mTRACE[m  - #############################################
05:26:37.573 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.573 [main] [30mTRACE[m  - #############################################

05:26:37.574 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:37.574 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:37.574 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:37.574 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:37.574 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:37.574 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:37.574 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:37.574 [main] [30mTRACE[m  - ###############################################
05:26:37.574 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.574 [main] [30mTRACE[m  - ###############################################
05:26:37.574 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.574 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.574 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.574 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.575 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.575 [main] [30mTRACE[m  - #############################################
05:26:37.575 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.575 [main] [30mTRACE[m  - #############################################

05:26:37.575 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:37.575 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:37.575 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:37.575 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
05:26:37.575 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:37.575 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.575 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:37.575 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:37.575 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:37.575 [main] [30mTRACE[m  - ###############################################
05:26:37.575 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:37.575 [main] [30mTRACE[m  - ###############################################
05:26:37.575 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:37.575 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:37.576 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.577 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:37.577 [main] [36mDEBUG[m  - Index de la lettre
05:26:37.577 [main] [30mTRACE[m  - #############################################
05:26:37.578 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:37.578 [main] [30mTRACE[m  - #############################################

05:26:37.578 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:37.578 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:37.578 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, true]
05:26:37.578 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 0, 0, 0]
05:26:37.578 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:37.578 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.578 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:37.578 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:37.578 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:37.578 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.578 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:37.578 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
05:26:37.578 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:37.578 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:37.578 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:37.578 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.578 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:37.579 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
05:26:37.580 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:37.580 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:37.580 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:37.580 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:37.580 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:37.580 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 3]
05:26:37.580 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 0, 3]
05:26:37.580 [main] [30mTRACE[m  - ##################################################
05:26:37.580 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:37.580 [main] [30mTRACE[m  - ##################################################

05:26:37.580 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:38.392 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:38.396 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:38.397 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:38.397 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 14
05:26:38.398 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:38.601 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:38.601 [main] [30mTRACE[m  - ##############################################################
05:26:38.601 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:38.601 [main] [30mTRACE[m  - ##############################################################
05:26:38.601 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
05:26:38.602 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 0, 3]
05:26:38.602 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 0, 3]
05:26:38.602 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:38.602 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:38.602 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:38.602 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:38.602 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:38.602 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:38.602 [main] [30mTRACE[m  - ############################################################
05:26:38.602 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:38.602 [main] [30mTRACE[m  - ############################################################

05:26:38.602 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:38.602 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:38.602 [main] [30mTRACE[m  - ##########################
05:26:38.602 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:38.602 [main] [30mTRACE[m  - ##########################

05:26:38.602 [main] [30mTRACE[m  - ############################
05:26:38.602 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:38.602 [main] [30mTRACE[m  - ############################
05:26:38.602 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:38.602 [main] [30mTRACE[m  - #####################################
05:26:38.603 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:38.603 [main] [30mTRACE[m  - #####################################
05:26:38.603 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:38.603 [main] [30mTRACE[m  - ###########################################################
05:26:38.603 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:38.603 [main] [30mTRACE[m  - ###########################################################
05:26:38.603 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:38.603 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:38.603 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, C, A, A, A, B]
05:26:38.603 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, false, false, false, true, false]
05:26:38.603 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:38.603 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:38.603 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:38.603 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:38.603 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:38.603 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:38.603 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:38.603 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:38.604 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 3
05:26:38.604 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
05:26:38.604 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:38.604 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:38.604 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:38.604 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:38.604 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:38.604 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:38.604 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:38.604 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
05:26:38.604 [main] [30mTRACE[m  - ###############################################
05:26:38.604 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.604 [main] [30mTRACE[m  - ###############################################
05:26:38.604 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.604 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.604 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.604 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.604 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.604 [main] [30mTRACE[m  - #############################################
05:26:38.604 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.604 [main] [30mTRACE[m  - #############################################

05:26:38.604 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:38.604 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:38.604 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:38.604 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:38.604 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:38.605 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:38.605 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:38.605 [main] [30mTRACE[m  - #########################################################
05:26:38.605 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:38.605 [main] [30mTRACE[m  - #########################################################

05:26:38.605 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:38.605 [main] [30mTRACE[m  - ###################################
05:26:38.605 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:38.605 [main] [30mTRACE[m  - ###################################

05:26:38.605 [main] [30mTRACE[m  - ###########################################################################################################
05:26:38.605 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:38.605 [main] [30mTRACE[m  - ###########################################################################################################
05:26:38.605 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:38.605 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:38.605 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:38.605 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  14
05:26:38.605 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, A, A, A, B]
05:26:38.605 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, A, A, A, B]
05:26:38.605 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
05:26:38.605 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 0, 3]
05:26:38.605 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:38.605 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:38.607 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, false, false, false, true, false]
05:26:38.607 [main] [36mDEBUG[m  - int_ReplacementPosition :                     3
05:26:38.607 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
05:26:38.607 [main] [36mDEBUG[m  - ch_NewLetter :                                D
05:26:38.607 [main] [30mTRACE[m  - ###########################################################################################################
05:26:38.607 [main] [30mTRACE[m  - ###########################################################################################################
05:26:38.607 [main] [30mTRACE[m  - ###########################################################################################################

05:26:38.608 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:38.608 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDAAAB
05:26:38.608 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDAAAB
05:26:38.811 [main] [30mTRACE[m  - ####################################################
05:26:38.811 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:38.811 [main] [30mTRACE[m  - ####################################################
05:26:38.812 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.812 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:38.812 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:38.813 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, A, A, A, B]
05:26:38.813 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:38.814 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:38.814 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:38.814 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, false, false, false, true, false]
05:26:38.815 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:38.815 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:38.815 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:38.815 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:38.815 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:38.815 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:38.815 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:38.815 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:38.815 [main] [30mTRACE[m  - ###############################################
05:26:38.815 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.816 [main] [30mTRACE[m  - ###############################################
05:26:38.816 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.816 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.816 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.816 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.816 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.816 [main] [30mTRACE[m  - #############################################
05:26:38.816 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.816 [main] [30mTRACE[m  - #############################################

05:26:38.816 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:38.816 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:38.816 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:38.816 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:38.816 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:38.816 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:38.816 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:38.816 [main] [30mTRACE[m  - ###############################################
05:26:38.816 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.816 [main] [30mTRACE[m  - ###############################################
05:26:38.816 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.816 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.816 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.816 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.816 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.816 [main] [30mTRACE[m  - #############################################
05:26:38.816 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.816 [main] [30mTRACE[m  - #############################################

05:26:38.816 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:38.816 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:38.816 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:38.816 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:38.816 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:38.816 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:38.816 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:38.816 [main] [30mTRACE[m  - ###############################################
05:26:38.816 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.816 [main] [30mTRACE[m  - ###############################################
05:26:38.816 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.816 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.816 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.816 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.817 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.817 [main] [30mTRACE[m  - #############################################
05:26:38.817 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.817 [main] [30mTRACE[m  - #############################################

05:26:38.817 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:38.817 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:38.817 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:38.817 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:38.817 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:38.817 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:38.817 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:38.817 [main] [30mTRACE[m  - ###############################################
05:26:38.817 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.817 [main] [30mTRACE[m  - ###############################################
05:26:38.817 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.817 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.817 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.817 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.817 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.817 [main] [30mTRACE[m  - #############################################
05:26:38.817 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.817 [main] [30mTRACE[m  - #############################################

05:26:38.817 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:38.817 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:38.817 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, true, false]
05:26:38.817 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 0, 0, 0]
05:26:38.817 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:38.817 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:38.817 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:38.817 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:38.817 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
05:26:38.817 [main] [30mTRACE[m  - ###############################################
05:26:38.817 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.817 [main] [30mTRACE[m  - ###############################################
05:26:38.817 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.817 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.817 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.817 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.817 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.817 [main] [30mTRACE[m  - #############################################
05:26:38.817 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.818 [main] [30mTRACE[m  - #############################################

05:26:38.818 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:38.818 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
05:26:38.818 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:38.818 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:38.818 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:38.818 [main] [30mTRACE[m  - ###############################################
05:26:38.818 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:38.818 [main] [30mTRACE[m  - ###############################################
05:26:38.818 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:38.818 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:38.818 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.818 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:38.818 [main] [36mDEBUG[m  - Index de la lettre
05:26:38.818 [main] [30mTRACE[m  - #############################################
05:26:38.818 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:38.818 [main] [30mTRACE[m  - #############################################

05:26:38.818 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:38.818 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
05:26:38.818 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:38.818 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:38.818 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:38.818 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:38.818 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:38.818 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:38.818 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
05:26:38.818 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:38.818 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:38.818 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:38.818 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:38.818 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:38.818 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
05:26:38.818 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
05:26:38.818 [main] [30mTRACE[m  - ##################################################
05:26:38.819 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:38.819 [main] [30mTRACE[m  - ##################################################

05:26:38.819 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:39.629 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:39.629 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:39.629 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:39.629 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 15
05:26:39.629 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:39.832 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:39.832 [main] [30mTRACE[m  - ##############################################################
05:26:39.832 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:39.832 [main] [30mTRACE[m  - ##############################################################
05:26:39.832 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 0, 3]
05:26:39.832 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
05:26:39.832 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
05:26:39.832 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
05:26:39.832 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:39.832 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
05:26:39.832 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
05:26:39.833 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
05:26:39.833 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
05:26:39.833 [main] [30mTRACE[m  - ############################################################
05:26:39.833 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:39.833 [main] [30mTRACE[m  - ############################################################

05:26:39.833 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:39.833 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
05:26:39.833 [main] [32mINFO [m  - IF - "=" appara√Æt
05:26:39.833 [main] [30mTRACE[m  - ##############################################
05:26:39.833 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
05:26:39.833 [main] [30mTRACE[m  - ##############################################
05:26:39.833 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
05:26:39.833 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:39.833 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:39.833 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
05:26:39.833 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
05:26:39.833 [main] [30mTRACE[m  - ###############################################
05:26:39.833 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:39.833 [main] [30mTRACE[m  - ###############################################
05:26:39.833 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:39.833 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:39.834 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [36mDEBUG[m  - Index de la lettre
05:26:39.834 [main] [30mTRACE[m  - #############################################
05:26:39.834 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:39.834 [main] [30mTRACE[m  - #############################################

05:26:39.834 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:39.834 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:39.834 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:39.834 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:39.834 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:39.834 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:39.834 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:39.834 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
05:26:39.834 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.834 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:39.834 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:39.835 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.835 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:39.835 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:39.835 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
05:26:39.835 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
05:26:39.835 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, false]
05:26:39.835 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
05:26:39.835 [main] [30mTRACE[m  - ############################################
05:26:39.835 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
05:26:39.835 [main] [30mTRACE[m  - ############################################

05:26:39.835 [main] [32mINFO [m  - Lancement √©galit√© positive
05:26:39.835 [main] [30mTRACE[m  - ##########################
05:26:39.835 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:39.835 [main] [30mTRACE[m  - ##########################

05:26:39.835 [main] [30mTRACE[m  - ############################
05:26:39.835 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:39.835 [main] [30mTRACE[m  - ############################
05:26:39.835 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:39.835 [main] [30mTRACE[m  - #####################################
05:26:39.835 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:39.835 [main] [30mTRACE[m  - #####################################
05:26:39.836 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:39.836 [main] [30mTRACE[m  - ###########################################################
05:26:39.836 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:39.836 [main] [30mTRACE[m  - ###########################################################
05:26:39.836 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:39.836 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:39.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, A, A, A, B]
05:26:39.836 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, false]
05:26:39.836 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:39.836 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:39.836 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:39.836 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:39.836 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:39.836 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:39.836 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:39.836 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:39.836 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:39.836 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
05:26:39.836 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:39.836 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:39.836 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:39.836 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:39.836 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:39.836 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:39.837 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:39.837 [main] [30mTRACE[m  - ###############################################
05:26:39.837 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:39.837 [main] [30mTRACE[m  - ###############################################
05:26:39.837 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:39.837 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:39.837 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.837 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:39.837 [main] [36mDEBUG[m  - Index de la lettre
05:26:39.837 [main] [30mTRACE[m  - #############################################
05:26:39.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:39.837 [main] [30mTRACE[m  - #############################################

05:26:39.837 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:39.837 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:39.837 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:39.837 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:39.837 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:39.837 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:39.837 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:39.837 [main] [30mTRACE[m  - #########################################################
05:26:39.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:39.837 [main] [30mTRACE[m  - #########################################################

05:26:39.837 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:39.837 [main] [30mTRACE[m  - ###################################
05:26:39.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:39.837 [main] [30mTRACE[m  - ###################################

05:26:39.837 [main] [30mTRACE[m  - ###########################################################################################################
05:26:39.837 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:39.838 [main] [30mTRACE[m  - ###########################################################################################################
05:26:39.838 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:39.838 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:39.838 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:39.838 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  15
05:26:39.838 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, B, A, A, B]
05:26:39.838 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, B, A, A, B]
05:26:39.838 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 0, 3]
05:26:39.838 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
05:26:39.838 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
05:26:39.838 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:39.842 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, false]
05:26:39.842 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
05:26:39.842 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:39.843 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:39.843 [main] [30mTRACE[m  - ###########################################################################################################
05:26:39.843 [main] [30mTRACE[m  - ###########################################################################################################
05:26:39.844 [main] [30mTRACE[m  - ###########################################################################################################

05:26:39.844 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:39.844 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDBAAB
05:26:39.844 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDBAAB
05:26:40.048 [main] [30mTRACE[m  - ####################################################
05:26:40.048 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:40.048 [main] [30mTRACE[m  - ####################################################
05:26:40.048 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.048 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:40.048 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:40.049 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, B, A, A, B]
05:26:40.049 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:40.049 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:40.049 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:40.049 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, false]
05:26:40.049 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:40.049 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:40.049 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:40.049 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:40.049 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:40.049 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:40.049 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:40.050 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:40.050 [main] [30mTRACE[m  - ###############################################
05:26:40.050 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.050 [main] [30mTRACE[m  - ###############################################
05:26:40.050 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.050 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.050 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.050 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.050 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.050 [main] [30mTRACE[m  - #############################################
05:26:40.050 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.050 [main] [30mTRACE[m  - #############################################

05:26:40.050 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:40.050 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:40.050 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:40.050 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:40.050 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:40.050 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:40.050 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:40.050 [main] [30mTRACE[m  - ###############################################
05:26:40.050 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.050 [main] [30mTRACE[m  - ###############################################
05:26:40.050 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.050 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.050 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.050 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.051 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.051 [main] [30mTRACE[m  - #############################################
05:26:40.051 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.051 [main] [30mTRACE[m  - #############################################

05:26:40.051 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:40.051 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:40.051 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:40.051 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:40.051 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:40.051 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:40.051 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:40.051 [main] [30mTRACE[m  - ###############################################
05:26:40.051 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.051 [main] [30mTRACE[m  - ###############################################
05:26:40.051 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.051 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.051 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.051 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.051 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.051 [main] [30mTRACE[m  - #############################################
05:26:40.051 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.051 [main] [30mTRACE[m  - #############################################

05:26:40.051 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:40.051 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:40.051 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:40.051 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:40.051 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:40.051 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:40.051 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:40.051 [main] [30mTRACE[m  - ###############################################
05:26:40.051 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.051 [main] [30mTRACE[m  - ###############################################
05:26:40.051 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.052 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.052 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.052 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.052 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.052 [main] [30mTRACE[m  - #############################################
05:26:40.052 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.052 [main] [30mTRACE[m  - #############################################

05:26:40.052 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:40.052 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:40.052 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:40.052 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:40.052 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:40.052 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:40.052 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:40.052 [main] [30mTRACE[m  - ###############################################
05:26:40.052 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.052 [main] [30mTRACE[m  - ###############################################
05:26:40.052 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.052 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.052 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.052 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.052 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.052 [main] [30mTRACE[m  - #############################################
05:26:40.052 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.052 [main] [30mTRACE[m  - #############################################

05:26:40.053 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:40.053 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:40.053 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:40.054 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
05:26:40.054 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:40.054 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:40.054 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:40.054 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:40.054 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:40.054 [main] [30mTRACE[m  - ###############################################
05:26:40.054 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:40.054 [main] [30mTRACE[m  - ###############################################
05:26:40.054 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:40.054 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:40.054 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.054 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:40.054 [main] [36mDEBUG[m  - Index de la lettre
05:26:40.054 [main] [30mTRACE[m  - #############################################
05:26:40.054 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:40.054 [main] [30mTRACE[m  - #############################################

05:26:40.054 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:40.054 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:40.055 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:40.055 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
05:26:40.055 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:40.055 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:40.055 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:40.055 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:40.055 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:40.055 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:40.055 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:40.055 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
05:26:40.055 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:40.056 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:40.056 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:40.056 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:40.056 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:40.056 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
05:26:40.056 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
05:26:40.057 [main] [30mTRACE[m  - ##################################################
05:26:40.057 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:40.057 [main] [30mTRACE[m  - ##################################################

05:26:40.057 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:40.869 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:40.869 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:40.869 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:40.869 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 16
05:26:40.869 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:41.074 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:41.074 [main] [30mTRACE[m  - ##############################################################
05:26:41.074 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:41.075 [main] [30mTRACE[m  - ##############################################################
05:26:41.075 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
05:26:41.075 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
05:26:41.075 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
05:26:41.075 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:41.075 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:41.075 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:41.075 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:41.075 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:41.075 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:41.075 [main] [30mTRACE[m  - ############################################################
05:26:41.075 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:41.075 [main] [30mTRACE[m  - ############################################################

05:26:41.075 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:41.075 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:41.075 [main] [30mTRACE[m  - ##########################
05:26:41.075 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:41.075 [main] [30mTRACE[m  - ##########################

05:26:41.075 [main] [30mTRACE[m  - ############################
05:26:41.075 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:41.075 [main] [30mTRACE[m  - ############################
05:26:41.075 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:41.075 [main] [30mTRACE[m  - #####################################
05:26:41.076 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:41.076 [main] [30mTRACE[m  - #####################################
05:26:41.076 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:41.076 [main] [30mTRACE[m  - ###########################################################
05:26:41.076 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:41.076 [main] [30mTRACE[m  - ###########################################################
05:26:41.076 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:41.076 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:41.076 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, B, A, A, B]
05:26:41.076 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, false]
05:26:41.076 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:41.076 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:41.076 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:41.076 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:41.076 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:41.076 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:41.076 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:41.076 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:41.076 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:41.076 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
05:26:41.076 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
05:26:41.076 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:41.076 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:41.076 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:41.076 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:41.076 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:41.077 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:41.077 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
05:26:41.077 [main] [30mTRACE[m  - ###############################################
05:26:41.077 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.077 [main] [30mTRACE[m  - ###############################################
05:26:41.077 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.077 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.077 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.077 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.077 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.077 [main] [30mTRACE[m  - #############################################
05:26:41.077 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.077 [main] [30mTRACE[m  - #############################################

05:26:41.077 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:41.077 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:41.077 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:41.077 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:41.077 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:41.077 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:41.077 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:41.077 [main] [30mTRACE[m  - #########################################################
05:26:41.078 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:41.078 [main] [30mTRACE[m  - #########################################################

05:26:41.078 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:41.078 [main] [30mTRACE[m  - ###################################
05:26:41.078 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:41.078 [main] [30mTRACE[m  - ###################################

05:26:41.078 [main] [30mTRACE[m  - ###########################################################################################################
05:26:41.078 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:41.078 [main] [30mTRACE[m  - ###########################################################################################################
05:26:41.078 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:41.078 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:41.078 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:41.078 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  16
05:26:41.078 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, C, A, A, B]
05:26:41.078 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, C, A, A, B]
05:26:41.078 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
05:26:41.078 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
05:26:41.078 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:41.078 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:41.080 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, false]
05:26:41.080 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
05:26:41.080 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
05:26:41.080 [main] [36mDEBUG[m  - ch_NewLetter :                                C
05:26:41.080 [main] [30mTRACE[m  - ###########################################################################################################
05:26:41.080 [main] [30mTRACE[m  - ###########################################################################################################
05:26:41.080 [main] [30mTRACE[m  - ###########################################################################################################

05:26:41.080 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:41.080 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDCAAB
05:26:41.080 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDCAAB
05:26:41.283 [main] [30mTRACE[m  - ####################################################
05:26:41.283 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:41.283 [main] [30mTRACE[m  - ####################################################
05:26:41.284 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.285 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:41.285 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:41.285 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, C, A, A, B]
05:26:41.286 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:41.286 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:41.286 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:41.286 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, false]
05:26:41.286 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:41.286 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:41.286 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:41.286 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:41.286 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:41.286 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:41.286 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:41.287 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:41.287 [main] [30mTRACE[m  - ###############################################
05:26:41.287 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.287 [main] [30mTRACE[m  - ###############################################
05:26:41.287 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.287 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.287 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.287 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.287 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.287 [main] [30mTRACE[m  - #############################################
05:26:41.287 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.287 [main] [30mTRACE[m  - #############################################

05:26:41.287 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:41.287 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:41.287 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:41.287 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:41.287 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:41.287 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:41.287 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:41.287 [main] [30mTRACE[m  - ###############################################
05:26:41.287 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.287 [main] [30mTRACE[m  - ###############################################
05:26:41.287 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.287 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.287 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.287 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.287 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.287 [main] [30mTRACE[m  - #############################################
05:26:41.287 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.287 [main] [30mTRACE[m  - #############################################

05:26:41.287 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:41.287 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:41.287 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:41.288 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.288 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.288 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.288 [main] [30mTRACE[m  - #############################################
05:26:41.288 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.288 [main] [30mTRACE[m  - #############################################

05:26:41.288 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:41.288 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:41.288 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:41.288 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.288 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.288 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.288 [main] [30mTRACE[m  - #############################################
05:26:41.288 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.288 [main] [30mTRACE[m  - #############################################

05:26:41.288 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:41.288 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:41.288 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:41.288 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:41.288 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.288 [main] [30mTRACE[m  - ###############################################
05:26:41.288 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.288 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.288 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.288 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.288 [main] [30mTRACE[m  - #############################################
05:26:41.289 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.289 [main] [30mTRACE[m  - #############################################

05:26:41.289 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:41.289 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
05:26:41.289 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:41.289 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:41.289 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:41.289 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:41.289 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:41.289 [main] [30mTRACE[m  - ###############################################
05:26:41.289 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:41.289 [main] [30mTRACE[m  - ###############################################
05:26:41.289 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:41.289 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:41.289 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.289 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:41.289 [main] [36mDEBUG[m  - Index de la lettre
05:26:41.289 [main] [30mTRACE[m  - #############################################
05:26:41.289 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:41.289 [main] [30mTRACE[m  - #############################################

05:26:41.289 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:41.289 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
05:26:41.289 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:41.289 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:41.289 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:41.289 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:41.289 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:41.289 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:41.289 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
05:26:41.289 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:41.289 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:41.289 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:41.289 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:41.289 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:41.289 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
05:26:41.289 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
05:26:41.289 [main] [30mTRACE[m  - ##################################################
05:26:41.289 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:41.289 [main] [30mTRACE[m  - ##################################################

05:26:41.289 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:42.100 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:42.100 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:42.100 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:42.100 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 17
05:26:42.100 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:42.305 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:42.305 [main] [30mTRACE[m  - ##############################################################
05:26:42.305 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:42.305 [main] [30mTRACE[m  - ##############################################################
05:26:42.305 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
05:26:42.305 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
05:26:42.305 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
05:26:42.305 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:42.305 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:42.305 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:42.306 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:42.306 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:42.306 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:42.306 [main] [30mTRACE[m  - ############################################################
05:26:42.306 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:42.306 [main] [30mTRACE[m  - ############################################################

05:26:42.306 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:42.306 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:42.306 [main] [30mTRACE[m  - ##########################
05:26:42.306 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:42.306 [main] [30mTRACE[m  - ##########################

05:26:42.306 [main] [30mTRACE[m  - ############################
05:26:42.306 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:42.306 [main] [30mTRACE[m  - ############################
05:26:42.306 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:42.306 [main] [30mTRACE[m  - #####################################
05:26:42.306 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:42.306 [main] [30mTRACE[m  - #####################################
05:26:42.306 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:42.306 [main] [30mTRACE[m  - ###########################################################
05:26:42.306 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:42.306 [main] [30mTRACE[m  - ###########################################################
05:26:42.306 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:42.306 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:42.306 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, C, A, A, B]
05:26:42.306 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, false]
05:26:42.306 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:42.307 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:42.307 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:42.307 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:42.307 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:42.307 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:42.307 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:42.307 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:42.307 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:42.307 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
05:26:42.307 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
05:26:42.307 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:42.307 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:42.307 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:42.307 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:42.307 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:42.307 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:42.307 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:42.307 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
05:26:42.307 [main] [30mTRACE[m  - ###############################################
05:26:42.307 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.307 [main] [30mTRACE[m  - ###############################################
05:26:42.307 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.307 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.307 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.307 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.307 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.308 [main] [30mTRACE[m  - #############################################
05:26:42.308 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.308 [main] [30mTRACE[m  - #############################################

05:26:42.308 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:42.308 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:42.308 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:42.308 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:42.308 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:42.308 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:42.308 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:42.308 [main] [30mTRACE[m  - #########################################################
05:26:42.308 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:42.308 [main] [30mTRACE[m  - #########################################################

05:26:42.308 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:42.308 [main] [30mTRACE[m  - ###################################
05:26:42.308 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:42.308 [main] [30mTRACE[m  - ###################################

05:26:42.308 [main] [30mTRACE[m  - ###########################################################################################################
05:26:42.308 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:42.308 [main] [30mTRACE[m  - ###########################################################################################################
05:26:42.308 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:42.308 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:42.308 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:42.309 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  17
05:26:42.309 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, D, A, A, B]
05:26:42.309 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, D, A, A, B]
05:26:42.309 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
05:26:42.309 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
05:26:42.309 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:42.309 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:42.310 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, false]
05:26:42.311 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
05:26:42.311 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
05:26:42.311 [main] [36mDEBUG[m  - ch_NewLetter :                                D
05:26:42.311 [main] [30mTRACE[m  - ###########################################################################################################
05:26:42.311 [main] [30mTRACE[m  - ###########################################################################################################
05:26:42.311 [main] [30mTRACE[m  - ###########################################################################################################

05:26:42.311 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:42.311 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDDAAB
05:26:42.311 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDDAAB
05:26:42.515 [main] [30mTRACE[m  - ####################################################
05:26:42.515 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:42.515 [main] [30mTRACE[m  - ####################################################
05:26:42.515 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.515 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:42.515 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:42.515 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, D, A, A, B]
05:26:42.515 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:42.515 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:42.515 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:42.515 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, false]
05:26:42.515 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:42.516 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:42.516 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:42.516 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:42.516 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:42.516 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:42.516 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:42.516 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:42.516 [main] [30mTRACE[m  - ###############################################
05:26:42.516 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.516 [main] [30mTRACE[m  - ###############################################
05:26:42.516 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.516 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.516 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.516 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.516 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.516 [main] [30mTRACE[m  - #############################################
05:26:42.517 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.517 [main] [30mTRACE[m  - #############################################

05:26:42.517 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:42.517 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:42.517 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:42.517 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:42.517 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:42.517 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:42.517 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:42.517 [main] [30mTRACE[m  - ###############################################
05:26:42.517 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.517 [main] [30mTRACE[m  - ###############################################
05:26:42.517 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.517 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.517 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.517 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.517 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.517 [main] [30mTRACE[m  - #############################################
05:26:42.517 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.517 [main] [30mTRACE[m  - #############################################

05:26:42.517 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:42.517 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:42.517 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:42.517 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:42.517 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:42.518 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:42.518 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:42.518 [main] [30mTRACE[m  - ###############################################
05:26:42.518 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.519 [main] [30mTRACE[m  - ###############################################
05:26:42.519 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.519 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.519 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.519 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.519 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.519 [main] [30mTRACE[m  - #############################################
05:26:42.519 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.519 [main] [30mTRACE[m  - #############################################

05:26:42.519 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:42.519 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:42.520 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:42.520 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:42.520 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:42.520 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:42.520 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:42.520 [main] [30mTRACE[m  - ###############################################
05:26:42.520 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.520 [main] [30mTRACE[m  - ###############################################
05:26:42.520 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.520 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.520 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.520 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.520 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.520 [main] [30mTRACE[m  - #############################################
05:26:42.520 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.520 [main] [30mTRACE[m  - #############################################

05:26:42.520 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:42.520 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:42.520 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:42.521 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:42.521 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:42.521 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:42.521 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:42.521 [main] [30mTRACE[m  - ###############################################
05:26:42.521 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.521 [main] [30mTRACE[m  - ###############################################
05:26:42.521 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.521 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.521 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.521 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.521 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.522 [main] [30mTRACE[m  - #############################################
05:26:42.522 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.522 [main] [30mTRACE[m  - #############################################

05:26:42.522 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:42.522 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:42.522 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:42.522 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
05:26:42.522 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:42.522 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:42.522 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:42.522 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:42.522 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:42.522 [main] [30mTRACE[m  - ###############################################
05:26:42.522 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:42.522 [main] [30mTRACE[m  - ###############################################
05:26:42.522 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:42.522 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:42.522 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.523 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:42.523 [main] [36mDEBUG[m  - Index de la lettre
05:26:42.523 [main] [30mTRACE[m  - #############################################
05:26:42.523 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:42.523 [main] [30mTRACE[m  - #############################################

05:26:42.523 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:42.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:42.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, true]
05:26:42.523 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 0, 0]
05:26:42.523 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:42.523 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:42.523 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:42.523 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:42.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:42.523 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:42.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:42.523 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
05:26:42.523 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:42.523 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:42.523 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:42.523 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:42.523 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:42.523 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
05:26:42.523 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
05:26:42.523 [main] [30mTRACE[m  - ##################################################
05:26:42.523 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:42.523 [main] [30mTRACE[m  - ##################################################

05:26:42.523 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:43.335 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:43.335 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:43.335 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:43.335 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 18
05:26:43.335 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:43.536 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:43.536 [main] [30mTRACE[m  - ##############################################################
05:26:43.536 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:43.536 [main] [30mTRACE[m  - ##############################################################
05:26:43.536 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
05:26:43.536 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
05:26:43.536 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
05:26:43.536 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:43.536 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:43.536 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:43.536 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:43.536 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:43.536 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:43.536 [main] [30mTRACE[m  - ############################################################
05:26:43.537 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:43.537 [main] [30mTRACE[m  - ############################################################

05:26:43.537 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:43.537 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:43.537 [main] [30mTRACE[m  - ##########################
05:26:43.537 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:43.537 [main] [30mTRACE[m  - ##########################

05:26:43.537 [main] [30mTRACE[m  - ############################
05:26:43.537 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:43.537 [main] [30mTRACE[m  - ############################
05:26:43.537 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:43.537 [main] [30mTRACE[m  - #####################################
05:26:43.537 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:43.537 [main] [30mTRACE[m  - #####################################
05:26:43.537 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:43.537 [main] [30mTRACE[m  - ###########################################################
05:26:43.537 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:43.537 [main] [30mTRACE[m  - ###########################################################
05:26:43.537 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:43.537 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:43.537 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, D, A, A, B]
05:26:43.538 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, true, false]
05:26:43.538 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:43.538 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:43.538 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:43.538 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:43.538 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:43.538 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:43.538 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:43.538 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:43.538 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:43.538 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
05:26:43.538 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
05:26:43.538 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:43.538 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:43.538 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:43.538 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:43.538 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:43.538 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:43.538 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:43.538 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:43.538 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
05:26:43.538 [main] [30mTRACE[m  - ###############################################
05:26:43.538 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.538 [main] [30mTRACE[m  - ###############################################
05:26:43.538 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.538 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.538 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.538 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.539 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.539 [main] [30mTRACE[m  - #############################################
05:26:43.539 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.539 [main] [30mTRACE[m  - #############################################

05:26:43.539 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:43.539 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:43.539 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:43.539 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:43.539 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:43.539 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:43.539 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:43.539 [main] [30mTRACE[m  - #########################################################
05:26:43.539 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:43.539 [main] [30mTRACE[m  - #########################################################

05:26:43.539 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:43.539 [main] [30mTRACE[m  - ###################################
05:26:43.539 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:43.539 [main] [30mTRACE[m  - ###################################

05:26:43.539 [main] [30mTRACE[m  - ###########################################################################################################
05:26:43.539 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:43.539 [main] [30mTRACE[m  - ###########################################################################################################
05:26:43.539 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:43.539 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:43.539 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:43.539 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  18
05:26:43.539 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, A, A, B]
05:26:43.539 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, A, A, B]
05:26:43.540 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
05:26:43.540 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
05:26:43.540 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:43.540 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:43.542 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, true, false]
05:26:43.542 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
05:26:43.542 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
05:26:43.542 [main] [36mDEBUG[m  - ch_NewLetter :                                E
05:26:43.542 [main] [30mTRACE[m  - ###########################################################################################################
05:26:43.542 [main] [30mTRACE[m  - ###########################################################################################################
05:26:43.542 [main] [30mTRACE[m  - ###########################################################################################################

05:26:43.542 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:43.542 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEAAB
05:26:43.542 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEAAB
05:26:43.745 [main] [30mTRACE[m  - ####################################################
05:26:43.745 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:43.745 [main] [30mTRACE[m  - ####################################################
05:26:43.745 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.745 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:43.745 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:43.745 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, A, A, B]
05:26:43.745 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:43.746 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:43.746 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:43.746 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, true, false]
05:26:43.746 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:43.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:43.746 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:43.746 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:43.746 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:43.746 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:43.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:43.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:43.748 [main] [30mTRACE[m  - ###############################################
05:26:43.748 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.748 [main] [30mTRACE[m  - ###############################################
05:26:43.748 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.748 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.748 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.748 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.748 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.748 [main] [30mTRACE[m  - #############################################
05:26:43.748 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.748 [main] [30mTRACE[m  - #############################################

05:26:43.749 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:43.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:43.749 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:43.750 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:43.750 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:43.750 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:43.751 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:43.751 [main] [30mTRACE[m  - ###############################################
05:26:43.751 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.751 [main] [30mTRACE[m  - ###############################################
05:26:43.751 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.752 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.752 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.752 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.752 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.752 [main] [30mTRACE[m  - #############################################
05:26:43.752 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.752 [main] [30mTRACE[m  - #############################################

05:26:43.752 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:43.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:43.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:43.753 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:43.753 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:43.753 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:43.753 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:43.753 [main] [30mTRACE[m  - ###############################################
05:26:43.753 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.753 [main] [30mTRACE[m  - ###############################################
05:26:43.753 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.753 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.753 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.753 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.753 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.753 [main] [30mTRACE[m  - #############################################
05:26:43.753 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.753 [main] [30mTRACE[m  - #############################################

05:26:43.753 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:43.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:43.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:43.753 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:43.753 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:43.753 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:43.753 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:43.753 [main] [30mTRACE[m  - ###############################################
05:26:43.753 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.753 [main] [30mTRACE[m  - ###############################################
05:26:43.753 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.753 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.753 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.753 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.753 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.753 [main] [30mTRACE[m  - #############################################
05:26:43.753 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.753 [main] [30mTRACE[m  - #############################################

05:26:43.753 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:43.753 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:43.754 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:43.754 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:43.754 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:43.754 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:43.754 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:43.754 [main] [30mTRACE[m  - ###############################################
05:26:43.754 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.754 [main] [30mTRACE[m  - ###############################################
05:26:43.754 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.754 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.754 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.754 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.754 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.754 [main] [30mTRACE[m  - #############################################
05:26:43.754 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.754 [main] [30mTRACE[m  - #############################################

05:26:43.754 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:43.754 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:43.754 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, true, false]
05:26:43.754 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 0, 0]
05:26:43.754 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:43.754 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:43.754 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:43.754 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:43.754 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
05:26:43.754 [main] [30mTRACE[m  - ###############################################
05:26:43.754 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.754 [main] [30mTRACE[m  - ###############################################
05:26:43.754 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.754 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.754 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.755 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.755 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.755 [main] [30mTRACE[m  - #############################################
05:26:43.755 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.755 [main] [30mTRACE[m  - #############################################

05:26:43.755 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
05:26:43.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:43.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:43.755 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:43.755 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:43.755 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:43.755 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:43.755 [main] [30mTRACE[m  - ###############################################
05:26:43.755 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:43.755 [main] [30mTRACE[m  - ###############################################
05:26:43.755 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:43.755 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:43.755 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.755 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:43.755 [main] [36mDEBUG[m  - Index de la lettre
05:26:43.755 [main] [30mTRACE[m  - #############################################
05:26:43.755 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:43.755 [main] [30mTRACE[m  - #############################################

05:26:43.755 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:43.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:43.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:43.755 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
05:26:43.755 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:43.755 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:43.755 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:43.755 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:43.755 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:43.756 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:43.756 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:43.756 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
05:26:43.756 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
05:26:43.756 [main] [30mTRACE[m  - ##################################################
05:26:43.756 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:43.756 [main] [30mTRACE[m  - ##################################################

05:26:43.756 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:44.569 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:44.569 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:44.569 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:44.569 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 19
05:26:44.569 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:44.774 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:44.775 [main] [30mTRACE[m  - ##############################################################
05:26:44.775 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:44.775 [main] [30mTRACE[m  - ##############################################################
05:26:44.775 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
05:26:44.775 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
05:26:44.775 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
05:26:44.775 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
05:26:44.775 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:44.775 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
05:26:44.776 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
05:26:44.776 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
05:26:44.776 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
05:26:44.776 [main] [30mTRACE[m  - ############################################################
05:26:44.776 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:44.777 [main] [30mTRACE[m  - ############################################################

05:26:44.777 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:44.777 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
05:26:44.777 [main] [32mINFO [m  - IF - "=" appara√Æt
05:26:44.777 [main] [30mTRACE[m  - ##############################################
05:26:44.777 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
05:26:44.777 [main] [30mTRACE[m  - ##############################################
05:26:44.777 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
05:26:44.777 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
05:26:44.777 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
05:26:44.777 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
05:26:44.777 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
05:26:44.777 [main] [30mTRACE[m  - ###############################################
05:26:44.777 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.777 [main] [30mTRACE[m  - ###############################################
05:26:44.777 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.777 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.778 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.778 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.778 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.778 [main] [30mTRACE[m  - #############################################
05:26:44.778 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.778 [main] [30mTRACE[m  - #############################################

05:26:44.778 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:44.778 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.778 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:44.778 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:44.778 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.778 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:44.778 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:44.778 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.779 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:44.779 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:44.779 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.779 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:44.779 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:44.779 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.779 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
05:26:44.779 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.779 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
05:26:44.779 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
05:26:44.779 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
05:26:44.779 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
05:26:44.779 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:44.779 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
05:26:44.779 [main] [30mTRACE[m  - ############################################
05:26:44.779 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
05:26:44.779 [main] [30mTRACE[m  - ############################################

05:26:44.779 [main] [32mINFO [m  - Lancement √©galit√© positive
05:26:44.779 [main] [30mTRACE[m  - ##########################
05:26:44.779 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:44.780 [main] [30mTRACE[m  - ##########################

05:26:44.780 [main] [30mTRACE[m  - ############################
05:26:44.780 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:44.780 [main] [30mTRACE[m  - ############################
05:26:44.780 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:44.780 [main] [30mTRACE[m  - #####################################
05:26:44.780 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:44.780 [main] [30mTRACE[m  - #####################################
05:26:44.780 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:44.780 [main] [30mTRACE[m  - ###########################################################
05:26:44.780 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:44.780 [main] [30mTRACE[m  - ###########################################################
05:26:44.780 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:44.780 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:44.780 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, A, A, B]
05:26:44.780 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:44.781 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:44.781 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:44.781 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:44.782 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:44.782 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
05:26:44.783 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
05:26:44.783 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:44.783 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:44.783 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:44.783 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:44.783 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:44.783 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
05:26:44.783 [main] [30mTRACE[m  - ###############################################
05:26:44.783 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.783 [main] [30mTRACE[m  - ###############################################
05:26:44.783 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.783 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.783 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.784 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.784 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.784 [main] [30mTRACE[m  - #############################################
05:26:44.785 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.785 [main] [30mTRACE[m  - #############################################

05:26:44.785 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:44.785 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:44.785 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:44.785 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:44.785 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:44.785 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:44.785 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:44.786 [main] [30mTRACE[m  - #########################################################
05:26:44.786 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:44.786 [main] [30mTRACE[m  - #########################################################

05:26:44.786 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:44.786 [main] [30mTRACE[m  - ###################################
05:26:44.787 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:44.787 [main] [30mTRACE[m  - ###################################

05:26:44.787 [main] [30mTRACE[m  - ###########################################################################################################
05:26:44.787 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:44.787 [main] [30mTRACE[m  - ###########################################################################################################
05:26:44.787 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:44.787 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:44.787 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:44.787 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  19
05:26:44.787 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, B, A, B]
05:26:44.787 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, B, A, B]
05:26:44.787 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
05:26:44.787 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
05:26:44.787 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
05:26:44.787 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:44.788 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, false]
05:26:44.788 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
05:26:44.788 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
05:26:44.788 [main] [36mDEBUG[m  - ch_NewLetter :                                B
05:26:44.788 [main] [30mTRACE[m  - ###########################################################################################################
05:26:44.788 [main] [30mTRACE[m  - ###########################################################################################################
05:26:44.788 [main] [30mTRACE[m  - ###########################################################################################################

05:26:44.788 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:44.788 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEBAB
05:26:44.788 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEBAB
05:26:44.990 [main] [30mTRACE[m  - ####################################################
05:26:44.990 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:44.990 [main] [30mTRACE[m  - ####################################################
05:26:44.990 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:44.991 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:44.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
05:26:44.991 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:44.991 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:44.991 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:44.991 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, false]
05:26:44.991 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:44.991 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:44.991 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:44.991 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:44.991 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:44.991 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.991 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:44.991 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:44.991 [main] [30mTRACE[m  - ###############################################
05:26:44.991 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.991 [main] [30mTRACE[m  - ###############################################
05:26:44.991 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.991 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.991 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.991 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.991 [main] [30mTRACE[m  - #############################################
05:26:44.992 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.992 [main] [30mTRACE[m  - #############################################

05:26:44.992 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:44.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:44.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:44.992 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:44.992 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.992 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:44.992 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:44.992 [main] [30mTRACE[m  - ###############################################
05:26:44.992 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.992 [main] [30mTRACE[m  - ###############################################
05:26:44.992 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.992 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.992 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.992 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.992 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.992 [main] [30mTRACE[m  - #############################################
05:26:44.992 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.992 [main] [30mTRACE[m  - #############################################

05:26:44.992 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:44.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:44.992 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:44.992 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:44.992 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.992 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:44.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:44.993 [main] [30mTRACE[m  - ###############################################
05:26:44.993 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.993 [main] [30mTRACE[m  - ###############################################
05:26:44.993 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.993 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.993 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.993 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.993 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.993 [main] [30mTRACE[m  - #############################################
05:26:44.993 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.993 [main] [30mTRACE[m  - #############################################

05:26:44.993 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:44.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:44.993 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:44.993 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:44.993 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.993 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:44.993 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:44.993 [main] [30mTRACE[m  - ###############################################
05:26:44.993 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.993 [main] [30mTRACE[m  - ###############################################
05:26:44.993 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.993 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.993 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.994 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.994 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.995 [main] [30mTRACE[m  - #############################################
05:26:44.995 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.995 [main] [30mTRACE[m  - #############################################

05:26:44.995 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:44.995 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:44.995 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:44.995 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:44.995 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.995 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:44.995 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:44.995 [main] [30mTRACE[m  - ###############################################
05:26:44.995 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.995 [main] [30mTRACE[m  - ###############################################
05:26:44.995 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.995 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.996 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.996 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.996 [main] [36mDEBUG[m  - Index de la lettre
05:26:44.996 [main] [30mTRACE[m  - #############################################
05:26:44.997 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:44.997 [main] [30mTRACE[m  - #############################################

05:26:44.997 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
05:26:44.998 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:44.998 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:44.999 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
05:26:44.999 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:44.999 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:44.999 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:44.999 [main] [30mTRACE[m  - ###############################################
05:26:44.999 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:44.999 [main] [30mTRACE[m  - ###############################################
05:26:44.999 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:44.999 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:44.999 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:44.999 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:45.000 [main] [36mDEBUG[m  - Index de la lettre
05:26:45.000 [main] [30mTRACE[m  - #############################################
05:26:45.000 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:45.000 [main] [30mTRACE[m  - #############################################

05:26:45.000 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:45.000 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:45.000 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:45.000 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:45.000 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:45.000 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:45.000 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:45.000 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:45.000 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:45.000 [main] [30mTRACE[m  - ###############################################
05:26:45.000 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:45.000 [main] [30mTRACE[m  - ###############################################
05:26:45.000 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:45.000 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:45.000 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:45.000 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:45.000 [main] [36mDEBUG[m  - Index de la lettre
05:26:45.000 [main] [30mTRACE[m  - #############################################
05:26:45.001 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:45.001 [main] [30mTRACE[m  - #############################################

05:26:45.001 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:45.001 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:45.001 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:45.001 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
05:26:45.001 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:45.001 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:45.001 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:45.001 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:45.001 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:45.001 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:45.001 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:45.001 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
05:26:45.001 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
05:26:45.001 [main] [30mTRACE[m  - ##################################################
05:26:45.001 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:45.001 [main] [30mTRACE[m  - ##################################################

05:26:45.001 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:45.811 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:45.811 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:45.811 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:45.812 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 20
05:26:45.812 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:46.014 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:46.014 [main] [30mTRACE[m  - ##############################################################
05:26:46.014 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:46.014 [main] [30mTRACE[m  - ##############################################################
05:26:46.014 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
05:26:46.014 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
05:26:46.014 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
05:26:46.014 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:46.015 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:46.015 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:46.015 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:46.015 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:46.015 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:46.015 [main] [30mTRACE[m  - ############################################################
05:26:46.015 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:46.015 [main] [30mTRACE[m  - ############################################################

05:26:46.015 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:46.015 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:46.015 [main] [30mTRACE[m  - ##########################
05:26:46.015 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:46.015 [main] [30mTRACE[m  - ##########################

05:26:46.015 [main] [30mTRACE[m  - ############################
05:26:46.015 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:46.015 [main] [30mTRACE[m  - ############################
05:26:46.015 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:46.015 [main] [30mTRACE[m  - #####################################
05:26:46.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:46.015 [main] [30mTRACE[m  - #####################################
05:26:46.015 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:46.015 [main] [30mTRACE[m  - ###########################################################
05:26:46.015 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:46.015 [main] [30mTRACE[m  - ###########################################################
05:26:46.015 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:46.015 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:46.015 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, B, A, B]
05:26:46.015 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:46.015 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:46.015 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:46.015 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:46.015 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:46.015 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
05:26:46.015 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
05:26:46.015 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:46.016 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:46.016 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:46.016 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:46.016 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:46.016 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:46.016 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
05:26:46.016 [main] [30mTRACE[m  - ###############################################
05:26:46.016 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.016 [main] [30mTRACE[m  - ###############################################
05:26:46.016 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.016 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.016 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.016 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.016 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.016 [main] [30mTRACE[m  - #############################################
05:26:46.016 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.016 [main] [30mTRACE[m  - #############################################

05:26:46.016 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:46.016 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:46.016 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:46.016 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:46.016 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:46.016 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:46.016 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:46.016 [main] [30mTRACE[m  - #########################################################
05:26:46.016 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:46.016 [main] [30mTRACE[m  - #########################################################

05:26:46.016 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:46.016 [main] [30mTRACE[m  - ###################################
05:26:46.016 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:46.016 [main] [30mTRACE[m  - ###################################

05:26:46.016 [main] [30mTRACE[m  - ###########################################################################################################
05:26:46.016 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:46.016 [main] [30mTRACE[m  - ###########################################################################################################
05:26:46.016 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:46.016 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:46.016 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:46.016 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  20
05:26:46.016 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, C, A, B]
05:26:46.016 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, C, A, B]
05:26:46.016 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
05:26:46.017 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
05:26:46.017 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:46.017 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:46.017 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, false]
05:26:46.018 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
05:26:46.018 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
05:26:46.018 [main] [36mDEBUG[m  - ch_NewLetter :                                C
05:26:46.018 [main] [30mTRACE[m  - ###########################################################################################################
05:26:46.018 [main] [30mTRACE[m  - ###########################################################################################################
05:26:46.018 [main] [30mTRACE[m  - ###########################################################################################################

05:26:46.018 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:46.018 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDECAB
05:26:46.018 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDECAB
05:26:46.219 [main] [30mTRACE[m  - ####################################################
05:26:46.219 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:46.219 [main] [30mTRACE[m  - ####################################################
05:26:46.219 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.219 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:46.219 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:46.219 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
05:26:46.219 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:46.220 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:46.220 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:46.220 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, false]
05:26:46.220 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:46.220 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:46.220 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:46.220 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:46.220 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:46.220 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.220 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:46.220 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:46.220 [main] [30mTRACE[m  - ###############################################
05:26:46.220 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.220 [main] [30mTRACE[m  - ###############################################
05:26:46.220 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.220 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.220 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.220 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.221 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.221 [main] [30mTRACE[m  - #############################################
05:26:46.221 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.221 [main] [30mTRACE[m  - #############################################

05:26:46.221 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:46.221 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:46.221 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:46.221 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:46.221 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.221 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:46.221 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:46.221 [main] [30mTRACE[m  - ###############################################
05:26:46.221 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.221 [main] [30mTRACE[m  - ###############################################
05:26:46.221 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.221 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.221 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.221 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.221 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.222 [main] [30mTRACE[m  - #############################################
05:26:46.222 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.222 [main] [30mTRACE[m  - #############################################

05:26:46.222 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:46.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:46.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:46.222 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:46.222 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.222 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:46.222 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:46.222 [main] [30mTRACE[m  - ###############################################
05:26:46.222 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.222 [main] [30mTRACE[m  - ###############################################
05:26:46.222 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.222 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.222 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.222 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.222 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.222 [main] [30mTRACE[m  - #############################################
05:26:46.222 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.222 [main] [30mTRACE[m  - #############################################

05:26:46.222 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:46.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:46.222 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:46.222 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:46.222 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.223 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:46.223 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:46.223 [main] [30mTRACE[m  - ###############################################
05:26:46.223 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.223 [main] [30mTRACE[m  - ###############################################
05:26:46.223 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.223 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.223 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.223 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.223 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.223 [main] [30mTRACE[m  - #############################################
05:26:46.223 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.223 [main] [30mTRACE[m  - #############################################

05:26:46.223 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:46.223 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:46.223 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:46.223 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:46.223 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.223 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:46.223 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:46.224 [main] [30mTRACE[m  - ###############################################
05:26:46.224 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.224 [main] [30mTRACE[m  - ###############################################
05:26:46.224 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.224 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.224 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.224 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.224 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.224 [main] [30mTRACE[m  - #############################################
05:26:46.224 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.224 [main] [30mTRACE[m  - #############################################

05:26:46.224 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
05:26:46.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:46.224 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:46.224 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
05:26:46.225 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:46.226 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:46.226 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:46.226 [main] [30mTRACE[m  - ###############################################
05:26:46.226 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.226 [main] [30mTRACE[m  - ###############################################
05:26:46.226 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.227 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.227 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.227 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.227 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.227 [main] [30mTRACE[m  - #############################################
05:26:46.227 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.227 [main] [30mTRACE[m  - #############################################

05:26:46.227 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:46.227 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:46.227 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:46.227 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:46.227 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:46.227 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:46.227 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:46.227 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:46.227 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:46.227 [main] [30mTRACE[m  - ###############################################
05:26:46.227 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:46.227 [main] [30mTRACE[m  - ###############################################
05:26:46.227 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:46.227 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:46.228 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.228 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:46.228 [main] [36mDEBUG[m  - Index de la lettre
05:26:46.228 [main] [30mTRACE[m  - #############################################
05:26:46.228 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:46.228 [main] [30mTRACE[m  - #############################################

05:26:46.228 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:46.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:46.228 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:46.228 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
05:26:46.228 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:46.228 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:46.228 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:46.229 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:46.230 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:46.230 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:46.231 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:46.231 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
05:26:46.231 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
05:26:46.231 [main] [30mTRACE[m  - ##################################################
05:26:46.231 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:46.231 [main] [30mTRACE[m  - ##################################################

05:26:46.232 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:47.042 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:47.042 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:47.042 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:47.042 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 21
05:26:47.042 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:47.245 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:47.245 [main] [30mTRACE[m  - ##############################################################
05:26:47.245 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:47.245 [main] [30mTRACE[m  - ##############################################################
05:26:47.245 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
05:26:47.245 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
05:26:47.245 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
05:26:47.245 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:47.245 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:47.245 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:47.245 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:47.245 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:47.245 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:47.245 [main] [30mTRACE[m  - ############################################################
05:26:47.245 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:47.245 [main] [30mTRACE[m  - ############################################################

05:26:47.245 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:47.245 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:47.245 [main] [30mTRACE[m  - ##########################
05:26:47.245 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:47.246 [main] [30mTRACE[m  - ##########################

05:26:47.246 [main] [30mTRACE[m  - ############################
05:26:47.246 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:47.246 [main] [30mTRACE[m  - ############################
05:26:47.246 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:47.246 [main] [30mTRACE[m  - #####################################
05:26:47.246 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:47.246 [main] [30mTRACE[m  - #####################################
05:26:47.246 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:47.246 [main] [30mTRACE[m  - ###########################################################
05:26:47.246 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:47.246 [main] [30mTRACE[m  - ###########################################################
05:26:47.246 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:47.246 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:47.246 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, C, A, B]
05:26:47.246 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:47.246 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:47.246 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:47.246 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:47.246 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:47.246 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
05:26:47.246 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
05:26:47.247 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:47.247 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:47.247 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:47.247 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:47.247 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:47.247 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:47.247 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:47.247 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
05:26:47.247 [main] [30mTRACE[m  - ###############################################
05:26:47.247 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.247 [main] [30mTRACE[m  - ###############################################
05:26:47.247 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.247 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.247 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.247 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.247 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.247 [main] [30mTRACE[m  - #############################################
05:26:47.247 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.247 [main] [30mTRACE[m  - #############################################

05:26:47.247 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:47.247 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:47.247 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:47.247 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:47.247 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:47.247 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:47.247 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:47.247 [main] [30mTRACE[m  - #########################################################
05:26:47.247 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:47.247 [main] [30mTRACE[m  - #########################################################

05:26:47.247 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:47.247 [main] [30mTRACE[m  - ###################################
05:26:47.247 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:47.247 [main] [30mTRACE[m  - ###################################

05:26:47.247 [main] [30mTRACE[m  - ###########################################################################################################
05:26:47.247 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:47.248 [main] [30mTRACE[m  - ###########################################################################################################
05:26:47.248 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:47.248 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:47.248 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:47.248 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  21
05:26:47.248 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, D, A, B]
05:26:47.248 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, D, A, B]
05:26:47.248 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
05:26:47.248 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
05:26:47.248 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:47.248 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:47.249 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, false]
05:26:47.249 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
05:26:47.249 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
05:26:47.249 [main] [36mDEBUG[m  - ch_NewLetter :                                D
05:26:47.249 [main] [30mTRACE[m  - ###########################################################################################################
05:26:47.249 [main] [30mTRACE[m  - ###########################################################################################################
05:26:47.249 [main] [30mTRACE[m  - ###########################################################################################################

05:26:47.249 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:47.249 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEDAB
05:26:47.249 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEDAB
05:26:47.451 [main] [30mTRACE[m  - ####################################################
05:26:47.452 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:47.452 [main] [30mTRACE[m  - ####################################################
05:26:47.452 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.452 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:47.452 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:47.452 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
05:26:47.452 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:47.452 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:47.452 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:47.453 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, false]
05:26:47.454 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:47.454 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:47.454 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:47.454 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:47.454 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:47.454 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.454 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:47.454 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:47.454 [main] [30mTRACE[m  - ###############################################
05:26:47.454 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.455 [main] [30mTRACE[m  - ###############################################
05:26:47.455 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.455 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.455 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.455 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.455 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.455 [main] [30mTRACE[m  - #############################################
05:26:47.455 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.455 [main] [30mTRACE[m  - #############################################

05:26:47.455 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:47.455 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:47.455 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:47.455 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:47.455 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.455 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:47.455 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:47.455 [main] [30mTRACE[m  - ###############################################
05:26:47.456 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.456 [main] [30mTRACE[m  - ###############################################
05:26:47.456 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.456 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.456 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.456 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.456 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.456 [main] [30mTRACE[m  - #############################################
05:26:47.456 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.456 [main] [30mTRACE[m  - #############################################

05:26:47.456 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:47.456 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:47.456 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:47.456 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:47.456 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.456 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:47.457 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:47.457 [main] [30mTRACE[m  - ###############################################
05:26:47.457 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.457 [main] [30mTRACE[m  - ###############################################
05:26:47.457 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.457 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.457 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.457 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.457 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.457 [main] [30mTRACE[m  - #############################################
05:26:47.457 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.457 [main] [30mTRACE[m  - #############################################

05:26:47.457 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:47.457 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:47.457 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:47.457 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:47.458 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.458 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:47.459 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:47.459 [main] [30mTRACE[m  - ###############################################
05:26:47.459 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.459 [main] [30mTRACE[m  - ###############################################
05:26:47.459 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.459 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.459 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.459 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.459 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.459 [main] [30mTRACE[m  - #############################################
05:26:47.459 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.459 [main] [30mTRACE[m  - #############################################

05:26:47.459 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:47.460 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:47.460 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:47.460 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:47.461 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.461 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:47.461 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:47.461 [main] [30mTRACE[m  - ###############################################
05:26:47.462 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.462 [main] [30mTRACE[m  - ###############################################
05:26:47.462 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.462 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.462 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.462 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.462 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.462 [main] [30mTRACE[m  - #############################################
05:26:47.462 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.462 [main] [30mTRACE[m  - #############################################

05:26:47.462 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
05:26:47.462 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:47.462 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:47.462 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
05:26:47.462 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:47.462 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:47.462 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:47.462 [main] [30mTRACE[m  - ###############################################
05:26:47.462 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.462 [main] [30mTRACE[m  - ###############################################
05:26:47.462 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.462 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.462 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.462 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.462 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.462 [main] [30mTRACE[m  - #############################################
05:26:47.462 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.463 [main] [30mTRACE[m  - #############################################

05:26:47.463 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:47.463 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:47.463 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:47.463 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:47.463 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:47.463 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:47.463 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:47.463 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:47.463 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:47.463 [main] [30mTRACE[m  - ###############################################
05:26:47.463 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:47.463 [main] [30mTRACE[m  - ###############################################
05:26:47.463 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:47.463 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:47.463 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.463 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:47.463 [main] [36mDEBUG[m  - Index de la lettre
05:26:47.463 [main] [30mTRACE[m  - #############################################
05:26:47.463 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:47.463 [main] [30mTRACE[m  - #############################################

05:26:47.463 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:47.463 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:47.464 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:47.464 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
05:26:47.464 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:47.464 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:47.464 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:47.464 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:47.464 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:47.464 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:47.464 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:47.464 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
05:26:47.464 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
05:26:47.464 [main] [30mTRACE[m  - ##################################################
05:26:47.464 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:47.464 [main] [30mTRACE[m  - ##################################################

05:26:47.464 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:48.279 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:48.279 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:48.279 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:48.279 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 22
05:26:48.279 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:48.482 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:48.482 [main] [30mTRACE[m  - ##############################################################
05:26:48.482 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:48.482 [main] [30mTRACE[m  - ##############################################################
05:26:48.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
05:26:48.482 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
05:26:48.482 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
05:26:48.482 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:48.482 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:48.482 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:48.482 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:48.482 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:48.483 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:48.483 [main] [30mTRACE[m  - ############################################################
05:26:48.483 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:48.483 [main] [30mTRACE[m  - ############################################################

05:26:48.483 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:48.483 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:48.483 [main] [30mTRACE[m  - ##########################
05:26:48.483 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:48.483 [main] [30mTRACE[m  - ##########################

05:26:48.483 [main] [30mTRACE[m  - ############################
05:26:48.483 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:48.483 [main] [30mTRACE[m  - ############################
05:26:48.483 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:48.483 [main] [30mTRACE[m  - #####################################
05:26:48.483 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:48.483 [main] [30mTRACE[m  - #####################################
05:26:48.483 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:48.483 [main] [30mTRACE[m  - ###########################################################
05:26:48.484 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:48.484 [main] [30mTRACE[m  - ###########################################################
05:26:48.484 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:48.484 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:48.484 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, D, A, B]
05:26:48.484 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:48.484 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:48.484 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:48.484 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:48.484 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.484 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.484 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.484 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.484 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.485 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:48.485 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:48.485 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
05:26:48.485 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
05:26:48.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:48.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:48.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:48.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:48.485 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:48.485 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:48.485 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:48.485 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:48.485 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
05:26:48.485 [main] [30mTRACE[m  - ###############################################
05:26:48.485 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.485 [main] [30mTRACE[m  - ###############################################
05:26:48.485 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.485 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.485 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.486 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.486 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.486 [main] [30mTRACE[m  - #############################################
05:26:48.486 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.486 [main] [30mTRACE[m  - #############################################

05:26:48.486 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:48.486 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:48.486 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:48.486 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:48.486 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:48.486 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:48.486 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:48.486 [main] [30mTRACE[m  - #########################################################
05:26:48.486 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:48.486 [main] [30mTRACE[m  - #########################################################

05:26:48.486 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:48.486 [main] [30mTRACE[m  - ###################################
05:26:48.486 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:48.486 [main] [30mTRACE[m  - ###################################

05:26:48.486 [main] [30mTRACE[m  - ###########################################################################################################
05:26:48.486 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:48.487 [main] [30mTRACE[m  - ###########################################################################################################
05:26:48.487 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:48.487 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:48.487 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:48.487 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  22
05:26:48.487 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, E, A, B]
05:26:48.487 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, E, A, B]
05:26:48.487 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
05:26:48.487 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
05:26:48.487 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:48.487 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:48.489 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, false]
05:26:48.489 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
05:26:48.489 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
05:26:48.489 [main] [36mDEBUG[m  - ch_NewLetter :                                E
05:26:48.489 [main] [30mTRACE[m  - ###########################################################################################################
05:26:48.489 [main] [30mTRACE[m  - ###########################################################################################################
05:26:48.489 [main] [30mTRACE[m  - ###########################################################################################################

05:26:48.489 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:48.490 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEEAB
05:26:48.490 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEEAB
05:26:48.692 [main] [30mTRACE[m  - ####################################################
05:26:48.692 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:48.692 [main] [30mTRACE[m  - ####################################################
05:26:48.693 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.693 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:48.693 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:48.693 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
05:26:48.694 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:48.694 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:48.694 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:48.695 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, false]
05:26:48.695 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:48.695 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:48.695 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:48.695 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:48.696 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:48.696 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.696 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:48.696 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:48.696 [main] [30mTRACE[m  - ###############################################
05:26:48.696 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.696 [main] [30mTRACE[m  - ###############################################
05:26:48.696 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.696 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.696 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.696 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.696 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.696 [main] [30mTRACE[m  - #############################################
05:26:48.696 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.696 [main] [30mTRACE[m  - #############################################

05:26:48.696 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:48.696 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:48.696 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:48.696 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:48.696 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.696 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:48.696 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:48.697 [main] [30mTRACE[m  - ###############################################
05:26:48.697 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.697 [main] [30mTRACE[m  - ###############################################
05:26:48.697 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.697 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.697 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.697 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.697 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.697 [main] [30mTRACE[m  - #############################################
05:26:48.697 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.697 [main] [30mTRACE[m  - #############################################

05:26:48.697 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:48.697 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:48.697 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:48.697 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:48.697 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.697 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:48.697 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:48.697 [main] [30mTRACE[m  - ###############################################
05:26:48.697 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.697 [main] [30mTRACE[m  - ###############################################
05:26:48.697 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.698 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.698 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.698 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.698 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.698 [main] [30mTRACE[m  - #############################################
05:26:48.698 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.698 [main] [30mTRACE[m  - #############################################

05:26:48.698 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:48.699 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:48.699 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:48.699 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:48.699 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.699 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:48.699 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:48.699 [main] [30mTRACE[m  - ###############################################
05:26:48.699 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.699 [main] [30mTRACE[m  - ###############################################
05:26:48.699 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.699 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.699 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.699 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.699 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.699 [main] [30mTRACE[m  - #############################################
05:26:48.699 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.699 [main] [30mTRACE[m  - #############################################

05:26:48.699 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:48.699 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:48.699 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:48.699 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:48.699 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.699 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:48.699 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:48.699 [main] [30mTRACE[m  - ###############################################
05:26:48.699 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.699 [main] [30mTRACE[m  - ###############################################
05:26:48.699 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.699 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.700 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.700 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.700 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.700 [main] [30mTRACE[m  - #############################################
05:26:48.700 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.700 [main] [30mTRACE[m  - #############################################

05:26:48.700 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
05:26:48.700 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:48.700 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:48.700 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
05:26:48.700 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:48.700 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:48.700 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:48.700 [main] [30mTRACE[m  - ###############################################
05:26:48.700 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.700 [main] [30mTRACE[m  - ###############################################
05:26:48.700 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.700 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.700 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.700 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.700 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.700 [main] [30mTRACE[m  - #############################################
05:26:48.700 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.700 [main] [30mTRACE[m  - #############################################

05:26:48.700 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:48.700 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:48.700 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:48.700 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:48.700 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:48.700 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:48.700 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:48.700 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:48.700 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:48.700 [main] [30mTRACE[m  - ###############################################
05:26:48.700 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:48.700 [main] [30mTRACE[m  - ###############################################
05:26:48.700 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:48.700 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:48.700 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.700 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:48.701 [main] [36mDEBUG[m  - Index de la lettre
05:26:48.701 [main] [30mTRACE[m  - #############################################
05:26:48.701 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:48.701 [main] [30mTRACE[m  - #############################################

05:26:48.701 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:48.701 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:48.701 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, true]
05:26:48.701 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 0]
05:26:48.701 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:48.701 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:48.701 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
05:26:48.701 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:48.701 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:48.701 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:48.701 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
05:26:48.701 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
05:26:48.701 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
05:26:48.701 [main] [30mTRACE[m  - ##################################################
05:26:48.701 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:48.701 [main] [30mTRACE[m  - ##################################################

05:26:48.701 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:49.515 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:49.515 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
05:26:49.515 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
05:26:49.515 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 23
05:26:49.515 [main] [32mINFO [m  - Injection (int) Compteur de tours
05:26:49.717 [main] [32mINFO [m  - IF - Apr√®s premier tour
05:26:49.717 [main] [30mTRACE[m  - ##############################################################
05:26:49.717 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:49.717 [main] [30mTRACE[m  - ##############################################################
05:26:49.717 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
05:26:49.717 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
05:26:49.717 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
05:26:49.717 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
05:26:49.717 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
05:26:49.717 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
05:26:49.717 [main] [32mINFO [m  - ELSE - Sinon ...
05:26:49.717 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
05:26:49.717 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
05:26:49.717 [main] [30mTRACE[m  - ############################################################
05:26:49.717 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
05:26:49.717 [main] [30mTRACE[m  - ############################################################

05:26:49.717 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
05:26:49.717 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
05:26:49.717 [main] [30mTRACE[m  - ##########################
05:26:49.717 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
05:26:49.717 [main] [30mTRACE[m  - ##########################

05:26:49.717 [main] [30mTRACE[m  - ############################
05:26:49.717 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
05:26:49.717 [main] [30mTRACE[m  - ############################
05:26:49.717 [main] [32mINFO [m  - IF - Mode "Duel"
05:26:49.717 [main] [30mTRACE[m  - #####################################
05:26:49.718 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
05:26:49.718 [main] [30mTRACE[m  - #####################################
05:26:49.718 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
05:26:49.718 [main] [30mTRACE[m  - ###########################################################
05:26:49.718 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:49.718 [main] [30mTRACE[m  - ###########################################################
05:26:49.718 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
05:26:49.718 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
05:26:49.718 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, B, C, D, E, E, A, B]
05:26:49.718 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, true, false]
05:26:49.718 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
05:26:49.718 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
05:26:49.718 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
05:26:49.718 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
05:26:49.718 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
05:26:49.718 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
05:26:49.718 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
05:26:49.718 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
05:26:49.719 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
05:26:49.719 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
05:26:49.719 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
05:26:49.719 [main] [30mTRACE[m  - ###############################################
05:26:49.719 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.719 [main] [30mTRACE[m  - ###############################################
05:26:49.719 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.719 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.719 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.719 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.719 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.719 [main] [30mTRACE[m  - #############################################
05:26:49.719 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.719 [main] [30mTRACE[m  - #############################################

05:26:49.719 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
05:26:49.719 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
05:26:49.719 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
05:26:49.719 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
05:26:49.719 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
05:26:49.719 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
05:26:49.719 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
05:26:49.719 [main] [30mTRACE[m  - #########################################################
05:26:49.719 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
05:26:49.719 [main] [30mTRACE[m  - #########################################################

05:26:49.719 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
05:26:49.719 [main] [30mTRACE[m  - ###################################
05:26:49.719 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
05:26:49.719 [main] [30mTRACE[m  - ###################################

05:26:49.719 [main] [30mTRACE[m  - ###########################################################################################################
05:26:49.719 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
05:26:49.719 [main] [30mTRACE[m  - ###########################################################################################################
05:26:49.719 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
05:26:49.720 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [A, B, C, D, E, F, A, B]
05:26:49.720 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [2, 2, 1, 1, 1, 1]
05:26:49.720 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  23
05:26:49.720 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, B, C, D, E, F, A, B]
05:26:49.720 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, B, C, D, E, F, A, B]
05:26:49.720 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
05:26:49.720 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
05:26:49.720 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
05:26:49.720 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

05:26:49.721 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, true, false]
05:26:49.721 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
05:26:49.721 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
05:26:49.721 [main] [36mDEBUG[m  - ch_NewLetter :                                F
05:26:49.721 [main] [30mTRACE[m  - ###########################################################################################################
05:26:49.721 [main] [30mTRACE[m  - ###########################################################################################################
05:26:49.721 [main] [30mTRACE[m  - ###########################################################################################################

05:26:49.721 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
05:26:49.722 [main] [36mDEBUG[m  - Incr√©mentation String() : ABCDEFAB
05:26:49.722 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : ABCDEFAB
05:26:49.924 [main] [30mTRACE[m  - ####################################################
05:26:49.924 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
05:26:49.924 [main] [30mTRACE[m  - ####################################################
05:26:49.924 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.924 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [A, B, C, D, E, F, A, B]
05:26:49.924 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [2, 2, 1, 1, 1, 1]
05:26:49.924 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, B, C, D, E, F, A, B]
05:26:49.924 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
05:26:49.924 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
05:26:49.924 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
05:26:49.924 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, true, false]
05:26:49.924 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
05:26:49.924 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:49.924 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
05:26:49.924 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
05:26:49.924 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:49.924 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.924 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
05:26:49.924 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:49.924 [main] [30mTRACE[m  - ###############################################
05:26:49.924 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.924 [main] [30mTRACE[m  - ###############################################
05:26:49.925 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.925 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.925 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.925 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.925 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.925 [main] [30mTRACE[m  - #############################################
05:26:49.925 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.925 [main] [30mTRACE[m  - #############################################

05:26:49.925 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:49.925 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:49.925 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
05:26:49.925 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
05:26:49.925 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.925 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
05:26:49.925 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
05:26:49.925 [main] [30mTRACE[m  - ###############################################
05:26:49.925 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.925 [main] [30mTRACE[m  - ###############################################
05:26:49.925 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.925 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.925 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.925 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.925 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.925 [main] [30mTRACE[m  - #############################################
05:26:49.925 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.925 [main] [30mTRACE[m  - #############################################

05:26:49.925 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
05:26:49.926 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:49.926 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
05:26:49.926 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
05:26:49.926 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.926 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
05:26:49.926 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
05:26:49.926 [main] [30mTRACE[m  - ###############################################
05:26:49.926 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.926 [main] [30mTRACE[m  - ###############################################
05:26:49.926 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.926 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.926 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.926 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.926 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.926 [main] [30mTRACE[m  - #############################################
05:26:49.926 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.926 [main] [30mTRACE[m  - #############################################

05:26:49.926 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
05:26:49.927 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:49.927 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
05:26:49.927 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
05:26:49.927 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.927 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
05:26:49.928 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
05:26:49.928 [main] [30mTRACE[m  - ###############################################
05:26:49.928 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.928 [main] [30mTRACE[m  - ###############################################
05:26:49.928 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.928 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.928 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.928 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.928 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.928 [main] [30mTRACE[m  - #############################################
05:26:49.928 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.928 [main] [30mTRACE[m  - #############################################

05:26:49.928 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 3
05:26:49.928 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:49.928 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
05:26:49.928 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 0, 0]
05:26:49.929 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.929 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
05:26:49.929 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
05:26:49.929 [main] [30mTRACE[m  - ###############################################
05:26:49.929 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.929 [main] [30mTRACE[m  - ###############################################
05:26:49.929 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.929 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.929 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.929 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.929 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.929 [main] [30mTRACE[m  - #############################################
05:26:49.929 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.929 [main] [30mTRACE[m  - #############################################

05:26:49.929 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
05:26:49.929 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:49.929 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
05:26:49.929 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 1, 1, 0]
05:26:49.929 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
05:26:49.929 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
05:26:49.929 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
05:26:49.929 [main] [30mTRACE[m  - ###############################################
05:26:49.929 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.929 [main] [30mTRACE[m  - ###############################################
05:26:49.929 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.929 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.929 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.929 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.929 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.930 [main] [30mTRACE[m  - #############################################
05:26:49.930 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.930 [main] [30mTRACE[m  - #############################################

05:26:49.930 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
05:26:49.930 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:49.930 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
05:26:49.930 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 0]
05:26:49.930 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
05:26:49.930 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:49.930 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:49.930 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
05:26:49.930 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : F
05:26:49.930 [main] [30mTRACE[m  - ###############################################
05:26:49.930 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.930 [main] [30mTRACE[m  - ###############################################
05:26:49.930 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.930 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.930 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.930 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.930 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.930 [main] [30mTRACE[m  - #############################################
05:26:49.930 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.931 [main] [30mTRACE[m  - #############################################

05:26:49.931 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 5
05:26:49.931 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
05:26:49.931 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
05:26:49.931 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 1, 1, 1, 1, 1]
05:26:49.931 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
05:26:49.931 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [8, 0, 0]
05:26:49.932 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
05:26:49.932 [main] [30mTRACE[m  - ###############################################
05:26:49.932 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
05:26:49.932 [main] [30mTRACE[m  - ###############################################
05:26:49.932 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
05:26:49.932 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
05:26:49.932 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.932 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
05:26:49.932 [main] [36mDEBUG[m  - Index de la lettre
05:26:49.932 [main] [30mTRACE[m  - #############################################
05:26:49.933 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
05:26:49.933 [main] [30mTRACE[m  - #############################################

05:26:49.934 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
05:26:49.934 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:49.934 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
05:26:49.934 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [2, 2, 1, 1, 1, 1]
05:26:49.934 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
05:26:49.934 [main] [32mINFO [m  - FOR - Chaque unit√©
05:26:49.935 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [8, 0, 0]
05:26:49.935 [main] [30mTRACE[m  - ##################################################
05:26:49.935 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
05:26:49.935 [main] [30mTRACE[m  - ##################################################

05:26:49.936 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
05:26:50.746 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
05:26:50.746 [main] [32mINFO [m  - SI - Mode "D√©fense"
05:26:52.772 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
05:26:52.772 [main] [30mTRACE[m  - ##########################
05:26:52.772 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
05:26:52.772 [main] [30mTRACE[m  - ##########################
05:26:52.772 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
05:26:52.772 [main] [30mTRACE[m  - ####################################################################
05:26:52.772 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
05:26:52.772 [main] [30mTRACE[m  - ####################################################################
05:26:53.181 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
05:26:53.181 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
05:26:53.181 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:30:16.012 [main] [30mTRACE[m  - #######################################
13:30:16.017 [main] [30mTRACE[m  - <<< START >>> M√©thode : game_Launcher()
13:30:16.017 [main] [30mTRACE[m  - #######################################
13:30:16.017 [main] [30mTRACE[m  - ######################################################################################
13:30:16.017 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : game_Launcher() : R√©cup√©ration des valeurs de configuration
13:30:16.017 [main] [30mTRACE[m  - ######################################################################################
13:30:16.018 [main] [30mTRACE[m  - #############################################
13:30:16.018 [main] [30mTRACE[m  - <<< START >>> M√©thode : get_PropertiesValue()
13:30:16.018 [main] [30mTRACE[m  - #############################################
13:30:16.019 [main] [30mTRACE[m  - ###########################################
13:30:16.020 [main] [30mTRACE[m  - <<< END >>> M√©thode : get_PropertiesValue()
13:30:16.020 [main] [30mTRACE[m  - ###########################################

13:30:16.021 [main] [36mDEBUG[m  - R√©cup√©ration - (boolean) Mode d√©veloppeur depuis "config.properties" : true
13:30:16.022 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Recherche +/-" : 8
13:30:16.022 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Recherche +/-" : 10
13:30:16.023 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre d'unit√©s des combinaisons du jeu "Mastermind" : 8
13:30:16.023 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de lettres utilis√©es pour le jeu "Mastermind" : 6
13:30:16.024 [main] [36mDEBUG[m  - R√©cup√©ration - (int) Nombre de chances du jeu "Mastermind" : 40
13:30:16.024 [main] [30mTRACE[m  - #########################################################
13:30:16.024 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : game_Launcher() : Pr√©sentation
13:30:16.024 [main] [30mTRACE[m  - #########################################################
13:30:16.024 [main] [36mDEBUG[m  - Initialisation - (boolean) Premier tour : true
13:30:16.024 [main] [32mINFO [m  - FOR - Lancement boucle infini
13:30:16.025 [main] [36mDEBUG[m  - Remise √† z√©ro de "i" : 0
13:30:16.025 [main] [32mINFO [m  - IF - Premier tour
13:30:18.574 [main] [36mDEBUG[m  - M√†J - (boolean) Premier tour : false
13:30:18.779 [main] [30mTRACE[m  - ###########################################################
13:30:18.780 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : game_Launcher() : Menu principal
13:30:18.780 [main] [30mTRACE[m  - ###########################################################
13:30:18.780 [main] [30mTRACE[m  - #######################################
13:30:18.780 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Main_Menu()
13:30:18.780 [main] [30mTRACE[m  - #######################################
13:30:18.781 [main] [32mINFO [m  - DO {} WHILE - Confirmation = "N"
13:30:18.781 [main] [32mINFO [m  - DO {} WHILE - Le choix du jeu = ""
13:30:18.782 [main] [36mDEBUG[m  - M√†J - (String) Valeur du menu : Games
13:30:19.605 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:30:19.605 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:30:19.606 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:38:31.774 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:38:31.780 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : m
13:38:31.782 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix du jeu : M
13:38:31.782 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:38:31.783 [main] [32mINFO [m  - CASE - "Games"
13:38:31.783 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:38:31.986 [main] [36mDEBUG[m  - M√†J - (String) Choix : Mastermind
13:38:31.987 [main] [36mDEBUG[m  - Injection - (String) Choix du jeu : Mastermind
13:38:31.988 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:38:32.801 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:38:32.801 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:38:32.801 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:38:33.161 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:38:33.162 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:38:33.163 [main] [36mDEBUG[m  - Initialisation et r√©cup√©ration - (char) Lettre correspondant au choix de la confirmation : O
13:38:33.163 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:38:33.164 [main] [32mINFO [m  - CASE - "Comfirm"
13:38:33.164 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:38:33.164 [main] [32mINFO [m  - CASE - 'O'
13:38:33.165 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:38:33.166 [main] [36mDEBUG[m  - Injection - (String) Confirmation : O
13:38:33.166 [main] [32mINFO [m  - DO {} WHILE - Confirnmation = "N"
13:38:33.166 [main] [32mINFO [m  - DO {} WHILE - Choix du mode = ""
13:38:34.182 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:38:34.183 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:38:34.183 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:38:35.023 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:38:35.025 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : 2
13:38:35.025 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix du mode : 2
13:38:35.026 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:38:35.026 [main] [32mINFO [m  - CASE - "Modes"
13:38:35.026 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:38:35.027 [main] [32mINFO [m  - CASE - '2'
13:38:35.228 [main] [36mDEBUG[m  - M√†J - (String) Choix : D√©fense
13:38:35.229 [main] [36mDEBUG[m  - str_ModeChoise : D√©fense
13:38:35.229 [main] [32mINFO [m  - DO {} WHILE - La confirmation = ""
13:38:36.040 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:38:36.040 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:38:36.041 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:38:36.717 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:38:36.718 [main] [36mDEBUG[m  - (String) Valeur de la cha√Æne de caract√®re contenue dams le scanner : o
13:38:36.720 [main] [36mDEBUG[m  - (char) Lettre correspondant au choix de la confirmation : O
13:38:36.720 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
13:38:36.721 [main] [32mINFO [m  - CASE - "Comfirm"
13:38:36.721 [main] [32mINFO [m  - SWITCH - (char) Caract√©re r√©cup√©r√© du scanner
13:38:36.721 [main] [32mINFO [m  - CASE - 'O'
13:38:36.722 [main] [36mDEBUG[m  - M√†J - (String) Choix : O
13:38:36.722 [main] [36mDEBUG[m  - str_ConfirmChoise : O
13:38:36.723 [main] [36mDEBUG[m  - (String) Choix du jeu : Mastermind
13:38:36.724 [main] [36mDEBUG[m  - (String) Choix du mode : D√©fense
13:38:38.997 [main] [30mTRACE[m  - #####################################
13:38:38.997 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Main_Menu()
13:38:38.997 [main] [30mTRACE[m  - #####################################

13:38:38.997 [main] [30mTRACE[m  - ################################################################################################
13:38:38.998 [main] [30mTRACE[m  - <<< 4th Part >>> M√©thode : game_Launcher() : Lance du jeu "Recherche +/-" ou du jeu "Mastermind"
13:38:38.998 [main] [30mTRACE[m  - ################################################################################################
13:38:38.998 [main] [32mINFO [m  - SWITCH - Choix du jeu
13:38:38.998 [main] [32mINFO [m  - CASE - Mode  "Mastermind"
13:38:39.007 [main] [32mINFO [m  - Instance "Mastermind"
13:38:39.008 [main] [32mINFO [m  - R√©cup√©ration des valeurs de configuration
13:38:39.008 [main] [32mINFO [m  - Initialisation (String) Sous-mode en mode "Duel"
13:38:39.008 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:38:39.008 [main] [36mDEBUG[m  - Initialisation (char[]) Toutes les lettres de l'alphabet : [A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z]
13:38:39.009 [main] [32mINFO [m  - Initialisation (char[]) Lettres utilis√©es pour le "Mastermind"
13:38:39.009 [main] [36mDEBUG[m  - (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:39.010 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:38:39.010 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:38:39.010 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:38:39.010 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:38:39.010 [main] [32mINFO [m  - Initialisation et injection (char[]) Proposition pr√©c√©dente de l'ordinateur
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (int[]) Comparaison pr√©c√©dente
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (char[]) Comparaison des comparaisons
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (char[][]) Analyse de la d√©fense
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:38:39.011 [main] [32mINFO [m  - Initialisation et injection (int) Position de remplacement
13:38:39.012 [main] [32mINFO [m  - Initialisation et injection (char) Lettre pr√©c√©dente
13:38:39.012 [main] [32mINFO [m  - Initialisation et injection (char) Nouvelle lettre
13:38:39.012 [main] [36mDEBUG[m  - Initialisation (boolean) L'ordinateur a gagn√© : false
13:38:39.013 [main] [36mDEBUG[m  - Initialisation (boolean) Partie gagn√©e : false
13:38:39.013 [main] [32mINFO [m  - Initialisation (String) Combinaison en lettres capitales
13:38:39.013 [main] [32mINFO [m  - Instance (ArrayList) Donn√©es d√©fense
13:38:39.013 [main] [36mDEBUG[m  - Injection (char[]) Lettres s√©lectionn√©es pour le jeu dans donn√©es d√©fense : [A, B, C, D, E, F]
13:38:39.014 [main] [32mINFO [m  - Initialisation et injection (char[]) Combinaison secr√®te
13:38:39.014 [main] [32mINFO [m  - Initialisation et injection (int[]) Nombre de chaque lettre dans la combinaison
13:38:39.014 [main] [32mINFO [m  - Initialisation et injection (int) Compteur de chances
13:38:39.014 [main] [32mINFO [m  - Initialisation et injection (char[]) Nouvelle proposition de l'ordinateur
13:38:39.014 [main] [32mINFO [m  - Initialisation et injection (int[]) Nouvelle comparaison
13:38:39.015 [main] [32mINFO [m  - Initialisation et injection (boolean[]) Lettres de la combinaison trouv√©es
13:38:39.015 [main] [32mINFO [m  - Lancement du compteur de tours
13:38:39.015 [main] [30mTRACE[m  - ############################
13:38:39.015 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:39.015 [main] [30mTRACE[m  - ############################
13:38:39.016 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:39.016 [main] [32mINFO [m  - SI - Premier tour
13:38:40.072 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est valid√©e : false
13:38:40.072 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas valid√©e
13:38:40.072 [main] [32mINFO [m  - SWITCH - Mode des jeux
13:38:40.072 [main] [32mINFO [m  - CASE - Mode "D√©fense"
13:38:40.278 [main] [32mINFO [m  - Lance le scanner pour la combinaison
13:38:40.278 [main] [30mTRACE[m  - #####################################
13:38:40.278 [main] [30mTRACE[m  - ### START ### run_Combination_Regex()
13:38:40.279 [main] [30mTRACE[m  - #####################################
13:38:40.279 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison n'est compos√©e que de lettres : true
13:38:40.279 [main] [32mINFO [m  - DO {} WHILE - La combinaison n'est pas compos√©e que de lettres
13:38:44.154 [main] [36mDEBUG[m  - R√©cup√©ration (String) Contenu du scanner : cbcafecd
13:38:44.154 [main] [32mINFO [m  - Instance "Pattern"
13:38:44.155 [main] [32mINFO [m  - Instance "Matcher"
13:38:44.155 [main] [32mINFO [m  - IF - Match
13:38:44.156 [main] [36mDEBUG[m  - boolean Seulement des lettres : true
13:38:44.157 [main] [32mINFO [m  - DO {} WHILE : "Si seulement des lettres" - SORTIE
13:38:44.158 [main] [36mDEBUG[m  - String() Combinaison : cbcafecd
13:38:44.158 [main] [30mTRACE[m  - ###################################
13:38:44.159 [main] [30mTRACE[m  - ### END ### run_Combination_Regex()
13:38:44.159 [main] [30mTRACE[m  - ###################################

13:38:44.159 [main] [32mINFO [m  - V√©rifie que la combinaison ne contient que des lettres
13:38:44.159 [main] [32mINFO [m  - Converti la combinaison en lettres capitales
13:38:44.160 [main] [30mTRACE[m  - ##########################################
13:38:44.160 [main] [30mTRACE[m  - ### START ### run_Combination_GoodLenght()
13:38:44.160 [main] [30mTRACE[m  - ##########################################
13:38:44.161 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est de la bonne longueur : true
13:38:44.161 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longueur : true
13:38:44.162 [main] [30mTRACE[m  - ########################################
13:38:44.162 [main] [30mTRACE[m  - ### END ### run_Combination_GoodLenght()
13:38:44.162 [main] [30mTRACE[m  - ########################################

13:38:44.163 [main] [36mDEBUG[m  - (boolean) La combinaison est de la bonne longeur : true
13:38:44.163 [main] [36mDEBUG[m  - Initialisation (boolean) La combinaison est compos√©e des lettres autoris√©es : false
13:38:44.164 [main] [32mINFO [m  - IF - La combinaison de la bonne longueur
13:38:44.164 [main] [30mTRACE[m  - ##############################################
13:38:44.164 [main] [30mTRACE[m  - ### START ### run_Combination_GoodCharacters()
13:38:44.164 [main] [30mTRACE[m  - ##############################################
13:38:44.164 [main] [36mDEBUG[m  - Initialisation (boolean) L'unit√© s√©lectionn√©e contient une lettre autoris√©e : false
13:38:44.165 [main] [36mDEBUG[m  - Initialisation (boolean) Toutes les unit√©s test√©es contiennent des lettres autoris√©es : false
13:38:44.165 [main] [36mDEBUG[m  - Valeur bool√©en bonnes lettres en retour : true
13:38:44.166 [main] [30mTRACE[m  - ##########################################
13:38:44.166 [main] [30mTRACE[m  - ### END ### run_Combination_GoodCharacters()
13:38:44.166 [main] [30mTRACE[m  - ##########################################

13:38:44.166 [main] [36mDEBUG[m  - (boolean) la combinaison contient uniquement des lettres autoris√©es : true
13:38:44.166 [main] [32mINFO [m  - IF - La combinaison est de la bonne longueur et qu'elle ne contient que des lettres autoris√©es
13:38:44.167 [main] [36mDEBUG[m  - M√†J - (boolean) La combinaison est valid√©e : true
13:38:44.167 [main] [36mDEBUG[m  - (boolean) Combinaison valid√©e : true
13:38:44.167 [main] [36mDEBUG[m  - array_ch_Combination[] : [C, B, C, A, F, E, C, D]
13:38:44.168 [main] [36mDEBUG[m  - Conversion (char[]) Combinaison secr√®te contenue dans la cha√Æne de caract√®re : [C, B, C, A, F, E, C, D]
13:38:44.168 [main] [32mINFO [m  - Injection (char[]) Combinaison secr√®te
13:38:44.168 [main] [32mINFO [m  - Initialisation (int[]) Nombre de chaque lettre dans la combinaison
13:38:44.168 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:44.169 [main] [36mDEBUG[m  - M√†J - (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:44.169 [main] [32mINFO [m  - Injection (int[]) Nombre de chaque lettre dans la combinaison
13:38:44.177 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFECD
13:38:44.177 [main] [32mINFO [m  - Conversion (String) Combinaison secr√®te contenue dans le tableau de caract√®res
13:38:44.383 [main] [30mTRACE[m  - #####################################
13:38:44.387 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:44.387 [main] [30mTRACE[m  - #####################################
13:38:44.387 [main] [32mINFO [m  - IF - Premier tour
13:38:44.387 [main] [30mTRACE[m  - ##########################################################
13:38:44.388 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_FirstTypeComputerProposal()
13:38:44.388 [main] [30mTRACE[m  - ##########################################################
13:38:44.388 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) R√©cup√©ration des lettres s√©lectionn√©es pour le jeu
13:38:44.388 [main] [32mINFO [m  - Initialisation (char[]) Nouvelle proposition de l'ordinateur
13:38:44.390 [main] [36mDEBUG[m  - Injection (char[]) Nouvelle proposition de l'ordinateur : [D, F, D, E, E, E, C, C]
13:38:44.390 [main] [32mINFO [m  - Injection mouvelle proposition de l'ordinateur dans donn√©es de d√©fense
13:38:44.390 [main] [30mTRACE[m  - ########################################################
13:38:44.390 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_FirstTypeComputerProposal()
13:38:44.390 [main] [30mTRACE[m  - ########################################################

13:38:44.390 [main] [32mINFO [m  - Lancement premi√®re proposition de l'ordinateur
13:38:44.391 [main] [30mTRACE[m  - ###################################
13:38:44.391 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:44.391 [main] [30mTRACE[m  - ###################################

13:38:44.391 [main] [30mTRACE[m  - ###########################################################################################################
13:38:44.391 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:44.391 [main] [30mTRACE[m  - ###########################################################################################################
13:38:44.392 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:44.392 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:44.393 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:44.393 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  0
13:38:44.394 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [ ,  ,  ,  ,  ,  ,  ,  ]
13:38:44.394 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [D, F, D, E, E, E, C, C]
13:38:44.394 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
13:38:44.394 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [0, 0, 0]
13:38:44.395 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
13:38:44.395 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:44.409 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
13:38:44.410 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:44.410 [main] [36mDEBUG[m  - ch_PreviousLetter :                            
13:38:44.411 [main] [36mDEBUG[m  - ch_NewLetter :                                 
13:38:44.411 [main] [30mTRACE[m  - ###########################################################################################################
13:38:44.411 [main] [30mTRACE[m  - ###########################################################################################################
13:38:44.411 [main] [30mTRACE[m  - ###########################################################################################################

13:38:44.411 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:44.411 [main] [36mDEBUG[m  - Incr√©mentation String() : DFDEEECC
13:38:44.412 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : DFDEEECC
13:38:44.621 [main] [30mTRACE[m  - ####################################################
13:38:44.621 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:44.621 [main] [30mTRACE[m  - ####################################################
13:38:44.622 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:44.622 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:44.623 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:44.623 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [D, F, D, E, E, E, C, C]
13:38:44.623 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:44.624 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:44.624 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:44.624 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:44.625 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:44.625 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:44.626 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:44.626 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:44.626 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.626 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:44.626 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.626 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:44.626 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:44.627 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:44.627 [main] [30mTRACE[m  - ###############################################
13:38:44.627 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:44.628 [main] [30mTRACE[m  - ###############################################
13:38:44.628 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:44.628 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:44.628 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.629 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.629 [main] [36mDEBUG[m  - Index de la lettre
13:38:44.629 [main] [30mTRACE[m  - #############################################
13:38:44.629 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:44.629 [main] [30mTRACE[m  - #############################################

13:38:44.629 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:44.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:44.630 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:44.630 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:44.630 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:44.630 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:44.630 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:44.631 [main] [30mTRACE[m  - ###############################################
13:38:44.631 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:44.631 [main] [30mTRACE[m  - ###############################################
13:38:44.631 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:44.631 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:44.631 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.631 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.631 [main] [36mDEBUG[m  - Index de la lettre
13:38:44.631 [main] [30mTRACE[m  - #############################################
13:38:44.631 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:44.631 [main] [30mTRACE[m  - #############################################

13:38:44.631 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:44.632 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:44.632 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:44.632 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:44.632 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:44.632 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.632 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.632 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:44.632 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:44.632 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.633 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:44.633 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, true]
13:38:44.633 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:38:44.633 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.633 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:44.634 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 1, 1, 0]
13:38:44.634 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:44.634 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
13:38:44.635 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.635 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:38:44.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:44.635 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.635 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:44.635 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, true, true]
13:38:44.635 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
13:38:44.635 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.635 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:44.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 1, 1, 1]
13:38:44.636 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:44.636 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
13:38:44.636 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.636 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:44.636 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:44.636 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.636 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:44.637 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 1]
13:38:44.637 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.637 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:44.637 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:44.637 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.637 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:44.637 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
13:38:44.637 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.638 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:44.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:44.638 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.638 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:44.638 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 3]
13:38:44.638 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:44.638 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:44.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:44.638 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:44.638 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:44.638 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
13:38:44.638 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:44.639 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:44.639 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:44.639 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 2, 1, 1, 1]
13:38:44.639 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:44.639 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
13:38:44.640 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
13:38:44.640 [main] [30mTRACE[m  - ##################################################
13:38:44.640 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:44.640 [main] [30mTRACE[m  - ##################################################

13:38:44.640 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:45.456 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:45.457 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:45.457 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:45.457 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
13:38:45.458 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:45.678 [main] [30mTRACE[m  - ##########################
13:38:45.678 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:45.678 [main] [30mTRACE[m  - ##########################

13:38:45.678 [main] [30mTRACE[m  - ############################
13:38:45.678 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:45.678 [main] [30mTRACE[m  - ############################
13:38:45.678 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:45.678 [main] [30mTRACE[m  - #####################################
13:38:45.678 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:45.679 [main] [30mTRACE[m  - #####################################
13:38:45.679 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:45.679 [main] [30mTRACE[m  - ###########################################################
13:38:45.679 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:45.679 [main] [30mTRACE[m  - ###########################################################
13:38:45.679 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:45.679 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:45.680 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [D, F, D, E, E, E, C, C]
13:38:45.680 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
13:38:45.681 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:45.681 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:45.681 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:45.681 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:45.681 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:45.682 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
13:38:45.682 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
13:38:45.682 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:45.682 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:45.682 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:45.682 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:45.682 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:45.682 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:45.683 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:45.683 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:45.683 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
13:38:45.683 [main] [30mTRACE[m  - ###############################################
13:38:45.684 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:45.684 [main] [30mTRACE[m  - ###############################################
13:38:45.684 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:45.684 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:45.684 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.684 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.684 [main] [36mDEBUG[m  - Index de la lettre
13:38:45.684 [main] [30mTRACE[m  - #############################################
13:38:45.684 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:45.684 [main] [30mTRACE[m  - #############################################

13:38:45.684 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:45.684 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:45.685 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:45.685 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:45.685 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:45.685 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:45.685 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:45.685 [main] [30mTRACE[m  - #########################################################
13:38:45.685 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:45.685 [main] [30mTRACE[m  - #########################################################

13:38:45.685 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:45.685 [main] [30mTRACE[m  - ###################################
13:38:45.685 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:45.685 [main] [30mTRACE[m  - ###################################

13:38:45.685 [main] [30mTRACE[m  - ###########################################################################################################
13:38:45.686 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:45.686 [main] [30mTRACE[m  - ###########################################################################################################
13:38:45.686 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:45.686 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:45.686 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:45.686 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  1
13:38:45.686 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [E, F, D, E, E, E, C, C]
13:38:45.686 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [E, F, D, E, E, E, C, C]
13:38:45.686 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [0, 0, 0]
13:38:45.686 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
13:38:45.686 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [ ,  ]
13:38:45.686 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:45.689 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
13:38:45.689 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:45.689 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
13:38:45.689 [main] [36mDEBUG[m  - ch_NewLetter :                                E
13:38:45.690 [main] [30mTRACE[m  - ###########################################################################################################
13:38:45.690 [main] [30mTRACE[m  - ###########################################################################################################
13:38:45.690 [main] [30mTRACE[m  - ###########################################################################################################

13:38:45.690 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:45.690 [main] [36mDEBUG[m  - Incr√©mentation String() : EFDEEECC
13:38:45.691 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : EFDEEECC
13:38:45.896 [main] [30mTRACE[m  - ####################################################
13:38:45.896 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:45.897 [main] [30mTRACE[m  - ####################################################
13:38:45.897 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:45.897 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:45.897 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:45.897 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [E, F, D, E, E, E, C, C]
13:38:45.897 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:45.897 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:45.898 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:45.898 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:45.898 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:45.898 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:45.898 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:45.898 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:45.898 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.898 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:45.898 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.899 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:45.899 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:45.899 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:45.899 [main] [30mTRACE[m  - ###############################################
13:38:45.899 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:45.899 [main] [30mTRACE[m  - ###############################################
13:38:45.899 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:45.899 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:45.899 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.899 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.900 [main] [36mDEBUG[m  - Index de la lettre
13:38:45.900 [main] [30mTRACE[m  - #############################################
13:38:45.900 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:45.900 [main] [30mTRACE[m  - #############################################

13:38:45.900 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:45.900 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:45.900 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:45.900 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:45.900 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:45.901 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:45.901 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:45.901 [main] [30mTRACE[m  - ###############################################
13:38:45.901 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:45.901 [main] [30mTRACE[m  - ###############################################
13:38:45.901 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:45.901 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:45.901 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.902 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.902 [main] [36mDEBUG[m  - Index de la lettre
13:38:45.902 [main] [30mTRACE[m  - #############################################
13:38:45.902 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:45.902 [main] [30mTRACE[m  - #############################################

13:38:45.902 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:45.902 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:45.902 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:45.902 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:45.902 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:45.902 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.903 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.903 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:45.903 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:45.903 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.903 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:45.903 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 0, 1]
13:38:45.903 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.903 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:38:45.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:45.904 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.904 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:45.904 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, true, false]
13:38:45.904 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
13:38:45.904 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.905 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:45.905 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 0, 1, 1]
13:38:45.905 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:45.905 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 1]
13:38:45.905 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.905 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:45.905 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:45.906 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.906 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:45.906 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, true, true]
13:38:45.907 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:38:45.907 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.908 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:45.908 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 1, 1, 1]
13:38:45.908 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:45.908 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 1]
13:38:45.908 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.909 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:45.909 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:45.909 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.909 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:45.910 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
13:38:45.910 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.910 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:45.910 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:45.910 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.910 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:45.910 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 3]
13:38:45.910 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:45.911 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:45.911 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:45.911 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:45.911 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:45.911 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
13:38:45.911 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:45.911 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:45.911 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:45.911 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 2, 1, 1, 1]
13:38:45.911 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:45.912 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
13:38:45.912 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
13:38:45.912 [main] [30mTRACE[m  - ##################################################
13:38:45.912 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:45.912 [main] [30mTRACE[m  - ##################################################

13:38:45.912 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:46.724 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:46.725 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:46.725 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:46.725 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
13:38:46.725 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:46.930 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:46.931 [main] [30mTRACE[m  - ##############################################################
13:38:46.931 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:46.931 [main] [30mTRACE[m  - ##############################################################
13:38:46.931 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
13:38:46.932 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
13:38:46.932 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
13:38:46.932 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:46.933 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:38:46.933 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:46.933 [main] [32mINFO [m  - ELSE - Sinon ...
13:38:46.934 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:38:46.935 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:38:46.935 [main] [30mTRACE[m  - ############################################################
13:38:46.935 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:46.935 [main] [30mTRACE[m  - ############################################################

13:38:46.935 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:46.936 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:38:46.936 [main] [30mTRACE[m  - ##########################
13:38:46.936 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:46.936 [main] [30mTRACE[m  - ##########################

13:38:46.936 [main] [30mTRACE[m  - ############################
13:38:46.937 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:46.937 [main] [30mTRACE[m  - ############################
13:38:46.937 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:46.937 [main] [30mTRACE[m  - #####################################
13:38:46.937 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:46.937 [main] [30mTRACE[m  - #####################################
13:38:46.937 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:46.937 [main] [30mTRACE[m  - ###########################################################
13:38:46.937 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:46.937 [main] [30mTRACE[m  - ###########################################################
13:38:46.938 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:46.938 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:46.938 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [E, F, D, E, E, E, C, C]
13:38:46.938 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
13:38:46.938 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:46.938 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:46.938 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:46.938 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:46.938 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:46.938 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
13:38:46.939 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
13:38:46.939 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:46.939 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:46.939 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:46.939 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:46.939 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
13:38:46.940 [main] [30mTRACE[m  - ###############################################
13:38:46.940 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:46.940 [main] [30mTRACE[m  - ###############################################
13:38:46.940 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:46.940 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:46.940 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:46.940 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:46.940 [main] [36mDEBUG[m  - Index de la lettre
13:38:46.940 [main] [30mTRACE[m  - #############################################
13:38:46.941 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:46.941 [main] [30mTRACE[m  - #############################################

13:38:46.941 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:46.941 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:46.941 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:46.941 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:46.942 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:46.942 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:46.942 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:46.942 [main] [30mTRACE[m  - #########################################################
13:38:46.942 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:46.942 [main] [30mTRACE[m  - #########################################################

13:38:46.942 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:46.942 [main] [30mTRACE[m  - ###################################
13:38:46.942 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:46.943 [main] [30mTRACE[m  - ###################################

13:38:46.943 [main] [30mTRACE[m  - ###########################################################################################################
13:38:46.943 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:46.943 [main] [30mTRACE[m  - ###########################################################################################################
13:38:46.943 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:46.943 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:46.943 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:46.943 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  2
13:38:46.943 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [F, F, D, E, E, E, C, C]
13:38:46.943 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [F, F, D, E, E, E, C, C]
13:38:46.943 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
13:38:46.944 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
13:38:46.944 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:38:46.944 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:46.947 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
13:38:46.948 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:46.948 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
13:38:46.948 [main] [36mDEBUG[m  - ch_NewLetter :                                F
13:38:46.948 [main] [30mTRACE[m  - ###########################################################################################################
13:38:46.948 [main] [30mTRACE[m  - ###########################################################################################################
13:38:46.948 [main] [30mTRACE[m  - ###########################################################################################################

13:38:46.948 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:46.948 [main] [36mDEBUG[m  - Incr√©mentation String() : FFDEEECC
13:38:46.948 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : FFDEEECC
13:38:47.151 [main] [30mTRACE[m  - ####################################################
13:38:47.151 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:47.151 [main] [30mTRACE[m  - ####################################################
13:38:47.151 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:47.151 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:47.152 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:47.152 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [F, F, D, E, E, E, C, C]
13:38:47.152 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:47.152 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:47.152 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:47.152 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:47.152 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:47.152 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:47.152 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:47.153 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:47.153 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.153 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:47.153 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.153 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:47.153 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:47.153 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:47.153 [main] [30mTRACE[m  - ###############################################
13:38:47.153 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:47.153 [main] [30mTRACE[m  - ###############################################
13:38:47.153 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:47.153 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:47.154 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.154 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.154 [main] [36mDEBUG[m  - Index de la lettre
13:38:47.154 [main] [30mTRACE[m  - #############################################
13:38:47.154 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:47.154 [main] [30mTRACE[m  - #############################################

13:38:47.154 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:47.154 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:47.154 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:47.154 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:47.154 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:47.154 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:47.155 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:47.155 [main] [30mTRACE[m  - ###############################################
13:38:47.155 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:47.155 [main] [30mTRACE[m  - ###############################################
13:38:47.155 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:47.155 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:47.155 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.155 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.155 [main] [36mDEBUG[m  - Index de la lettre
13:38:47.155 [main] [30mTRACE[m  - #############################################
13:38:47.155 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:47.155 [main] [30mTRACE[m  - #############################################

13:38:47.156 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:47.156 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:47.156 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:47.156 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:47.156 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:47.156 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.156 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.156 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:38:47.156 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:47.156 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.156 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:47.157 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, true, false]
13:38:47.157 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
13:38:47.157 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.157 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:47.157 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 0, 1, 1]
13:38:47.157 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:47.157 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
13:38:47.157 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.157 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:38:47.157 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:47.157 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.157 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:47.157 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
13:38:47.157 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.158 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:47.158 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:47.158 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.158 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:47.158 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, true, true, true, true]
13:38:47.158 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:38:47.158 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.158 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:47.158 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 1, 1, 1, 1]
13:38:47.158 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:47.158 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 1]
13:38:47.158 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.158 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:47.158 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:47.159 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.159 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:47.159 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
13:38:47.159 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.159 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:47.159 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:47.159 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.159 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:47.159 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 3]
13:38:47.159 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:47.159 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:47.159 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:47.159 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:47.159 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:47.160 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, true, true, true, true]
13:38:47.160 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:47.160 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:47.160 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:47.160 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [0, 0, 2, 1, 1, 1]
13:38:47.160 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:47.160 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
13:38:47.160 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
13:38:47.160 [main] [30mTRACE[m  - ##################################################
13:38:47.160 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:47.160 [main] [30mTRACE[m  - ##################################################

13:38:47.160 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:47.975 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:47.976 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:47.976 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:47.976 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
13:38:47.976 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:48.181 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:48.182 [main] [30mTRACE[m  - ##############################################################
13:38:48.182 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:48.182 [main] [30mTRACE[m  - ##############################################################
13:38:48.182 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
13:38:48.182 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
13:38:48.182 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
13:38:48.182 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:48.182 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:38:48.183 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:48.183 [main] [32mINFO [m  - ELSE - Sinon ...
13:38:48.183 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:38:48.183 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:38:48.183 [main] [30mTRACE[m  - ############################################################
13:38:48.183 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:48.183 [main] [30mTRACE[m  - ############################################################

13:38:48.183 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:48.183 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:38:48.183 [main] [30mTRACE[m  - ##########################
13:38:48.183 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:48.183 [main] [30mTRACE[m  - ##########################

13:38:48.183 [main] [30mTRACE[m  - ############################
13:38:48.184 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:48.184 [main] [30mTRACE[m  - ############################
13:38:48.184 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:48.184 [main] [30mTRACE[m  - #####################################
13:38:48.184 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:48.184 [main] [30mTRACE[m  - #####################################
13:38:48.184 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:48.184 [main] [30mTRACE[m  - ###########################################################
13:38:48.184 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:48.184 [main] [30mTRACE[m  - ###########################################################
13:38:48.184 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:48.185 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:48.185 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [F, F, D, E, E, E, C, C]
13:38:48.185 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, false, false, false, false, false]
13:38:48.185 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:48.185 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:48.185 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:48.185 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:48.185 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:48.185 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
13:38:48.185 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
13:38:48.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.185 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.186 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.186 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.186 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:48.186 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:48.186 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:48.186 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:48.186 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:48.186 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
13:38:48.186 [main] [30mTRACE[m  - ###############################################
13:38:48.187 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:48.187 [main] [30mTRACE[m  - ###############################################
13:38:48.187 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:48.187 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:48.187 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.187 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.187 [main] [36mDEBUG[m  - Index de la lettre
13:38:48.187 [main] [30mTRACE[m  - #############################################
13:38:48.187 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:48.187 [main] [30mTRACE[m  - #############################################

13:38:48.187 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:48.187 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:48.187 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:48.187 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:48.188 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:48.188 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:48.188 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:48.188 [main] [30mTRACE[m  - #########################################################
13:38:48.188 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:48.188 [main] [30mTRACE[m  - #########################################################

13:38:48.188 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:48.188 [main] [30mTRACE[m  - ###################################
13:38:48.188 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:48.188 [main] [30mTRACE[m  - ###################################

13:38:48.188 [main] [30mTRACE[m  - ###########################################################################################################
13:38:48.188 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:48.188 [main] [30mTRACE[m  - ###########################################################################################################
13:38:48.188 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:48.188 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:48.189 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:48.189 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  3
13:38:48.189 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [A, F, D, E, E, E, C, C]
13:38:48.189 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [A, F, D, E, E, E, C, C]
13:38:48.189 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 3, 3]
13:38:48.189 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [2, 3, 3]
13:38:48.189 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:38:48.189 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:48.193 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, false, false, false, false, false]
13:38:48.193 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:48.193 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
13:38:48.193 [main] [36mDEBUG[m  - ch_NewLetter :                                A
13:38:48.193 [main] [30mTRACE[m  - ###########################################################################################################
13:38:48.193 [main] [30mTRACE[m  - ###########################################################################################################
13:38:48.193 [main] [30mTRACE[m  - ###########################################################################################################

13:38:48.193 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:48.193 [main] [36mDEBUG[m  - Incr√©mentation String() : AFDEEECC
13:38:48.194 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : AFDEEECC
13:38:48.394 [main] [30mTRACE[m  - ####################################################
13:38:48.394 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:48.394 [main] [30mTRACE[m  - ####################################################
13:38:48.394 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:48.395 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:48.395 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:48.395 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, F, D, E, E, E, C, C]
13:38:48.395 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:48.395 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:48.395 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:48.395 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:48.395 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:48.395 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:48.395 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:48.395 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:48.395 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.395 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:48.396 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.396 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:48.396 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:48.396 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:48.396 [main] [30mTRACE[m  - ###############################################
13:38:48.396 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:48.396 [main] [30mTRACE[m  - ###############################################
13:38:48.396 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:48.396 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:48.396 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.396 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.397 [main] [36mDEBUG[m  - Index de la lettre
13:38:48.397 [main] [30mTRACE[m  - #############################################
13:38:48.397 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:48.397 [main] [30mTRACE[m  - #############################################

13:38:48.397 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:48.397 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:48.397 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:48.397 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:48.397 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:48.397 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:48.397 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:48.398 [main] [30mTRACE[m  - ###############################################
13:38:48.398 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:48.398 [main] [30mTRACE[m  - ###############################################
13:38:48.398 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:48.398 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:48.398 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.398 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.398 [main] [36mDEBUG[m  - Index de la lettre
13:38:48.398 [main] [30mTRACE[m  - #############################################
13:38:48.398 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:48.398 [main] [30mTRACE[m  - #############################################

13:38:48.398 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:48.398 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:48.399 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:48.399 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:48.399 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:48.399 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.399 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.399 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:48.399 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:48.399 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.399 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:48.399 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:48.399 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
13:38:48.399 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.400 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:48.400 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 1, 0]
13:38:48.400 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:48.400 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
13:38:48.400 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.400 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:38:48.400 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:48.400 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.400 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:48.400 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, true, true, true, false]
13:38:48.400 [main] [36mDEBUG[m  - array_ch_Combination[j] : F
13:38:48.400 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.400 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:48.401 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 1, 1]
13:38:48.401 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:48.401 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 0]
13:38:48.401 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.401 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:48.401 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:48.401 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.401 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:48.401 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, true, true, true, true]
13:38:48.401 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:38:48.401 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.401 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:48.401 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 1, 1, 1]
13:38:48.401 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:48.402 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 0]
13:38:48.402 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.402 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:48.402 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:48.402 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.402 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:48.402 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 1]
13:38:48.402 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.402 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:48.403 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:48.403 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.403 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:48.403 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 3, 2]
13:38:48.403 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:48.403 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:48.403 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:48.403 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:48.403 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:48.403 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, true, true, true, true]
13:38:48.403 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:48.404 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:48.404 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:48.404 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 2, 1, 1, 1]
13:38:48.404 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:48.404 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 4, 2]
13:38:48.404 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 4, 2]
13:38:48.404 [main] [30mTRACE[m  - ##################################################
13:38:48.404 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:48.404 [main] [30mTRACE[m  - ##################################################

13:38:48.405 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:49.220 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:49.221 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:49.221 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:49.221 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 4
13:38:49.221 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:49.426 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:49.427 [main] [30mTRACE[m  - ##############################################################
13:38:49.427 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:49.427 [main] [30mTRACE[m  - ##############################################################
13:38:49.427 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
13:38:49.427 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 4, 2]
13:38:49.427 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 4, 2]
13:38:49.427 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:49.427 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
13:38:49.427 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
13:38:49.427 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
13:38:49.428 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
13:38:49.429 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
13:38:49.429 [main] [30mTRACE[m  - ############################################################
13:38:49.429 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:49.429 [main] [30mTRACE[m  - ############################################################

13:38:49.430 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:49.430 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
13:38:49.430 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
13:38:49.430 [main] [30mTRACE[m  - ################################################
13:38:49.431 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
13:38:49.431 [main] [30mTRACE[m  - ################################################
13:38:49.431 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:49.432 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 0
13:38:49.432 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : A
13:38:49.432 [main] [30mTRACE[m  - ###############################################
13:38:49.432 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:49.433 [main] [30mTRACE[m  - ###############################################
13:38:49.433 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:49.433 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:49.433 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.433 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.433 [main] [36mDEBUG[m  - Index de la lettre
13:38:49.433 [main] [30mTRACE[m  - #############################################
13:38:49.433 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:49.433 [main] [30mTRACE[m  - #############################################

13:38:49.434 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 0
13:38:49.434 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
13:38:49.434 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
13:38:49.438 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:49.438 [main] [30mTRACE[m  - ##############################################
13:38:49.438 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
13:38:49.438 [main] [30mTRACE[m  - ##############################################
13:38:49.438 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
13:38:49.439 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:49.439 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.440 [main] [36mDEBUG[m  - (int) Nombre de tours : 7
13:38:49.440 [main] [30mTRACE[m  - ############################################
13:38:49.440 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
13:38:49.440 [main] [30mTRACE[m  - ############################################

13:38:49.440 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 7
13:38:49.441 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
13:38:49.441 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
13:38:49.441 [main] [30mTRACE[m  - ########################################################
13:38:49.441 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
13:38:49.441 [main] [30mTRACE[m  - ########################################################
13:38:49.441 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
13:38:49.441 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:49.442 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 0
13:38:49.442 [main] [32mINFO [m  - FOR - Chaque unit√©s
13:38:49.442 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
13:38:49.442 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 1
13:38:49.442 [main] [30mTRACE[m  - ######################################################
13:38:49.442 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
13:38:49.442 [main] [30mTRACE[m  - ######################################################

13:38:49.442 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 1
13:38:49.442 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
13:38:49.442 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, F, D, E, E, E, C, C]
13:38:49.443 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, D, E, E, E, C, C]
13:38:49.443 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
13:38:49.443 [main] [36mDEBUG[m  - Incr√©mentation String() : AADEEECC
13:38:49.443 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AADEEECC
13:38:49.647 [main] [30mTRACE[m  - ####################################################
13:38:49.647 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:49.647 [main] [30mTRACE[m  - ####################################################
13:38:49.647 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:49.647 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:49.647 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:49.647 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, D, E, E, E, C, C]
13:38:49.647 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:49.647 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:49.647 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:49.647 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:49.648 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:49.648 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.648 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:49.648 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.648 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:49.648 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:49.648 [main] [30mTRACE[m  - ###############################################
13:38:49.648 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:49.648 [main] [30mTRACE[m  - ###############################################
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:49.648 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:49.648 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.648 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.648 [main] [36mDEBUG[m  - Index de la lettre
13:38:49.648 [main] [30mTRACE[m  - #############################################
13:38:49.648 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:49.648 [main] [30mTRACE[m  - #############################################

13:38:49.648 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:49.648 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:49.648 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:49.648 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:49.648 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:49.648 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:49.648 [main] [30mTRACE[m  - ###############################################
13:38:49.648 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:49.648 [main] [30mTRACE[m  - ###############################################
13:38:49.648 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:49.649 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:49.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.649 [main] [36mDEBUG[m  - Index de la lettre
13:38:49.649 [main] [30mTRACE[m  - #############################################
13:38:49.649 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:49.649 [main] [30mTRACE[m  - #############################################

13:38:49.649 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:49.649 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:49.649 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:49.649 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.649 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:49.649 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:49.649 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
13:38:49.649 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.649 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:49.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 1, 0]
13:38:49.649 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:49.649 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
13:38:49.649 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:49.649 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.649 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:49.649 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
13:38:49.649 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.649 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:38:49.649 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:49.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, true]
13:38:49.650 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:49.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 1, 1, 0]
13:38:49.650 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:49.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 1]
13:38:49.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:49.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.650 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:49.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 2]
13:38:49.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:49.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.650 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:49.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 2, 3]
13:38:49.650 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:49.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:49.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:49.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:49.650 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, true]
13:38:49.650 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:49.650 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:49.650 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:49.650 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 2, 1, 1, 0]
13:38:49.650 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:49.650 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 3, 3]
13:38:49.650 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 3, 3]
13:38:49.650 [main] [30mTRACE[m  - ##################################################
13:38:49.650 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:49.650 [main] [30mTRACE[m  - ##################################################

13:38:49.650 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:50.466 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:50.466 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:50.466 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:50.466 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 5
13:38:50.467 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:50.669 [main] [30mTRACE[m  - ##############################################################
13:38:50.669 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:50.669 [main] [30mTRACE[m  - ##############################################################
13:38:50.669 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 4, 2]
13:38:50.669 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 3, 3]
13:38:50.669 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 3, 3]
13:38:50.669 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:50.669 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:38:50.669 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
13:38:50.669 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
13:38:50.670 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
13:38:50.670 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
13:38:50.670 [main] [30mTRACE[m  - ############################################################
13:38:50.670 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:50.670 [main] [30mTRACE[m  - ############################################################

13:38:50.670 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:50.671 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
13:38:50.671 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
13:38:50.671 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:38:50.671 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
13:38:50.674 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 2
13:38:50.674 [main] [30mTRACE[m  - ########################################################
13:38:50.674 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
13:38:50.674 [main] [30mTRACE[m  - ########################################################
13:38:50.674 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
13:38:50.674 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:50.675 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 1
13:38:50.675 [main] [32mINFO [m  - FOR - Chaque unit√©s
13:38:50.675 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
13:38:50.675 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 2
13:38:50.675 [main] [30mTRACE[m  - ######################################################
13:38:50.675 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
13:38:50.675 [main] [30mTRACE[m  - ######################################################

13:38:50.675 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 2
13:38:50.675 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
13:38:50.675 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, D, E, E, E, C, C]
13:38:50.675 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, E, E, E, C, C]
13:38:50.675 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
13:38:50.675 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAEEECC
13:38:50.675 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAEEECC
13:38:50.878 [main] [30mTRACE[m  - ####################################################
13:38:50.878 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:50.878 [main] [30mTRACE[m  - ####################################################
13:38:50.878 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:50.878 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:50.878 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:50.878 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, E, E, E, C, C]
13:38:50.878 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:50.878 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:50.878 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:50.878 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:50.878 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:50.879 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:50.879 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:50.879 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:50.879 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.879 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:50.879 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.879 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:50.879 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:50.879 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:50.879 [main] [30mTRACE[m  - ###############################################
13:38:50.879 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:50.879 [main] [30mTRACE[m  - ###############################################
13:38:50.879 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:50.879 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:50.879 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.879 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.879 [main] [36mDEBUG[m  - Index de la lettre
13:38:50.880 [main] [30mTRACE[m  - #############################################
13:38:50.880 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:50.880 [main] [30mTRACE[m  - #############################################

13:38:50.880 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:50.880 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:50.880 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, false, false]
13:38:50.880 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 0, 0, 1, 0]
13:38:50.880 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:50.880 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:50.880 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:50.880 [main] [30mTRACE[m  - ###############################################
13:38:50.880 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:50.880 [main] [30mTRACE[m  - ###############################################
13:38:50.880 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:50.880 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:50.880 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.880 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.880 [main] [36mDEBUG[m  - Index de la lettre
13:38:50.880 [main] [30mTRACE[m  - #############################################
13:38:50.880 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:50.881 [main] [30mTRACE[m  - #############################################

13:38:50.881 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:50.881 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:50.881 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, false, false, true, true, false]
13:38:50.881 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 1, 0]
13:38:50.881 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:50.881 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.881 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.881 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:50.881 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, true, true, false]
13:38:50.881 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.881 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:50.881 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:50.881 [main] [36mDEBUG[m  - array_ch_Combination[j] : A
13:38:50.881 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.882 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:50.882 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 1, 0, 1, 0]
13:38:50.882 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:50.882 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 1, 0]
13:38:50.882 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.882 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:50.882 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, true, true, false]
13:38:50.882 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.882 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:50.882 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 1]
13:38:50.882 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.882 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:50.882 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, true, true, false]
13:38:50.882 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.882 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:50.882 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 2]
13:38:50.882 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.882 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:50.882 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:50.883 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.883 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:50.883 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 3]
13:38:50.883 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.883 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:50.883 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:50.883 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.883 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:50.883 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [2, 1, 4]
13:38:50.883 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:50.883 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:50.883 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:50.883 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:50.883 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:50.883 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, false]
13:38:50.883 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:50.883 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:50.883 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:50.884 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 2, 0, 1, 0]
13:38:50.884 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:50.884 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [2, 2, 4]
13:38:50.884 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [2, 2, 4]
13:38:50.884 [main] [30mTRACE[m  - ##################################################
13:38:50.884 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:50.884 [main] [30mTRACE[m  - ##################################################

13:38:50.884 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:51.698 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:51.699 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:51.699 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:51.699 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 6
13:38:51.699 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:51.899 [main] [30mTRACE[m  - ##############################################################
13:38:51.900 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:51.900 [main] [30mTRACE[m  - ##############################################################
13:38:51.900 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 3, 3]
13:38:51.900 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [2, 2, 4]
13:38:51.900 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [2, 2, 4]
13:38:51.900 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:51.900 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:38:51.900 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
13:38:51.900 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
13:38:51.900 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
13:38:51.900 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
13:38:51.901 [main] [30mTRACE[m  - ############################################################
13:38:51.901 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:51.901 [main] [30mTRACE[m  - ############################################################

13:38:51.901 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:51.901 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
13:38:51.901 [main] [32mINFO [m  - ELSE - '=' n'appara√Æt pas
13:38:51.901 [main] [32mINFO [m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:38:51.901 [main] [32mINFO [m  - Injection (char[][]) Analyse de la d√©fense
13:38:51.904 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 3
13:38:51.904 [main] [30mTRACE[m  - ########################################################
13:38:51.904 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
13:38:51.904 [main] [30mTRACE[m  - ########################################################
13:38:51.904 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
13:38:51.904 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:51.904 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 2
13:38:51.904 [main] [32mINFO [m  - FOR - Chaque unit√©s
13:38:51.904 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
13:38:51.904 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 3
13:38:51.904 [main] [30mTRACE[m  - ######################################################
13:38:51.905 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
13:38:51.905 [main] [30mTRACE[m  - ######################################################

13:38:51.905 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 3
13:38:51.905 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
13:38:51.905 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, E, E, E, C, C]
13:38:51.905 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, E, E, C, C]
13:38:51.905 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
13:38:51.905 [main] [36mDEBUG[m  - Incr√©mentation String() : AAAAEECC
13:38:51.905 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : AAAAEECC
13:38:52.109 [main] [30mTRACE[m  - ####################################################
13:38:52.109 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:52.109 [main] [30mTRACE[m  - ####################################################
13:38:52.109 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:52.109 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:52.109 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:52.109 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [A, A, A, A, E, E, C, C]
13:38:52.109 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:52.109 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:52.109 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:52.109 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, false, false, false, false, false]
13:38:52.109 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:52.110 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:52.110 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:52.110 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:52.110 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.110 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:52.110 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.110 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:52.110 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:52.110 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : A
13:38:52.110 [main] [30mTRACE[m  - ###############################################
13:38:52.110 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:52.110 [main] [30mTRACE[m  - ###############################################
13:38:52.110 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:52.110 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:52.110 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.111 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.111 [main] [36mDEBUG[m  - Index de la lettre
13:38:52.111 [main] [30mTRACE[m  - #############################################
13:38:52.111 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:52.111 [main] [30mTRACE[m  - #############################################

13:38:52.111 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 0
13:38:52.111 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:52.111 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:52.111 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
13:38:52.111 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:52.111 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:52.112 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:52.112 [main] [30mTRACE[m  - ###############################################
13:38:52.112 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:52.112 [main] [30mTRACE[m  - ###############################################
13:38:52.112 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:52.112 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:52.112 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.112 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.112 [main] [36mDEBUG[m  - Index de la lettre
13:38:52.112 [main] [30mTRACE[m  - #############################################
13:38:52.112 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:52.112 [main] [30mTRACE[m  - #############################################

13:38:52.112 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:52.112 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, true, false, false]
13:38:52.113 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, false, false]
13:38:52.113 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 1, 0]
13:38:52.113 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:52.113 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:52.113 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:52.113 [main] [30mTRACE[m  - ###############################################
13:38:52.113 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:52.113 [main] [30mTRACE[m  - ###############################################
13:38:52.113 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:52.113 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:52.114 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.114 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.114 [main] [36mDEBUG[m  - Index de la lettre
13:38:52.114 [main] [30mTRACE[m  - #############################################
13:38:52.114 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:52.114 [main] [30mTRACE[m  - #############################################

13:38:52.114 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:52.114 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:52.114 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:52.114 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 1, 0, 1, 0]
13:38:52.114 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:52.114 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.114 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:52.114 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:52.114 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, false]
13:38:52.114 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.114 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:52.115 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 1]
13:38:52.115 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:52.115 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:52.115 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:52.115 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.115 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:52.115 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 2]
13:38:52.115 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:52.115 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:52.115 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:52.115 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.115 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:52.115 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 3]
13:38:52.115 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:52.116 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:52.116 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:52.116 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.116 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:52.116 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 0, 4]
13:38:52.116 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:52.116 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:52.116 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:52.116 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:52.116 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:52.116 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, false]
13:38:52.116 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:52.116 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:52.117 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:52.117 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 0, 2, 0, 1, 0]
13:38:52.117 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:52.117 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 4]
13:38:52.117 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 1, 4]
13:38:52.117 [main] [30mTRACE[m  - ##################################################
13:38:52.117 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:52.117 [main] [30mTRACE[m  - ##################################################

13:38:52.117 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:52.929 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:52.929 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:52.929 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:52.929 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 7
13:38:52.929 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:53.130 [main] [30mTRACE[m  - ##############################################################
13:38:53.130 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:53.130 [main] [30mTRACE[m  - ##############################################################
13:38:53.131 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [2, 2, 4]
13:38:53.131 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 1, 4]
13:38:53.131 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 1, 4]
13:38:53.131 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:38:53.131 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:38:53.131 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:53.131 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre pr√©sente mais √† la mauvaise place
13:38:53.131 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:53.131 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, ‚â†]
13:38:53.132 [main] [30mTRACE[m  - ############################################################
13:38:53.132 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:53.132 [main] [30mTRACE[m  - ############################################################

13:38:53.132 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:53.132 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:53.132 [main] [32mINFO [m  - IF - "=" appara√Æt
13:38:53.132 [main] [30mTRACE[m  - ##############################################
13:38:53.132 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:38:53.132 [main] [30mTRACE[m  - ##############################################
13:38:53.132 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:38:53.132 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:53.132 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:53.132 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:38:53.132 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:38:53.132 [main] [30mTRACE[m  - ###############################################
13:38:53.132 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:53.133 [main] [30mTRACE[m  - ###############################################
13:38:53.133 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:53.133 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.133 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.133 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.133 [main] [36mDEBUG[m  - Index de la lettre
13:38:53.133 [main] [30mTRACE[m  - #############################################
13:38:53.133 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:53.133 [main] [30mTRACE[m  - #############################################

13:38:53.133 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:53.133 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.133 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:38:53.133 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.133 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:53.133 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:53.133 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.133 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:53.133 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:53.133 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.134 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:53.134 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:53.134 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.134 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:53.134 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:53.134 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.134 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:53.134 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:53.134 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:38:53.134 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:38:53.134 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, true, false, false, false, false]
13:38:53.135 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:38:53.135 [main] [30mTRACE[m  - ############################################
13:38:53.135 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:38:53.135 [main] [30mTRACE[m  - ############################################

13:38:53.135 [main] [32mINFO [m  - Lancement √©galit√© positive
13:38:53.135 [main] [30mTRACE[m  - ##############################################
13:38:53.135 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
13:38:53.135 [main] [30mTRACE[m  - ##############################################

13:38:53.135 [main] [32mINFO [m  - Lancement diff√©rence positive
13:38:53.135 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
13:38:53.135 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
13:38:53.135 [main] [30mTRACE[m  - ##########################
13:38:53.135 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:53.135 [main] [30mTRACE[m  - ##########################

13:38:53.135 [main] [30mTRACE[m  - ############################
13:38:53.135 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:53.135 [main] [30mTRACE[m  - ############################
13:38:53.135 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:53.135 [main] [30mTRACE[m  - #####################################
13:38:53.135 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:53.135 [main] [30mTRACE[m  - #####################################
13:38:53.136 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:53.136 [main] [30mTRACE[m  - ###########################################################
13:38:53.136 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:53.136 [main] [30mTRACE[m  - ###########################################################
13:38:53.136 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:53.136 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:53.136 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [A, A, A, A, E, E, C, C]
13:38:53.136 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, false, false, true, false, false, false, false]
13:38:53.136 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:53.136 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:53.136 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:53.136 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:53.136 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:53.136 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
13:38:53.136 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
13:38:53.136 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:53.136 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:53.136 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:53.136 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:53.137 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:53.137 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
13:38:53.137 [main] [30mTRACE[m  - ###############################################
13:38:53.137 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:53.137 [main] [30mTRACE[m  - ###############################################
13:38:53.137 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:53.137 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.137 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.137 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.137 [main] [36mDEBUG[m  - Index de la lettre
13:38:53.137 [main] [30mTRACE[m  - #############################################
13:38:53.137 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:53.137 [main] [30mTRACE[m  - #############################################

13:38:53.137 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:53.137 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:53.137 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:53.137 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:53.137 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:53.137 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:53.137 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:53.138 [main] [30mTRACE[m  - #########################################################
13:38:53.138 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:53.138 [main] [30mTRACE[m  - #########################################################

13:38:53.138 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:53.138 [main] [30mTRACE[m  - ###################################
13:38:53.138 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:53.138 [main] [30mTRACE[m  - ###################################

13:38:53.138 [main] [30mTRACE[m  - ###########################################################################################################
13:38:53.138 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:53.138 [main] [30mTRACE[m  - ###########################################################################################################
13:38:53.138 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:53.138 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:53.138 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:53.138 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  7
13:38:53.138 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [B, A, A, A, E, E, C, C]
13:38:53.138 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [B, A, A, A, E, E, C, C]
13:38:53.138 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [2, 2, 4]
13:38:53.138 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [3, 1, 4]
13:38:53.138 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, ‚â†]
13:38:53.138 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:53.140 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, false, false, true, false, false, false, false]
13:38:53.141 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:53.141 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
13:38:53.141 [main] [36mDEBUG[m  - ch_NewLetter :                                B
13:38:53.141 [main] [30mTRACE[m  - ###########################################################################################################
13:38:53.141 [main] [30mTRACE[m  - ###########################################################################################################
13:38:53.141 [main] [30mTRACE[m  - ###########################################################################################################

13:38:53.141 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:53.141 [main] [36mDEBUG[m  - Incr√©mentation String() : BAAAEECC
13:38:53.141 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : BAAAEECC
13:38:53.344 [main] [30mTRACE[m  - ####################################################
13:38:53.344 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:53.344 [main] [30mTRACE[m  - ####################################################
13:38:53.344 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.344 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:53.344 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:53.344 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [B, A, A, A, E, E, C, C]
13:38:53.344 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:53.344 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:53.344 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:53.344 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, true, false, false, false, false]
13:38:53.344 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:53.344 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:53.345 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:53.345 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:53.345 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.345 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:53.345 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:53.346 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:53.346 [main] [30mTRACE[m  - ###############################################
13:38:53.346 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:53.346 [main] [30mTRACE[m  - ###############################################
13:38:53.346 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:53.346 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.346 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.346 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.346 [main] [36mDEBUG[m  - Index de la lettre
13:38:53.346 [main] [30mTRACE[m  - #############################################
13:38:53.346 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:53.346 [main] [30mTRACE[m  - #############################################

13:38:53.347 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:53.367 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:53.368 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:53.368 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
13:38:53.368 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:53.368 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.369 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:53.369 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:53.369 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:53.369 [main] [30mTRACE[m  - ###############################################
13:38:53.369 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:53.369 [main] [30mTRACE[m  - ###############################################
13:38:53.369 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:53.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.369 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.369 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.369 [main] [36mDEBUG[m  - Index de la lettre
13:38:53.369 [main] [30mTRACE[m  - #############################################
13:38:53.369 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:53.369 [main] [30mTRACE[m  - #############################################

13:38:53.369 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:53.369 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, true, false, false]
13:38:53.369 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, false, false]
13:38:53.369 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 1, 0]
13:38:53.369 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:53.369 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:53.369 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:53.369 [main] [30mTRACE[m  - ###############################################
13:38:53.369 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:53.369 [main] [30mTRACE[m  - ###############################################
13:38:53.369 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:53.369 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:53.369 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.369 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.369 [main] [36mDEBUG[m  - Index de la lettre
13:38:53.370 [main] [30mTRACE[m  - #############################################
13:38:53.370 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:53.370 [main] [30mTRACE[m  - #############################################

13:38:53.370 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:53.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:53.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, true, true, false]
13:38:53.370 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 1, 0, 1, 0]
13:38:53.370 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:53.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:53.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:53.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, true, false, true, true, false]
13:38:53.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.370 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:53.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, true, true, false]
13:38:53.370 [main] [36mDEBUG[m  - array_ch_Combination[j] : B
13:38:53.370 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.370 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:53.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 1, 0, 1, 0]
13:38:53.370 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:53.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 1, 0]
13:38:53.370 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:53.370 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:53.370 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:53.370 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.370 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:53.370 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 1]
13:38:53.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:53.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:53.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:53.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:53.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 2]
13:38:53.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:53.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:53.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:53.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.371 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:53.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [3, 1, 3]
13:38:53.371 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:53.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:53.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:53.371 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:53.371 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:53.371 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:53.371 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:53.371 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:53.371 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:53.371 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 2, 0, 1, 0]
13:38:53.371 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:53.371 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [3, 2, 3]
13:38:53.371 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [3, 2, 3]
13:38:53.371 [main] [30mTRACE[m  - ##################################################
13:38:53.372 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:53.372 [main] [30mTRACE[m  - ##################################################

13:38:53.372 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:54.190 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:54.191 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:54.191 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:54.191 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 8
13:38:54.191 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:54.393 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:54.393 [main] [30mTRACE[m  - ##############################################################
13:38:54.393 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:54.393 [main] [30mTRACE[m  - ##############################################################
13:38:54.393 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 1, 4]
13:38:54.393 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [3, 2, 3]
13:38:54.393 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [3, 2, 3]
13:38:54.393 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:54.393 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 1
13:38:54.393 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
13:38:54.394 [main] [32mINFO [m  - ELSE IF - Plus une lettre pr√©sente mais √† la mauvaise place / Moins une lettre non pr√©sente
13:38:54.394 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [‚â†, -]
13:38:54.394 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [‚â†, -]
13:38:54.394 [main] [30mTRACE[m  - ############################################################
13:38:54.394 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:54.394 [main] [30mTRACE[m  - ############################################################

13:38:54.394 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:54.394 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [‚â†, -]
13:38:54.394 [main] [32mINFO [m  - IF - "‚â†" appara√Æt
13:38:54.394 [main] [30mTRACE[m  - ################################################
13:38:54.394 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveDifference()
13:38:54.394 [main] [30mTRACE[m  - ################################################
13:38:54.394 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:54.394 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement : 0
13:38:54.395 [main] [36mDEBUG[m  - √©cup√©ration (char) Nouvelle lettre : B
13:38:54.395 [main] [30mTRACE[m  - ###############################################
13:38:54.395 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:54.395 [main] [30mTRACE[m  - ###############################################
13:38:54.395 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:54.395 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.395 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.395 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.395 [main] [36mDEBUG[m  - Index de la lettre
13:38:54.395 [main] [30mTRACE[m  - #############################################
13:38:54.395 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:54.396 [main] [30mTRACE[m  - #############################################

13:38:54.396 [main] [36mDEBUG[m  - Lancement index de la nouvelle lettre : 1
13:38:54.396 [main] [32mINFO [m  - M√†J - (char[][]) Analyse d√©fense
13:38:54.396 [main] [32mINFO [m  - Injection - (char[][]) Analyse de la d√©fense
13:38:54.397 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:54.398 [main] [30mTRACE[m  - ##############################################
13:38:54.398 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NumberOfLaps()
13:38:54.398 [main] [30mTRACE[m  - ##############################################
13:38:54.398 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours
13:38:54.398 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres trouv√©es : [false, false, false, true, false, false, false, false]
13:38:54.398 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.398 [main] [36mDEBUG[m  - (int) Nombre de tours : 6
13:38:54.398 [main] [30mTRACE[m  - ############################################
13:38:54.398 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NumberOfLaps()
13:38:54.398 [main] [30mTRACE[m  - ############################################

13:38:54.398 [main] [36mDEBUG[m  - Initialisation (int) Nombre de tours : 6
13:38:54.398 [main] [36mDEBUG[m  - Initialisation (int) Compteur de tours : 0
13:38:54.398 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 1
13:38:54.398 [main] [30mTRACE[m  - ########################################################
13:38:54.398 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_NewReplacementPosition()
13:38:54.398 [main] [30mTRACE[m  - ########################################################
13:38:54.398 [main] [36mDEBUG[m  - Initialisation (int) Nouvelle position de remplacement : 0
13:38:54.398 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:54.398 [main] [36mDEBUG[m  - R√©cup√©ration (int) Position de remplacement pr√©c√©dente : 0
13:38:54.398 [main] [32mINFO [m  - FOR - Chaque unit√©s
13:38:54.398 [main] [32mINFO [m  - IF - La lettre n'a pas encore √©t√© test√©e
13:38:54.398 [main] [36mDEBUG[m  - M√†J - (int) Nouvelle position de remplacement : 1
13:38:54.399 [main] [30mTRACE[m  - ######################################################
13:38:54.399 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_NewReplacementPosition()
13:38:54.399 [main] [30mTRACE[m  - ######################################################

13:38:54.399 [main] [36mDEBUG[m  - D√©finition (int) Nouvelle position de remplacement : 1
13:38:54.399 [main] [32mINFO [m  - Injection (int) Nouvelle position de remplacement
13:38:54.399 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [B, A, A, A, E, E, C, C]
13:38:54.399 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [B, B, A, A, E, E, C, C]
13:38:54.399 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
13:38:54.399 [main] [36mDEBUG[m  - Incr√©mentation String() : BBAAEECC
13:38:54.399 [main] [36mDEBUG[m  - Conversion (String) Nouvelle proposition de l'ordinateur : BBAAEECC
13:38:54.604 [main] [30mTRACE[m  - ####################################################
13:38:54.605 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:54.605 [main] [30mTRACE[m  - ####################################################
13:38:54.605 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.605 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:54.605 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:54.605 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [B, B, A, A, E, E, C, C]
13:38:54.605 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:54.605 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:54.605 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:54.605 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, false, false, true, false, false, false, false]
13:38:54.605 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:54.605 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:54.605 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:54.605 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:54.606 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.606 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:54.606 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:54.606 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:54.606 [main] [30mTRACE[m  - ###############################################
13:38:54.606 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:54.606 [main] [30mTRACE[m  - ###############################################
13:38:54.606 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:54.606 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.606 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.606 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.606 [main] [36mDEBUG[m  - Index de la lettre
13:38:54.606 [main] [30mTRACE[m  - #############################################
13:38:54.606 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:54.606 [main] [30mTRACE[m  - #############################################

13:38:54.606 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:54.606 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:54.606 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, false, false, true, false, false, false, false]
13:38:54.606 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 0, 0, 0, 0, 0]
13:38:54.606 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:54.606 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.606 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:54.607 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:54.607 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : B
13:38:54.607 [main] [30mTRACE[m  - ###############################################
13:38:54.607 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:54.607 [main] [30mTRACE[m  - ###############################################
13:38:54.607 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:54.607 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.607 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.607 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.607 [main] [36mDEBUG[m  - Index de la lettre
13:38:54.607 [main] [30mTRACE[m  - #############################################
13:38:54.607 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:54.607 [main] [30mTRACE[m  - #############################################

13:38:54.607 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 1
13:38:54.607 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, true, false, false, false, false]
13:38:54.607 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, false, false, false]
13:38:54.607 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
13:38:54.607 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:54.607 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:54.607 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:54.608 [main] [30mTRACE[m  - ###############################################
13:38:54.608 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:54.608 [main] [30mTRACE[m  - ###############################################
13:38:54.608 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:54.608 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.608 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.608 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.608 [main] [36mDEBUG[m  - Index de la lettre
13:38:54.608 [main] [30mTRACE[m  - #############################################
13:38:54.608 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:54.608 [main] [30mTRACE[m  - #############################################

13:38:54.608 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:54.608 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, true, false, true, false, false]
13:38:54.608 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, true, false, false]
13:38:54.608 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 1, 0]
13:38:54.608 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:54.608 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
13:38:54.608 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:54.608 [main] [30mTRACE[m  - ###############################################
13:38:54.608 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:54.608 [main] [30mTRACE[m  - ###############################################
13:38:54.608 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:54.609 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:54.609 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.609 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.609 [main] [36mDEBUG[m  - Index de la lettre
13:38:54.609 [main] [30mTRACE[m  - #############################################
13:38:54.609 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:54.609 [main] [30mTRACE[m  - #############################################

13:38:54.609 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:54.609 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, true, false, true, true, false]
13:38:54.609 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, true, true, false]
13:38:54.609 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 1, 0]
13:38:54.609 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:54.609 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.609 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:54.609 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:54.609 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:54.609 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.609 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:54.609 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 1]
13:38:54.609 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:54.610 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:54.610 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:54.610 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.610 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:54.610 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 2]
13:38:54.610 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:54.610 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:54.610 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:54.610 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.610 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:54.610 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [4, 0, 3]
13:38:54.610 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:54.610 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:54.610 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:54.610 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:54.610 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:54.610 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:54.610 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:54.610 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:54.610 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:54.611 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 2, 0, 1, 0]
13:38:54.611 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:54.611 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [4, 1, 3]
13:38:54.611 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [4, 1, 3]
13:38:54.611 [main] [30mTRACE[m  - ##################################################
13:38:54.611 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:54.611 [main] [30mTRACE[m  - ##################################################

13:38:54.611 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:55.425 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:55.425 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:55.426 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:55.426 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 9
13:38:55.426 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:55.626 [main] [30mTRACE[m  - ##############################################################
13:38:55.627 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:55.627 [main] [30mTRACE[m  - ##############################################################
13:38:55.627 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [3, 2, 3]
13:38:55.627 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [4, 1, 3]
13:38:55.627 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [4, 1, 3]
13:38:55.627 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:38:55.627 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:38:55.627 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:55.627 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre pr√©sente mais √† la mauvaise place
13:38:55.627 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:55.627 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, ‚â†]
13:38:55.627 [main] [30mTRACE[m  - ############################################################
13:38:55.627 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:55.627 [main] [30mTRACE[m  - ############################################################

13:38:55.627 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:55.627 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:55.627 [main] [32mINFO [m  - IF - "=" appara√Æt
13:38:55.627 [main] [30mTRACE[m  - ##############################################
13:38:55.628 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:38:55.628 [main] [30mTRACE[m  - ##############################################
13:38:55.628 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:38:55.628 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:55.628 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:55.628 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:38:55.628 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:38:55.628 [main] [30mTRACE[m  - ###############################################
13:38:55.628 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.628 [main] [30mTRACE[m  - ###############################################
13:38:55.628 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.628 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.628 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.628 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.628 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.628 [main] [30mTRACE[m  - #############################################
13:38:55.628 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.628 [main] [30mTRACE[m  - #############################################

13:38:55.628 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:55.628 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.628 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:55.629 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:55.629 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.629 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:38:55.629 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.629 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:55.629 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:55.629 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.629 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:55.629 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:55.629 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.629 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:55.629 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:55.629 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.629 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:55.629 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:55.629 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:38:55.629 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:38:55.629 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [false, true, false, true, false, false, false, false]
13:38:55.629 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:38:55.629 [main] [30mTRACE[m  - ############################################
13:38:55.629 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:38:55.629 [main] [30mTRACE[m  - ############################################

13:38:55.629 [main] [32mINFO [m  - Lancement √©galit√© positive
13:38:55.629 [main] [30mTRACE[m  - ##############################################
13:38:55.630 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveDifference()
13:38:55.630 [main] [30mTRACE[m  - ##############################################

13:38:55.630 [main] [32mINFO [m  - Lancement diff√©rence positive
13:38:55.630 [main] [32mINFO [m  - IF - "‚â†" dispara√Æt
13:38:55.630 [main] [32mINFO [m  - Lancement diff√©rence n√©gative
13:38:55.630 [main] [30mTRACE[m  - ##########################
13:38:55.630 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:55.630 [main] [30mTRACE[m  - ##########################

13:38:55.630 [main] [30mTRACE[m  - ############################
13:38:55.630 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:55.630 [main] [30mTRACE[m  - ############################
13:38:55.630 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:55.630 [main] [30mTRACE[m  - #####################################
13:38:55.630 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:55.630 [main] [30mTRACE[m  - #####################################
13:38:55.630 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:55.630 [main] [30mTRACE[m  - ###########################################################
13:38:55.630 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:55.630 [main] [30mTRACE[m  - ###########################################################
13:38:55.630 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:55.630 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:55.630 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [B, B, A, A, E, E, C, C]
13:38:55.631 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [false, true, false, true, false, false, false, false]
13:38:55.631 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:55.631 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:55.631 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:55.631 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:55.631 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:55.631 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 0
13:38:55.631 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
13:38:55.631 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:55.631 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:55.631 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:55.631 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:55.631 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:55.631 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:55.631 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
13:38:55.631 [main] [30mTRACE[m  - ###############################################
13:38:55.631 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.631 [main] [30mTRACE[m  - ###############################################
13:38:55.631 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.631 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.631 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.631 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.632 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.632 [main] [30mTRACE[m  - #############################################
13:38:55.632 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.632 [main] [30mTRACE[m  - #############################################

13:38:55.632 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:55.632 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:55.632 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:55.632 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:55.632 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:55.632 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:55.632 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:55.632 [main] [30mTRACE[m  - #########################################################
13:38:55.632 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:55.632 [main] [30mTRACE[m  - #########################################################

13:38:55.632 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:55.632 [main] [30mTRACE[m  - ###################################
13:38:55.632 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:55.632 [main] [30mTRACE[m  - ###################################

13:38:55.632 [main] [30mTRACE[m  - ###########################################################################################################
13:38:55.632 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:55.632 [main] [30mTRACE[m  - ###########################################################################################################
13:38:55.632 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:55.633 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:55.633 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:55.633 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  9
13:38:55.633 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, A, A, E, E, C, C]
13:38:55.633 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, A, A, E, E, C, C]
13:38:55.633 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [3, 2, 3]
13:38:55.633 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [4, 1, 3]
13:38:55.633 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, ‚â†]
13:38:55.633 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:55.634 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [false, true, false, true, false, false, false, false]
13:38:55.634 [main] [36mDEBUG[m  - int_ReplacementPosition :                     0
13:38:55.635 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
13:38:55.635 [main] [36mDEBUG[m  - ch_NewLetter :                                C
13:38:55.635 [main] [30mTRACE[m  - ###########################################################################################################
13:38:55.635 [main] [30mTRACE[m  - ###########################################################################################################
13:38:55.635 [main] [30mTRACE[m  - ###########################################################################################################

13:38:55.635 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:55.635 [main] [36mDEBUG[m  - Incr√©mentation String() : CBAAEECC
13:38:55.635 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBAAEECC
13:38:55.835 [main] [30mTRACE[m  - ####################################################
13:38:55.835 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:55.836 [main] [30mTRACE[m  - ####################################################
13:38:55.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:55.836 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:55.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, A, A, E, E, C, C]
13:38:55.836 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:55.836 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:55.836 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:55.836 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [false, true, false, true, false, false, false, false]
13:38:55.836 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:55.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:55.836 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:55.836 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:55.836 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.836 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:55.836 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:55.836 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:55.837 [main] [30mTRACE[m  - ###############################################
13:38:55.837 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.837 [main] [30mTRACE[m  - ###############################################
13:38:55.837 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.837 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.837 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.837 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.837 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.837 [main] [30mTRACE[m  - #############################################
13:38:55.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.837 [main] [30mTRACE[m  - #############################################

13:38:55.837 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:38:55.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
13:38:55.837 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, false, false, false, false, false]
13:38:55.837 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 0, 0, 0, 0]
13:38:55.837 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:55.837 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:55.837 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:55.837 [main] [30mTRACE[m  - ###############################################
13:38:55.837 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.837 [main] [30mTRACE[m  - ###############################################
13:38:55.837 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.838 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.838 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.838 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.838 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.838 [main] [30mTRACE[m  - #############################################
13:38:55.838 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.838 [main] [30mTRACE[m  - #############################################

13:38:55.838 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:55.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [false, true, false, true, false, false, false, false]
13:38:55.838 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [false, true, false, true, false, false, false, false]
13:38:55.838 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 0, 0, 0, 0]
13:38:55.838 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:55.838 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.838 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:55.838 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:55.838 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:55.838 [main] [30mTRACE[m  - ###############################################
13:38:55.838 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.838 [main] [30mTRACE[m  - ###############################################
13:38:55.838 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.839 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.839 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.839 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.839 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.839 [main] [30mTRACE[m  - #############################################
13:38:55.839 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.839 [main] [30mTRACE[m  - #############################################

13:38:55.839 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:55.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:55.839 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:55.839 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
13:38:55.839 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:55.839 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
13:38:55.839 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:55.839 [main] [30mTRACE[m  - ###############################################
13:38:55.839 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.839 [main] [30mTRACE[m  - ###############################################
13:38:55.839 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.839 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.839 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.839 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.839 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.840 [main] [30mTRACE[m  - #############################################
13:38:55.840 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.840 [main] [30mTRACE[m  - #############################################

13:38:55.840 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:55.840 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
13:38:55.840 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
13:38:55.840 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 1, 0]
13:38:55.840 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:55.840 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
13:38:55.840 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:55.840 [main] [30mTRACE[m  - ###############################################
13:38:55.840 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:55.840 [main] [30mTRACE[m  - ###############################################
13:38:55.840 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:55.840 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:55.840 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.840 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.840 [main] [36mDEBUG[m  - Index de la lettre
13:38:55.840 [main] [30mTRACE[m  - #############################################
13:38:55.840 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:55.840 [main] [30mTRACE[m  - #############################################

13:38:55.841 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:55.841 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:55.841 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:55.841 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 0]
13:38:55.841 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:55.841 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.841 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:55.841 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:55.841 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:55.841 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.841 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:55.841 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
13:38:55.841 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:55.841 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:55.841 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:55.841 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.841 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:55.841 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
13:38:55.841 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:55.841 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:55.841 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:55.842 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:55.842 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:55.842 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:55.842 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:55.842 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:55.842 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:55.842 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 0]
13:38:55.842 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:55.842 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [5, 1, 2]
13:38:55.842 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 1, 2]
13:38:55.842 [main] [30mTRACE[m  - ##################################################
13:38:55.842 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:55.842 [main] [30mTRACE[m  - ##################################################

13:38:55.842 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:56.656 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:56.656 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:56.656 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:56.656 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 10
13:38:56.656 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:56.857 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:56.857 [main] [30mTRACE[m  - ##############################################################
13:38:56.857 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:56.857 [main] [30mTRACE[m  - ##############################################################
13:38:56.857 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [4, 1, 3]
13:38:56.857 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 1, 2]
13:38:56.857 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 1, 2]
13:38:56.858 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:38:56.858 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:38:56.858 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
13:38:56.858 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
13:38:56.858 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
13:38:56.859 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
13:38:56.859 [main] [30mTRACE[m  - ############################################################
13:38:56.859 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:56.859 [main] [30mTRACE[m  - ############################################################

13:38:56.859 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:56.859 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
13:38:56.859 [main] [32mINFO [m  - IF - "=" appara√Æt
13:38:56.859 [main] [30mTRACE[m  - ##############################################
13:38:56.859 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:38:56.859 [main] [30mTRACE[m  - ##############################################
13:38:56.859 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:38:56.859 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:56.859 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:56.859 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:38:56.859 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:38:56.860 [main] [30mTRACE[m  - ###############################################
13:38:56.860 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:56.860 [main] [30mTRACE[m  - ###############################################
13:38:56.860 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:56.860 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:56.860 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.860 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.860 [main] [36mDEBUG[m  - Index de la lettre
13:38:56.860 [main] [30mTRACE[m  - #############################################
13:38:56.860 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:56.860 [main] [30mTRACE[m  - #############################################

13:38:56.860 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:56.861 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:56.861 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:56.861 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:56.861 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:56.861 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.861 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:56.862 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:56.862 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:38:56.862 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:38:56.862 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, true, false, false, false, false]
13:38:56.862 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:38:56.862 [main] [30mTRACE[m  - ############################################
13:38:56.862 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:38:56.862 [main] [30mTRACE[m  - ############################################

13:38:56.862 [main] [32mINFO [m  - Lancement √©galit√© positive
13:38:56.862 [main] [30mTRACE[m  - ##########################
13:38:56.862 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:56.862 [main] [30mTRACE[m  - ##########################

13:38:56.862 [main] [30mTRACE[m  - ############################
13:38:56.862 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:56.862 [main] [30mTRACE[m  - ############################
13:38:56.862 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:56.863 [main] [30mTRACE[m  - #####################################
13:38:56.863 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:56.863 [main] [30mTRACE[m  - #####################################
13:38:56.863 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:56.863 [main] [30mTRACE[m  - ###########################################################
13:38:56.863 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:56.863 [main] [30mTRACE[m  - ###########################################################
13:38:56.863 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:56.863 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:56.863 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, A, A, E, E, C, C]
13:38:56.863 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, true, false, false, false, false]
13:38:56.863 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:56.863 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:56.864 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:56.864 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:56.864 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:56.864 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:56.864 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:56.864 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
13:38:56.864 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
13:38:56.864 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:56.864 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:56.864 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:56.864 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:56.864 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:56.864 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
13:38:56.864 [main] [30mTRACE[m  - ###############################################
13:38:56.864 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:56.865 [main] [30mTRACE[m  - ###############################################
13:38:56.865 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:56.865 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:56.865 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.865 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:56.865 [main] [36mDEBUG[m  - Index de la lettre
13:38:56.865 [main] [30mTRACE[m  - #############################################
13:38:56.865 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:56.865 [main] [30mTRACE[m  - #############################################

13:38:56.865 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:56.865 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:56.865 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:56.865 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:56.865 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:56.865 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:56.865 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:56.865 [main] [30mTRACE[m  - #########################################################
13:38:56.865 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:56.865 [main] [30mTRACE[m  - #########################################################

13:38:56.865 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:56.865 [main] [30mTRACE[m  - ###################################
13:38:56.865 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:56.866 [main] [30mTRACE[m  - ###################################

13:38:56.866 [main] [30mTRACE[m  - ###########################################################################################################
13:38:56.866 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:56.866 [main] [30mTRACE[m  - ###########################################################################################################
13:38:56.866 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:56.866 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:56.866 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:56.866 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  10
13:38:56.866 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, B, A, E, E, C, C]
13:38:56.866 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, B, A, E, E, C, C]
13:38:56.866 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [4, 1, 3]
13:38:56.866 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 1, 2]
13:38:56.866 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
13:38:56.866 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:56.867 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, true, false, false, false, false]
13:38:56.867 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
13:38:56.867 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
13:38:56.867 [main] [36mDEBUG[m  - ch_NewLetter :                                B
13:38:56.868 [main] [30mTRACE[m  - ###########################################################################################################
13:38:56.868 [main] [30mTRACE[m  - ###########################################################################################################
13:38:56.868 [main] [30mTRACE[m  - ###########################################################################################################

13:38:56.868 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:56.868 [main] [36mDEBUG[m  - Incr√©mentation String() : CBBAEECC
13:38:56.868 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBBAEECC
13:38:57.073 [main] [30mTRACE[m  - ####################################################
13:38:57.073 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:57.073 [main] [30mTRACE[m  - ####################################################
13:38:57.073 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.073 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:57.074 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:57.074 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, B, A, E, E, C, C]
13:38:57.074 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:57.074 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:57.074 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:57.074 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, true, false, false, false, false]
13:38:57.074 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:57.074 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:57.074 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:57.074 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:57.074 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.074 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:57.074 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:57.074 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:57.074 [main] [30mTRACE[m  - ###############################################
13:38:57.074 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:57.074 [main] [30mTRACE[m  - ###############################################
13:38:57.074 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:57.075 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.075 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.075 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.075 [main] [36mDEBUG[m  - Index de la lettre
13:38:57.075 [main] [30mTRACE[m  - #############################################
13:38:57.075 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:57.075 [main] [30mTRACE[m  - #############################################

13:38:57.075 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:38:57.075 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:57.075 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:57.075 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:38:57.075 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:57.075 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:57.075 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:57.075 [main] [30mTRACE[m  - ###############################################
13:38:57.075 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:57.075 [main] [30mTRACE[m  - ###############################################
13:38:57.075 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:57.075 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.075 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.075 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.075 [main] [36mDEBUG[m  - Index de la lettre
13:38:57.075 [main] [30mTRACE[m  - #############################################
13:38:57.076 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:57.076 [main] [30mTRACE[m  - #############################################

13:38:57.076 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:38:57.076 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:57.076 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:57.076 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:38:57.076 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:57.076 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:57.076 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:57.076 [main] [30mTRACE[m  - ###############################################
13:38:57.076 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:57.076 [main] [30mTRACE[m  - ###############################################
13:38:57.076 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:57.076 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.076 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.076 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.076 [main] [36mDEBUG[m  - Index de la lettre
13:38:57.076 [main] [30mTRACE[m  - #############################################
13:38:57.076 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:57.076 [main] [30mTRACE[m  - #############################################

13:38:57.076 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:57.077 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:57.077 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:57.077 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
13:38:57.077 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:57.077 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.077 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:57.077 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
13:38:57.077 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:57.077 [main] [30mTRACE[m  - ###############################################
13:38:57.077 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:57.077 [main] [30mTRACE[m  - ###############################################
13:38:57.077 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:57.077 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.077 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.077 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.077 [main] [36mDEBUG[m  - Index de la lettre
13:38:57.077 [main] [30mTRACE[m  - #############################################
13:38:57.077 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:57.078 [main] [30mTRACE[m  - #############################################

13:38:57.078 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:57.078 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
13:38:57.078 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, false, false]
13:38:57.078 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 1, 0]
13:38:57.078 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:57.078 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
13:38:57.078 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:57.078 [main] [30mTRACE[m  - ###############################################
13:38:57.078 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:57.078 [main] [30mTRACE[m  - ###############################################
13:38:57.078 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:57.078 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:57.078 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.078 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.078 [main] [36mDEBUG[m  - Index de la lettre
13:38:57.078 [main] [30mTRACE[m  - #############################################
13:38:57.078 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:57.078 [main] [30mTRACE[m  - #############################################

13:38:57.079 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:57.079 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:57.079 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, true, true, false]
13:38:57.079 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 0]
13:38:57.079 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:57.079 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.079 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:57.079 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:57.079 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:57.079 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.079 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:57.079 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 1]
13:38:57.079 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:57.079 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:57.079 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:57.079 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.079 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:57.079 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [5, 0, 2]
13:38:57.079 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:57.079 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:57.079 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:57.080 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:57.080 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:38:57.080 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:57.080 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:38:57.080 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:57.080 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:38:57.080 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 0]
13:38:57.080 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:38:57.080 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [5, 1, 2]
13:38:57.080 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [5, 1, 2]
13:38:57.080 [main] [30mTRACE[m  - ##################################################
13:38:57.080 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:57.080 [main] [30mTRACE[m  - ##################################################

13:38:57.080 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:57.898 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:57.898 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:57.898 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:57.899 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 11
13:38:57.899 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:58.099 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:58.100 [main] [30mTRACE[m  - ##############################################################
13:38:58.100 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:58.100 [main] [30mTRACE[m  - ##############################################################
13:38:58.100 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 1, 2]
13:38:58.100 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [5, 1, 2]
13:38:58.100 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [5, 1, 2]
13:38:58.100 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:38:58.100 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:38:58.100 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:58.100 [main] [32mINFO [m  - ELSE - Sinon ...
13:38:58.100 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:38:58.100 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:38:58.100 [main] [30mTRACE[m  - ############################################################
13:38:58.100 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:58.100 [main] [30mTRACE[m  - ############################################################

13:38:58.100 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:58.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:38:58.101 [main] [30mTRACE[m  - ##########################
13:38:58.101 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:58.101 [main] [30mTRACE[m  - ##########################

13:38:58.101 [main] [30mTRACE[m  - ############################
13:38:58.101 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:58.101 [main] [30mTRACE[m  - ############################
13:38:58.101 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:58.101 [main] [30mTRACE[m  - #####################################
13:38:58.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:58.101 [main] [30mTRACE[m  - #####################################
13:38:58.101 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:58.101 [main] [30mTRACE[m  - ###########################################################
13:38:58.101 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:58.101 [main] [30mTRACE[m  - ###########################################################
13:38:58.101 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:58.101 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:58.101 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, B, A, E, E, C, C]
13:38:58.101 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, false, true, false, false, false, false]
13:38:58.101 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:58.102 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:58.102 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:58.102 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:58.102 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:58.102 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:58.102 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:58.102 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 2
13:38:58.102 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
13:38:58.102 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:58.102 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:58.102 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:58.102 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:58.102 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:58.102 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:58.102 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
13:38:58.102 [main] [30mTRACE[m  - ###############################################
13:38:58.102 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.102 [main] [30mTRACE[m  - ###############################################
13:38:58.102 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.102 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.102 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.102 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.102 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.102 [main] [30mTRACE[m  - #############################################
13:38:58.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.103 [main] [30mTRACE[m  - #############################################

13:38:58.103 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:58.103 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:58.103 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:58.103 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:58.103 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:58.103 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:58.103 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:58.103 [main] [30mTRACE[m  - #########################################################
13:38:58.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:58.103 [main] [30mTRACE[m  - #########################################################

13:38:58.103 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:58.103 [main] [30mTRACE[m  - ###################################
13:38:58.103 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:58.103 [main] [30mTRACE[m  - ###################################

13:38:58.103 [main] [30mTRACE[m  - ###########################################################################################################
13:38:58.103 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:58.103 [main] [30mTRACE[m  - ###########################################################################################################
13:38:58.103 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:58.103 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:58.104 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:58.104 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  11
13:38:58.104 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, E, E, C, C]
13:38:58.104 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, E, E, C, C]
13:38:58.104 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 1, 2]
13:38:58.104 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [5, 1, 2]
13:38:58.104 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:38:58.104 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:58.105 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, false, true, false, false, false, false]
13:38:58.105 [main] [36mDEBUG[m  - int_ReplacementPosition :                     2
13:38:58.105 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
13:38:58.106 [main] [36mDEBUG[m  - ch_NewLetter :                                C
13:38:58.106 [main] [30mTRACE[m  - ###########################################################################################################
13:38:58.106 [main] [30mTRACE[m  - ###########################################################################################################
13:38:58.106 [main] [30mTRACE[m  - ###########################################################################################################

13:38:58.106 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:58.106 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAEECC
13:38:58.106 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAEECC
13:38:58.308 [main] [30mTRACE[m  - ####################################################
13:38:58.311 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:58.311 [main] [30mTRACE[m  - ####################################################
13:38:58.311 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.311 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:58.311 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:58.311 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, E, E, C, C]
13:38:58.311 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:58.311 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:58.311 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:58.311 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, false, true, false, false, false, false]
13:38:58.311 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:58.311 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:58.312 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:58.312 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:58.312 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:58.312 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:58.312 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:58.312 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:58.312 [main] [30mTRACE[m  - ###############################################
13:38:58.312 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.312 [main] [30mTRACE[m  - ###############################################
13:38:58.312 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.312 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.312 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.312 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.312 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.312 [main] [30mTRACE[m  - #############################################
13:38:58.312 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.312 [main] [30mTRACE[m  - #############################################

13:38:58.312 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:38:58.312 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:58.313 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:58.313 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:38:58.313 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:58.313 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:58.313 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:58.313 [main] [30mTRACE[m  - ###############################################
13:38:58.313 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.313 [main] [30mTRACE[m  - ###############################################
13:38:58.313 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.313 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.313 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.313 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.313 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.313 [main] [30mTRACE[m  - #############################################
13:38:58.313 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.313 [main] [30mTRACE[m  - #############################################

13:38:58.313 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:38:58.313 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:58.313 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:58.313 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:38:58.313 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:58.313 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:58.313 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:58.314 [main] [30mTRACE[m  - ###############################################
13:38:58.314 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.314 [main] [30mTRACE[m  - ###############################################
13:38:58.314 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.314 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.314 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.314 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.314 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.314 [main] [30mTRACE[m  - #############################################
13:38:58.314 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.314 [main] [30mTRACE[m  - #############################################

13:38:58.314 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:58.314 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:58.314 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, true, false, false, false, false]
13:38:58.314 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 1, 0, 0, 0]
13:38:58.314 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:58.314 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:58.314 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:58.314 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [4, 0, 0]
13:38:58.314 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:58.314 [main] [30mTRACE[m  - ###############################################
13:38:58.315 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.315 [main] [30mTRACE[m  - ###############################################
13:38:58.315 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.315 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.315 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.315 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.315 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.315 [main] [30mTRACE[m  - #############################################
13:38:58.315 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.315 [main] [30mTRACE[m  - #############################################

13:38:58.315 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:58.315 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:38:58.315 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:38:58.315 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:38:58.315 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:58.315 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
13:38:58.315 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:58.315 [main] [30mTRACE[m  - ###############################################
13:38:58.316 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.316 [main] [30mTRACE[m  - ###############################################
13:38:58.316 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.316 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.316 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.316 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.316 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.316 [main] [30mTRACE[m  - #############################################
13:38:58.316 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.316 [main] [30mTRACE[m  - #############################################

13:38:58.316 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:58.317 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
13:38:58.317 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, false, false]
13:38:58.317 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 0]
13:38:58.317 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:58.317 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
13:38:58.317 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:58.317 [main] [30mTRACE[m  - ###############################################
13:38:58.317 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:58.317 [main] [30mTRACE[m  - ###############################################
13:38:58.317 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:58.317 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:58.317 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.317 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:58.317 [main] [36mDEBUG[m  - Index de la lettre
13:38:58.317 [main] [30mTRACE[m  - #############################################
13:38:58.318 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:58.318 [main] [30mTRACE[m  - #############################################

13:38:58.318 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:58.318 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:58.318 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, true, true, false]
13:38:58.318 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 1, 0]
13:38:58.318 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:58.318 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:58.318 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:58.318 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:38:58.318 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:58.318 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:58.318 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:58.318 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:38:58.318 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:58.318 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:58.318 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:58.318 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:58.318 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:58.318 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
13:38:58.319 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
13:38:58.319 [main] [30mTRACE[m  - ##################################################
13:38:58.319 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:58.319 [main] [30mTRACE[m  - ##################################################

13:38:58.319 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:38:59.133 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:38:59.133 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:38:59.133 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:38:59.133 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 12
13:38:59.133 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:38:59.339 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:38:59.339 [main] [30mTRACE[m  - ##############################################################
13:38:59.339 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:59.339 [main] [30mTRACE[m  - ##############################################################
13:38:59.339 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [5, 1, 2]
13:38:59.339 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
13:38:59.339 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
13:38:59.339 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:38:59.339 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:38:59.339 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:38:59.339 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre pr√©sente mais √† la mauvaise place
13:38:59.339 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:59.339 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, ‚â†]
13:38:59.339 [main] [30mTRACE[m  - ############################################################
13:38:59.339 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:38:59.340 [main] [30mTRACE[m  - ############################################################

13:38:59.340 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:38:59.340 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, ‚â†]
13:38:59.340 [main] [32mINFO [m  - IF - "=" appara√Æt
13:38:59.340 [main] [30mTRACE[m  - ##############################################
13:38:59.340 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:38:59.340 [main] [30mTRACE[m  - ##############################################
13:38:59.340 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:38:59.340 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:38:59.340 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:38:59.340 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:38:59.340 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:38:59.340 [main] [30mTRACE[m  - ###############################################
13:38:59.340 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.340 [main] [30mTRACE[m  - ###############################################
13:38:59.340 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.340 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.340 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.340 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.340 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.341 [main] [30mTRACE[m  - #############################################
13:38:59.341 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.341 [main] [30mTRACE[m  - #############################################

13:38:59.341 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:59.341 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.341 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:38:59.341 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:38:59.342 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:38:59.342 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:38:59.342 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, false, false]
13:38:59.342 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:38:59.342 [main] [30mTRACE[m  - ############################################
13:38:59.342 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:38:59.342 [main] [30mTRACE[m  - ############################################

13:38:59.342 [main] [32mINFO [m  - Lancement √©galit√© positive
13:38:59.342 [main] [30mTRACE[m  - ##########################
13:38:59.342 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:38:59.342 [main] [30mTRACE[m  - ##########################

13:38:59.342 [main] [30mTRACE[m  - ############################
13:38:59.342 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:38:59.342 [main] [30mTRACE[m  - ############################
13:38:59.342 [main] [32mINFO [m  - IF - Mode "Duel"
13:38:59.342 [main] [30mTRACE[m  - #####################################
13:38:59.342 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:38:59.342 [main] [30mTRACE[m  - #####################################
13:38:59.342 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:38:59.342 [main] [30mTRACE[m  - ###########################################################
13:38:59.343 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:59.343 [main] [30mTRACE[m  - ###########################################################
13:38:59.343 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:38:59.343 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:38:59.343 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, E, E, C, C]
13:38:59.343 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, false, false, false, false]
13:38:59.343 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:38:59.343 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:38:59.343 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:38:59.343 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:59.343 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:59.343 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:59.343 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:59.343 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:38:59.343 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:38:59.343 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 4
13:38:59.343 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
13:38:59.343 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:59.343 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:59.343 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:59.344 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:59.344 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:38:59.344 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:38:59.344 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:38:59.344 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:38:59.344 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:38:59.344 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
13:38:59.344 [main] [30mTRACE[m  - ###############################################
13:38:59.344 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.344 [main] [30mTRACE[m  - ###############################################
13:38:59.344 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.344 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.344 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.344 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.344 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.344 [main] [30mTRACE[m  - #############################################
13:38:59.344 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.344 [main] [30mTRACE[m  - #############################################

13:38:59.344 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:38:59.344 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:38:59.344 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:38:59.344 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:38:59.344 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:38:59.344 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:38:59.345 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:38:59.345 [main] [30mTRACE[m  - #########################################################
13:38:59.345 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:38:59.345 [main] [30mTRACE[m  - #########################################################

13:38:59.345 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:38:59.345 [main] [30mTRACE[m  - ###################################
13:38:59.345 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:38:59.345 [main] [30mTRACE[m  - ###################################

13:38:59.345 [main] [30mTRACE[m  - ###########################################################################################################
13:38:59.345 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:38:59.345 [main] [30mTRACE[m  - ###########################################################################################################
13:38:59.345 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:38:59.345 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:38:59.345 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:38:59.345 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  12
13:38:59.345 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, C, C]
13:38:59.345 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, C, C]
13:38:59.345 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [5, 1, 2]
13:38:59.345 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 0, 2]
13:38:59.345 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, ‚â†]
13:38:59.346 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:38:59.348 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, false, false, false, false]
13:38:59.348 [main] [36mDEBUG[m  - int_ReplacementPosition :                     4
13:38:59.348 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
13:38:59.348 [main] [36mDEBUG[m  - ch_NewLetter :                                F
13:38:59.348 [main] [30mTRACE[m  - ###########################################################################################################
13:38:59.348 [main] [30mTRACE[m  - ###########################################################################################################
13:38:59.348 [main] [30mTRACE[m  - ###########################################################################################################

13:38:59.348 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:38:59.348 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFECC
13:38:59.348 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFECC
13:38:59.551 [main] [30mTRACE[m  - ####################################################
13:38:59.551 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:38:59.551 [main] [30mTRACE[m  - ####################################################
13:38:59.551 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.551 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:38:59.551 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:38:59.551 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:38:59.551 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:38:59.551 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:38:59.551 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:38:59.551 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, false, false, false, false]
13:38:59.551 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:38:59.552 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:59.552 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:38:59.552 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:38:59.552 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:59.552 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:59.552 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:38:59.552 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:59.552 [main] [30mTRACE[m  - ###############################################
13:38:59.552 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.552 [main] [30mTRACE[m  - ###############################################
13:38:59.552 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.552 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.552 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.552 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.552 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.552 [main] [30mTRACE[m  - #############################################
13:38:59.552 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.552 [main] [30mTRACE[m  - #############################################

13:38:59.552 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:38:59.552 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:59.552 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:38:59.553 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:38:59.553 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:59.553 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:38:59.553 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:38:59.553 [main] [30mTRACE[m  - ###############################################
13:38:59.553 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.553 [main] [30mTRACE[m  - ###############################################
13:38:59.553 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.553 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.553 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.553 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.553 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.553 [main] [30mTRACE[m  - #############################################
13:38:59.553 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.553 [main] [30mTRACE[m  - #############################################

13:38:59.553 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:38:59.553 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:59.553 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:38:59.553 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:38:59.553 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:59.554 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:38:59.554 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:59.554 [main] [30mTRACE[m  - ###############################################
13:38:59.554 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.554 [main] [30mTRACE[m  - ###############################################
13:38:59.554 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.554 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.554 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.554 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.554 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.554 [main] [30mTRACE[m  - #############################################
13:38:59.554 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.554 [main] [30mTRACE[m  - #############################################

13:38:59.554 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:38:59.554 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:38:59.554 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:38:59.554 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:38:59.554 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:38:59.554 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:38:59.554 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:38:59.554 [main] [30mTRACE[m  - ###############################################
13:38:59.554 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.554 [main] [30mTRACE[m  - ###############################################
13:38:59.555 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.555 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.555 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.555 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.555 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.555 [main] [30mTRACE[m  - #############################################
13:38:59.555 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.555 [main] [30mTRACE[m  - #############################################

13:38:59.555 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:38:59.555 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:38:59.555 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:38:59.555 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:38:59.555 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:38:59.555 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:59.555 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:59.555 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [5, 0, 0]
13:38:59.555 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : F
13:38:59.555 [main] [30mTRACE[m  - ###############################################
13:38:59.555 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.555 [main] [30mTRACE[m  - ###############################################
13:38:59.555 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.556 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.556 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.556 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.556 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.556 [main] [30mTRACE[m  - #############################################
13:38:59.556 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.556 [main] [30mTRACE[m  - #############################################

13:38:59.556 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 5
13:38:59.556 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:38:59.556 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:38:59.556 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:38:59.556 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:59.556 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
13:38:59.556 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : E
13:38:59.556 [main] [30mTRACE[m  - ###############################################
13:38:59.556 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.556 [main] [30mTRACE[m  - ###############################################
13:38:59.556 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.556 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.556 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.556 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.556 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.557 [main] [30mTRACE[m  - #############################################
13:38:59.557 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.557 [main] [30mTRACE[m  - #############################################

13:38:59.557 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 4
13:38:59.557 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:38:59.557 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:38:59.557 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:38:59.557 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:38:59.557 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
13:38:59.557 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:38:59.557 [main] [30mTRACE[m  - ###############################################
13:38:59.557 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:38:59.557 [main] [30mTRACE[m  - ###############################################
13:38:59.557 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:38:59.557 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:38:59.557 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.557 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:38:59.557 [main] [36mDEBUG[m  - Index de la lettre
13:38:59.557 [main] [30mTRACE[m  - #############################################
13:38:59.557 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:38:59.557 [main] [30mTRACE[m  - #############################################

13:38:59.558 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:38:59.558 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:59.558 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:38:59.558 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 1, 1]
13:38:59.558 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:38:59.558 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:59.558 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:38:59.558 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:38:59.558 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:38:59.558 [main] [32mINFO [m  - FOR - Chaque unit√©
13:38:59.558 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:38:59.558 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
13:38:59.558 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
13:38:59.558 [main] [30mTRACE[m  - ##################################################
13:38:59.558 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:38:59.558 [main] [30mTRACE[m  - ##################################################

13:38:59.558 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:00.374 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:00.375 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:00.375 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:00.375 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 13
13:39:00.375 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:00.577 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:00.577 [main] [30mTRACE[m  - ##############################################################
13:39:00.577 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:00.577 [main] [30mTRACE[m  - ##############################################################
13:39:00.577 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 0, 2]
13:39:00.577 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
13:39:00.577 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
13:39:00.577 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:39:00.577 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:39:00.578 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
13:39:00.578 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre non pr√©sente
13:39:00.578 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, -]
13:39:00.578 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, -]
13:39:00.578 [main] [30mTRACE[m  - ############################################################
13:39:00.578 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:00.578 [main] [30mTRACE[m  - ############################################################

13:39:00.578 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:00.578 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, -]
13:39:00.578 [main] [32mINFO [m  - IF - "=" appara√Æt
13:39:00.578 [main] [30mTRACE[m  - ##############################################
13:39:00.578 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:39:00.578 [main] [30mTRACE[m  - ##############################################
13:39:00.578 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:39:00.578 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:39:00.578 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:39:00.578 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:39:00.578 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:39:00.578 [main] [30mTRACE[m  - ###############################################
13:39:00.578 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.579 [main] [30mTRACE[m  - ###############################################
13:39:00.579 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.579 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.579 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.579 [main] [30mTRACE[m  - #############################################
13:39:00.579 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.579 [main] [30mTRACE[m  - #############################################

13:39:00.579 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:00.579 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:00.579 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:00.579 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:00.579 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:00.579 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:00.579 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:00.579 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:00.579 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:00.579 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.579 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:00.580 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:00.580 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.580 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:39:00.580 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:39:00.580 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:39:00.580 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, false, false]
13:39:00.580 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:39:00.580 [main] [30mTRACE[m  - ############################################
13:39:00.580 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:39:00.580 [main] [30mTRACE[m  - ############################################

13:39:00.580 [main] [32mINFO [m  - Lancement √©galit√© positive
13:39:00.580 [main] [30mTRACE[m  - ##########################
13:39:00.580 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:00.580 [main] [30mTRACE[m  - ##########################

13:39:00.580 [main] [30mTRACE[m  - ############################
13:39:00.580 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:00.580 [main] [30mTRACE[m  - ############################
13:39:00.580 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:00.580 [main] [30mTRACE[m  - #####################################
13:39:00.580 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:00.580 [main] [30mTRACE[m  - #####################################
13:39:00.581 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:00.581 [main] [30mTRACE[m  - ###########################################################
13:39:00.581 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:00.581 [main] [30mTRACE[m  - ###########################################################
13:39:00.581 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:00.581 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:00.581 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:00.581 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, false, false]
13:39:00.581 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:00.581 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:00.581 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:00.581 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:00.581 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 5
13:39:00.581 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
13:39:00.581 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:00.581 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:00.581 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:00.582 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:00.582 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:00.582 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:00.582 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:00.582 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:00.582 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:00.582 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
13:39:00.582 [main] [30mTRACE[m  - ###############################################
13:39:00.582 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.582 [main] [30mTRACE[m  - ###############################################
13:39:00.582 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.582 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.582 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.582 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.582 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.582 [main] [30mTRACE[m  - #############################################
13:39:00.582 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.582 [main] [30mTRACE[m  - #############################################

13:39:00.582 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:00.582 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:00.582 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:00.582 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:00.583 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:00.583 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:00.583 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:00.583 [main] [30mTRACE[m  - #########################################################
13:39:00.583 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:00.583 [main] [30mTRACE[m  - #########################################################

13:39:00.583 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:00.583 [main] [30mTRACE[m  - ###################################
13:39:00.583 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:00.583 [main] [30mTRACE[m  - ###################################

13:39:00.583 [main] [30mTRACE[m  - ###########################################################################################################
13:39:00.583 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:00.583 [main] [30mTRACE[m  - ###########################################################################################################
13:39:00.583 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:00.583 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:00.583 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:00.583 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  13
13:39:00.583 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, F, C, C]
13:39:00.583 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, F, C, C]
13:39:00.583 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
13:39:00.583 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
13:39:00.584 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, -]
13:39:00.584 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:00.586 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, false, false, false]
13:39:00.586 [main] [36mDEBUG[m  - int_ReplacementPosition :                     5
13:39:00.586 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
13:39:00.586 [main] [36mDEBUG[m  - ch_NewLetter :                                F
13:39:00.586 [main] [30mTRACE[m  - ###########################################################################################################
13:39:00.586 [main] [30mTRACE[m  - ###########################################################################################################
13:39:00.586 [main] [30mTRACE[m  - ###########################################################################################################

13:39:00.586 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:00.586 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFFCC
13:39:00.586 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFFCC
13:39:00.790 [main] [30mTRACE[m  - ####################################################
13:39:00.790 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:00.790 [main] [30mTRACE[m  - ####################################################
13:39:00.790 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.790 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:00.790 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:00.790 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, F, C, C]
13:39:00.790 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:00.790 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:00.791 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:00.791 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, false, false, false]
13:39:00.791 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:00.791 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:00.791 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:00.791 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:00.791 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:00.791 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:00.791 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:00.791 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:00.791 [main] [30mTRACE[m  - ###############################################
13:39:00.791 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.791 [main] [30mTRACE[m  - ###############################################
13:39:00.791 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.791 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.791 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.791 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.791 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.791 [main] [30mTRACE[m  - #############################################
13:39:00.791 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.791 [main] [30mTRACE[m  - #############################################

13:39:00.791 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:00.792 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:00.792 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:00.792 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:00.792 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:00.792 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:00.792 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:00.792 [main] [30mTRACE[m  - ###############################################
13:39:00.792 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.792 [main] [30mTRACE[m  - ###############################################
13:39:00.792 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.792 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.792 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.792 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.792 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.792 [main] [30mTRACE[m  - #############################################
13:39:00.792 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.792 [main] [30mTRACE[m  - #############################################

13:39:00.792 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:00.792 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:00.792 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:00.793 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:00.793 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:00.793 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:00.793 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:00.793 [main] [30mTRACE[m  - ###############################################
13:39:00.793 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.793 [main] [30mTRACE[m  - ###############################################
13:39:00.793 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.793 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.793 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.793 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.793 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.793 [main] [30mTRACE[m  - #############################################
13:39:00.794 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.794 [main] [30mTRACE[m  - #############################################

13:39:00.794 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:00.794 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:00.794 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:00.794 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:00.794 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:00.794 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:00.794 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:00.794 [main] [30mTRACE[m  - ###############################################
13:39:00.794 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.794 [main] [30mTRACE[m  - ###############################################
13:39:00.794 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.795 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.795 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.795 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.795 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.795 [main] [30mTRACE[m  - #############################################
13:39:00.795 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.795 [main] [30mTRACE[m  - #############################################

13:39:00.795 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:00.795 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:00.795 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:00.795 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:00.795 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:00.795 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:00.795 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:00.795 [main] [30mTRACE[m  - ###############################################
13:39:00.795 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.795 [main] [30mTRACE[m  - ###############################################
13:39:00.795 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.795 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.795 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.795 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.795 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.795 [main] [30mTRACE[m  - #############################################
13:39:00.795 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.796 [main] [30mTRACE[m  - #############################################

13:39:00.796 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:00.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:00.796 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:00.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:00.796 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:00.796 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:00.796 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:39:00.796 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:00.796 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:39:00.796 [main] [30mTRACE[m  - ###############################################
13:39:00.796 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:00.796 [main] [30mTRACE[m  - ###############################################
13:39:00.796 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:00.796 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:00.796 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.796 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:00.796 [main] [36mDEBUG[m  - Index de la lettre
13:39:00.796 [main] [30mTRACE[m  - #############################################
13:39:00.796 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:00.796 [main] [30mTRACE[m  - #############################################

13:39:00.797 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:39:00.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
13:39:00.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, true, false]
13:39:00.797 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 0, 1]
13:39:00.797 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:00.797 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:00.797 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:00.797 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:00.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:00.797 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:00.797 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:00.797 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:39:00.797 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:00.797 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:00.797 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:00.797 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:00.797 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:00.797 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 2]
13:39:00.798 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 0, 2]
13:39:00.798 [main] [30mTRACE[m  - ##################################################
13:39:00.798 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:00.798 [main] [30mTRACE[m  - ##################################################

13:39:00.798 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:01.612 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:01.612 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:01.613 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:01.613 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 14
13:39:01.613 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:01.818 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:01.818 [main] [30mTRACE[m  - ##############################################################
13:39:01.818 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:01.818 [main] [30mTRACE[m  - ##############################################################
13:39:01.818 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
13:39:01.818 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 0, 2]
13:39:01.818 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 0, 2]
13:39:01.818 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
13:39:01.818 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:39:01.818 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
13:39:01.818 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre bien plac√©e
13:39:01.819 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, =]
13:39:01.819 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, =]
13:39:01.819 [main] [30mTRACE[m  - ############################################################
13:39:01.819 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:01.819 [main] [30mTRACE[m  - ############################################################

13:39:01.819 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:01.819 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, =]
13:39:01.819 [main] [32mINFO [m  - IF - "‚â†" n'est pas apparu et que "=" a disparu
13:39:01.819 [main] [30mTRACE[m  - ##############################################
13:39:01.819 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_NegativeEquality()
13:39:01.820 [main] [30mTRACE[m  - ##############################################
13:39:01.820 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:39:01.820 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition : [C, B, C, A, F, F, C, C]
13:39:01.820 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:39:01.820 [main] [36mDEBUG[m  - R√©cup√©ration (int) Nouvelle position de remplacement : 5
13:39:01.821 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettre pr√©c√©dente : E
13:39:01.821 [main] [36mDEBUG[m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:01.821 [main] [32mINFO [m  - Injection (char[]) Nouvelle proposition de l'ordinateur
13:39:01.821 [main] [30mTRACE[m  - ###############################################
13:39:01.821 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.821 [main] [30mTRACE[m  - ###############################################
13:39:01.821 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.821 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.821 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.821 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.821 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.821 [main] [30mTRACE[m  - #############################################
13:39:01.821 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.822 [main] [30mTRACE[m  - #############################################

13:39:01.822 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre pr√©c√©dente : 4
13:39:01.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.822 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
13:39:01.822 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:39:01.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.822 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
13:39:01.822 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:39:01.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.822 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
13:39:01.822 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:39:01.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.822 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
13:39:01.822 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:39:01.822 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.823 [main] [32mINFO [m  - ELSE - "i" = Index de la lettre pr√©c√©dente
13:39:01.823 [main] [36mDEBUG[m  - La lettre est pr√©sente √† cette position = 'LETTRE PRECEDENTE'
13:39:01.823 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.823 [main] [32mINFO [m  - IF - "i" != Index de la lettre pr√©c√©dente
13:39:01.823 [main] [36mDEBUG[m  - La lettre n'est pas pr√©sente √† cette position = '‚Ä†'
13:39:01.823 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, false, false, false]
13:39:01.824 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:01.824 [main] [32mINFO [m  - Injection (boolean[]) Lettres de la combinaison trouv√©es
13:39:01.824 [main] [30mTRACE[m  - ####################################################
13:39:01.824 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:01.824 [main] [30mTRACE[m  - ####################################################
13:39:01.824 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.824 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:01.824 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:01.824 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:01.824 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:01.824 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:01.824 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:01.824 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:01.825 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:01.825 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:01.825 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:01.825 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:01.825 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:01.825 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.825 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:01.825 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:01.825 [main] [30mTRACE[m  - ###############################################
13:39:01.825 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.825 [main] [30mTRACE[m  - ###############################################
13:39:01.825 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.825 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.825 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.825 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.826 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.826 [main] [30mTRACE[m  - #############################################
13:39:01.826 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.826 [main] [30mTRACE[m  - #############################################

13:39:01.826 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:01.826 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:01.826 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:01.826 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:01.827 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.827 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:01.827 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:01.827 [main] [30mTRACE[m  - ###############################################
13:39:01.827 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.827 [main] [30mTRACE[m  - ###############################################
13:39:01.827 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.827 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.827 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.827 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.827 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.827 [main] [30mTRACE[m  - #############################################
13:39:01.827 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.827 [main] [30mTRACE[m  - #############################################

13:39:01.827 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:01.827 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:01.828 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:01.828 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:01.828 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.828 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:01.828 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:01.828 [main] [30mTRACE[m  - ###############################################
13:39:01.828 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.828 [main] [30mTRACE[m  - ###############################################
13:39:01.828 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.828 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.828 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.828 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.828 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.828 [main] [30mTRACE[m  - #############################################
13:39:01.828 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.828 [main] [30mTRACE[m  - #############################################

13:39:01.828 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:01.829 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:01.829 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:01.829 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:01.829 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.829 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:01.829 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:01.829 [main] [30mTRACE[m  - ###############################################
13:39:01.829 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.829 [main] [30mTRACE[m  - ###############################################
13:39:01.829 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.829 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.829 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.829 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.829 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.829 [main] [30mTRACE[m  - #############################################
13:39:01.829 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.829 [main] [30mTRACE[m  - #############################################

13:39:01.829 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:01.830 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:01.830 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:01.830 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:01.830 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.830 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:01.830 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:01.830 [main] [30mTRACE[m  - ###############################################
13:39:01.830 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.830 [main] [30mTRACE[m  - ###############################################
13:39:01.830 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.830 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.830 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.830 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.830 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.830 [main] [30mTRACE[m  - #############################################
13:39:01.831 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.831 [main] [30mTRACE[m  - #############################################

13:39:01.831 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:01.831 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:01.831 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:01.831 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:01.831 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:01.831 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:01.831 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:01.831 [main] [30mTRACE[m  - ###############################################
13:39:01.831 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.831 [main] [30mTRACE[m  - ###############################################
13:39:01.831 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.831 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.831 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.831 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.831 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.831 [main] [30mTRACE[m  - #############################################
13:39:01.832 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.832 [main] [30mTRACE[m  - #############################################

13:39:01.832 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:01.832 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:01.832 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:01.832 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:01.832 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:01.832 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:01.832 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:39:01.832 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
13:39:01.832 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:39:01.832 [main] [30mTRACE[m  - ###############################################
13:39:01.832 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.832 [main] [30mTRACE[m  - ###############################################
13:39:01.832 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.832 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.832 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.832 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.832 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.832 [main] [30mTRACE[m  - #############################################
13:39:01.832 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.832 [main] [30mTRACE[m  - #############################################

13:39:01.833 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:39:01.833 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:01.833 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:01.833 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 1, 1]
13:39:01.833 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:01.833 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:01.833 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:01.833 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:01.833 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:01.833 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:01.833 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:01.833 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
13:39:01.833 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
13:39:01.833 [main] [30mTRACE[m  - ##################################################
13:39:01.833 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:01.833 [main] [30mTRACE[m  - ##################################################

13:39:01.833 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:01.834 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:01.834 [main] [30mTRACE[m  - ############################################
13:39:01.834 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_NegativeEquality()
13:39:01.834 [main] [30mTRACE[m  - ############################################

13:39:01.834 [main] [32mINFO [m  - Lancement √©galit√© n√©gative
13:39:01.834 [main] [30mTRACE[m  - ##########################
13:39:01.834 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:01.834 [main] [30mTRACE[m  - ##########################

13:39:01.834 [main] [30mTRACE[m  - ############################
13:39:01.834 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:01.834 [main] [30mTRACE[m  - ############################
13:39:01.834 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:01.834 [main] [30mTRACE[m  - #####################################
13:39:01.834 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:01.834 [main] [30mTRACE[m  - #####################################
13:39:01.834 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:01.834 [main] [30mTRACE[m  - ###########################################################
13:39:01.834 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:01.834 [main] [30mTRACE[m  - ###########################################################
13:39:01.834 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:01.834 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:01.835 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:01.835 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:01.835 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:01.835 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:01.835 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:01.835 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:01.835 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:01.835 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
13:39:01.835 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:01.835 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:01.836 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:01.836 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:01.836 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:01.836 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:01.836 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:01.836 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
13:39:01.836 [main] [30mTRACE[m  - ###############################################
13:39:01.836 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:01.836 [main] [30mTRACE[m  - ###############################################
13:39:01.836 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:01.836 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:01.836 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.836 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:01.836 [main] [36mDEBUG[m  - Index de la lettre
13:39:01.836 [main] [30mTRACE[m  - #############################################
13:39:01.836 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:01.836 [main] [30mTRACE[m  - #############################################

13:39:01.836 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:01.836 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:01.836 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:01.836 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:01.836 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:01.836 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:01.836 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:01.837 [main] [30mTRACE[m  - #########################################################
13:39:01.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:01.837 [main] [30mTRACE[m  - #########################################################

13:39:01.837 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:01.837 [main] [30mTRACE[m  - ###################################
13:39:01.837 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:01.837 [main] [30mTRACE[m  - ###################################

13:39:01.837 [main] [30mTRACE[m  - ###########################################################################################################
13:39:01.837 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:01.837 [main] [30mTRACE[m  - ###########################################################################################################
13:39:01.837 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:01.837 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:01.837 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:01.837 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  14
13:39:01.837 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, D, C]
13:39:01.837 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, D, C]
13:39:01.837 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 0, 2]
13:39:01.837 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
13:39:01.837 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, =]
13:39:01.838 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:01.839 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:01.839 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:01.839 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
13:39:01.839 [main] [36mDEBUG[m  - ch_NewLetter :                                D
13:39:01.839 [main] [30mTRACE[m  - ###########################################################################################################
13:39:01.839 [main] [30mTRACE[m  - ###########################################################################################################
13:39:01.839 [main] [30mTRACE[m  - ###########################################################################################################

13:39:01.839 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:01.839 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFEDC
13:39:01.839 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFEDC
13:39:02.043 [main] [30mTRACE[m  - ####################################################
13:39:02.043 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:02.043 [main] [30mTRACE[m  - ####################################################
13:39:02.043 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.043 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:02.044 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:02.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, D, C]
13:39:02.044 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:02.044 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:02.044 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:02.044 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:02.044 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:02.044 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:02.044 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:02.044 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:02.044 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:02.044 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.044 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:02.044 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:02.044 [main] [30mTRACE[m  - ###############################################
13:39:02.044 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.044 [main] [30mTRACE[m  - ###############################################
13:39:02.044 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.044 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.045 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.045 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.045 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.045 [main] [30mTRACE[m  - #############################################
13:39:02.045 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.045 [main] [30mTRACE[m  - #############################################

13:39:02.045 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:02.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:02.045 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:02.045 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:02.045 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.045 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:02.045 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:02.045 [main] [30mTRACE[m  - ###############################################
13:39:02.045 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.045 [main] [30mTRACE[m  - ###############################################
13:39:02.045 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.045 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.045 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.046 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.046 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.046 [main] [30mTRACE[m  - #############################################
13:39:02.046 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.046 [main] [30mTRACE[m  - #############################################

13:39:02.046 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:02.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:02.046 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:02.046 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:02.046 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.046 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:02.046 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:02.046 [main] [30mTRACE[m  - ###############################################
13:39:02.046 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.046 [main] [30mTRACE[m  - ###############################################
13:39:02.046 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.046 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.046 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.046 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.046 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.046 [main] [30mTRACE[m  - #############################################
13:39:02.046 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.046 [main] [30mTRACE[m  - #############################################

13:39:02.046 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:02.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:02.047 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:02.047 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:02.047 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.047 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:02.047 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:02.047 [main] [30mTRACE[m  - ###############################################
13:39:02.047 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.047 [main] [30mTRACE[m  - ###############################################
13:39:02.047 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.047 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.047 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.047 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.047 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.047 [main] [30mTRACE[m  - #############################################
13:39:02.047 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.047 [main] [30mTRACE[m  - #############################################

13:39:02.048 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:02.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:02.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:02.048 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:02.048 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.048 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:02.048 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:02.048 [main] [30mTRACE[m  - ###############################################
13:39:02.048 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.048 [main] [30mTRACE[m  - ###############################################
13:39:02.048 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.048 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.048 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.048 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.048 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.048 [main] [30mTRACE[m  - #############################################
13:39:02.048 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.048 [main] [30mTRACE[m  - #############################################

13:39:02.048 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:02.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:02.048 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:02.049 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:02.049 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:02.049 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:02.049 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:02.049 [main] [30mTRACE[m  - ###############################################
13:39:02.049 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:02.049 [main] [30mTRACE[m  - ###############################################
13:39:02.049 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:02.049 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:02.049 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.049 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.049 [main] [36mDEBUG[m  - Index de la lettre
13:39:02.049 [main] [30mTRACE[m  - #############################################
13:39:02.049 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:02.049 [main] [30mTRACE[m  - #############################################

13:39:02.049 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:02.049 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:02.049 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:02.049 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:02.049 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:02.049 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:02.050 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:02.050 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:02.050 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:02.050 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : D
13:39:02.050 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:02.050 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:02.050 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:02.050 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, true]
13:39:02.050 [main] [36mDEBUG[m  - array_ch_Combination[j] : D
13:39:02.050 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.050 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:02.050 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 2, 1, 1, 1]
13:39:02.050 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:02.050 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 1, 0]
13:39:02.050 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:02.050 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:02.050 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:02.050 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:02.050 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:02.051 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:02.051 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:39:02.051 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:02.051 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:02.051 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 1, 1, 1]
13:39:02.051 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:02.051 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 2, 0]
13:39:02.051 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 2, 0]
13:39:02.051 [main] [30mTRACE[m  - ##################################################
13:39:02.051 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:02.051 [main] [30mTRACE[m  - ##################################################

13:39:02.051 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:02.867 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:02.867 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:02.868 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:02.868 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 15
13:39:02.868 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:03.069 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:03.069 [main] [30mTRACE[m  - ##############################################################
13:39:03.069 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:03.069 [main] [30mTRACE[m  - ##############################################################
13:39:03.069 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [7, 0, 1]
13:39:03.069 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 2, 0]
13:39:03.069 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 2, 0]
13:39:03.069 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : -1
13:39:03.069 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 2
13:39:03.069 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : -1
13:39:03.069 [main] [32mINFO [m  - ELSE - Sinon ...
13:39:03.069 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:39:03.069 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:39:03.069 [main] [30mTRACE[m  - ############################################################
13:39:03.069 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:03.069 [main] [30mTRACE[m  - ############################################################

13:39:03.070 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:03.070 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:39:03.070 [main] [30mTRACE[m  - ##########################
13:39:03.070 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:03.070 [main] [30mTRACE[m  - ##########################

13:39:03.070 [main] [30mTRACE[m  - ############################
13:39:03.070 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:03.070 [main] [30mTRACE[m  - ############################
13:39:03.070 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:03.070 [main] [30mTRACE[m  - #####################################
13:39:03.070 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:03.070 [main] [30mTRACE[m  - #####################################
13:39:03.070 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:03.070 [main] [30mTRACE[m  - ###########################################################
13:39:03.070 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:03.070 [main] [30mTRACE[m  - ###########################################################
13:39:03.070 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:03.070 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:03.070 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, D, C]
13:39:03.070 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:03.071 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:03.071 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:03.071 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:03.071 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:03.071 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:03.071 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : D
13:39:03.071 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:03.071 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:03.071 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:03.071 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:03.071 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:03.071 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:03.071 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:03.071 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:03.072 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : E
13:39:03.072 [main] [30mTRACE[m  - ###############################################
13:39:03.072 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.072 [main] [30mTRACE[m  - ###############################################
13:39:03.072 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.072 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.072 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.072 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.072 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.072 [main] [30mTRACE[m  - #############################################
13:39:03.072 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.072 [main] [30mTRACE[m  - #############################################

13:39:03.072 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:03.072 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:03.073 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:03.073 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:03.073 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:03.073 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:03.073 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:03.073 [main] [30mTRACE[m  - #########################################################
13:39:03.073 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:03.073 [main] [30mTRACE[m  - #########################################################

13:39:03.073 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:03.073 [main] [30mTRACE[m  - ###################################
13:39:03.073 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:03.073 [main] [30mTRACE[m  - ###################################

13:39:03.073 [main] [30mTRACE[m  - ###########################################################################################################
13:39:03.073 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:03.073 [main] [30mTRACE[m  - ###########################################################################################################
13:39:03.073 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:03.073 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:03.073 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:03.073 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  15
13:39:03.073 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, E, C]
13:39:03.074 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, E, C]
13:39:03.074 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [7, 0, 1]
13:39:03.074 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 2, 0]
13:39:03.074 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:39:03.074 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:03.076 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:03.076 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:03.076 [main] [36mDEBUG[m  - ch_PreviousLetter :                           D
13:39:03.076 [main] [36mDEBUG[m  - ch_NewLetter :                                E
13:39:03.076 [main] [30mTRACE[m  - ###########################################################################################################
13:39:03.077 [main] [30mTRACE[m  - ###########################################################################################################
13:39:03.077 [main] [30mTRACE[m  - ###########################################################################################################

13:39:03.077 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:03.077 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFEEC
13:39:03.077 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFEEC
13:39:03.279 [main] [30mTRACE[m  - ####################################################
13:39:03.280 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:03.280 [main] [30mTRACE[m  - ####################################################
13:39:03.280 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.280 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:03.280 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:03.280 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, E, C]
13:39:03.280 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:03.280 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:03.280 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:03.280 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:03.280 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:03.280 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:03.280 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:03.280 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:03.280 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:03.280 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.281 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:03.281 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:03.281 [main] [30mTRACE[m  - ###############################################
13:39:03.281 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.281 [main] [30mTRACE[m  - ###############################################
13:39:03.281 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.281 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.281 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.281 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.281 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.281 [main] [30mTRACE[m  - #############################################
13:39:03.281 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.281 [main] [30mTRACE[m  - #############################################

13:39:03.281 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:03.281 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:03.281 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:03.281 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:03.281 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.281 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:03.281 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:03.281 [main] [30mTRACE[m  - ###############################################
13:39:03.282 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.282 [main] [30mTRACE[m  - ###############################################
13:39:03.282 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.282 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.282 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.282 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.282 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.282 [main] [30mTRACE[m  - #############################################
13:39:03.282 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.282 [main] [30mTRACE[m  - #############################################

13:39:03.282 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:03.282 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:03.282 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:03.282 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:03.282 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.282 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:03.282 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:03.282 [main] [30mTRACE[m  - ###############################################
13:39:03.282 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.282 [main] [30mTRACE[m  - ###############################################
13:39:03.282 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.282 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.283 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.283 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.283 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.283 [main] [30mTRACE[m  - #############################################
13:39:03.283 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.283 [main] [30mTRACE[m  - #############################################

13:39:03.283 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:03.283 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:03.283 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:03.283 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:03.283 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.283 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:03.283 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:03.283 [main] [30mTRACE[m  - ###############################################
13:39:03.283 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.283 [main] [30mTRACE[m  - ###############################################
13:39:03.283 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.283 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.283 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.283 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.283 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.283 [main] [30mTRACE[m  - #############################################
13:39:03.283 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.283 [main] [30mTRACE[m  - #############################################

13:39:03.284 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:03.284 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:03.284 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:03.284 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:03.284 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.284 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:03.284 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:03.284 [main] [30mTRACE[m  - ###############################################
13:39:03.284 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.284 [main] [30mTRACE[m  - ###############################################
13:39:03.284 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.284 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.284 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.284 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.284 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.284 [main] [30mTRACE[m  - #############################################
13:39:03.284 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.284 [main] [30mTRACE[m  - #############################################

13:39:03.284 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:03.284 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:03.284 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:03.284 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:03.285 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:03.285 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:03.285 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:03.285 [main] [30mTRACE[m  - ###############################################
13:39:03.285 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:03.285 [main] [30mTRACE[m  - ###############################################
13:39:03.285 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:03.285 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:03.285 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.285 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.285 [main] [36mDEBUG[m  - Index de la lettre
13:39:03.285 [main] [30mTRACE[m  - #############################################
13:39:03.285 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:03.285 [main] [30mTRACE[m  - #############################################

13:39:03.285 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:03.285 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:03.285 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:03.285 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:03.285 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:03.285 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:03.285 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:03.285 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:03.286 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:03.286 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:03.286 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:03.286 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:03.286 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:03.286 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:39:03.286 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:03.286 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:03.286 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:03.286 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:03.286 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:03.286 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:03.286 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:39:03.286 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:03.286 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:03.286 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 1]
13:39:03.286 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:03.286 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 1, 1]
13:39:03.286 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 1, 1]
13:39:03.286 [main] [30mTRACE[m  - ##################################################
13:39:03.286 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:03.286 [main] [30mTRACE[m  - ##################################################

13:39:03.286 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:04.098 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:04.098 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:04.098 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:04.098 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 16
13:39:04.098 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:04.299 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:04.299 [main] [30mTRACE[m  - ##############################################################
13:39:04.299 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:04.299 [main] [30mTRACE[m  - ##############################################################
13:39:04.300 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 2, 0]
13:39:04.300 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 1, 1]
13:39:04.300 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 1, 1]
13:39:04.300 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:39:04.300 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:39:04.300 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 1
13:39:04.300 [main] [32mINFO [m  - ELSE IF - Plus une lettre non pr√©sente / Moins une lettre pr√©sente mais √† la mauvaise place
13:39:04.300 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, ‚â†]
13:39:04.300 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, ‚â†]
13:39:04.300 [main] [30mTRACE[m  - ############################################################
13:39:04.300 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:04.300 [main] [30mTRACE[m  - ############################################################

13:39:04.300 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:04.300 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, ‚â†]
13:39:04.300 [main] [30mTRACE[m  - ##########################
13:39:04.300 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:04.300 [main] [30mTRACE[m  - ##########################

13:39:04.300 [main] [30mTRACE[m  - ############################
13:39:04.300 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:04.301 [main] [30mTRACE[m  - ############################
13:39:04.301 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:04.301 [main] [30mTRACE[m  - #####################################
13:39:04.301 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:04.301 [main] [30mTRACE[m  - #####################################
13:39:04.301 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:04.301 [main] [30mTRACE[m  - ###########################################################
13:39:04.301 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:04.301 [main] [30mTRACE[m  - ###########################################################
13:39:04.301 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:04.301 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:04.301 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, E, C]
13:39:04.301 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:04.301 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:04.301 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:04.301 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:04.301 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:04.302 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:04.302 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : E
13:39:04.302 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:04.302 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:04.302 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:04.302 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:04.302 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:04.303 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:04.303 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:04.303 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:04.303 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:04.303 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : F
13:39:04.304 [main] [30mTRACE[m  - ###############################################
13:39:04.304 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.304 [main] [30mTRACE[m  - ###############################################
13:39:04.304 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.304 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.304 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.304 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.304 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.304 [main] [30mTRACE[m  - #############################################
13:39:04.304 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.304 [main] [30mTRACE[m  - #############################################

13:39:04.304 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:04.304 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:04.304 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:04.304 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:04.304 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:04.304 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:04.304 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:04.304 [main] [30mTRACE[m  - #########################################################
13:39:04.304 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:04.304 [main] [30mTRACE[m  - #########################################################

13:39:04.304 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:04.304 [main] [30mTRACE[m  - ###################################
13:39:04.305 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:04.305 [main] [30mTRACE[m  - ###################################

13:39:04.305 [main] [30mTRACE[m  - ###########################################################################################################
13:39:04.305 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:04.305 [main] [30mTRACE[m  - ###########################################################################################################
13:39:04.305 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:04.305 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:04.305 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:04.305 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  16
13:39:04.305 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, F, C]
13:39:04.305 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, F, C]
13:39:04.305 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 2, 0]
13:39:04.305 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 1, 1]
13:39:04.305 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, ‚â†]
13:39:04.305 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:04.307 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:04.307 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:04.307 [main] [36mDEBUG[m  - ch_PreviousLetter :                           E
13:39:04.307 [main] [36mDEBUG[m  - ch_NewLetter :                                F
13:39:04.307 [main] [30mTRACE[m  - ###########################################################################################################
13:39:04.307 [main] [30mTRACE[m  - ###########################################################################################################
13:39:04.307 [main] [30mTRACE[m  - ###########################################################################################################

13:39:04.307 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:04.307 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFEFC
13:39:04.308 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFEFC
13:39:04.508 [main] [30mTRACE[m  - ####################################################
13:39:04.508 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:04.508 [main] [30mTRACE[m  - ####################################################
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, F, C]
13:39:04.509 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:04.509 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:04.509 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:04.509 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:04.509 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:04.509 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:04.509 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:04.509 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:04.509 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.509 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:04.509 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:04.509 [main] [30mTRACE[m  - ###############################################
13:39:04.509 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.509 [main] [30mTRACE[m  - ###############################################
13:39:04.509 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.509 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.509 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.509 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.509 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.510 [main] [30mTRACE[m  - #############################################
13:39:04.510 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.510 [main] [30mTRACE[m  - #############################################

13:39:04.510 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:04.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:04.510 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:04.510 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:04.510 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.510 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:04.510 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:04.510 [main] [30mTRACE[m  - ###############################################
13:39:04.510 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.510 [main] [30mTRACE[m  - ###############################################
13:39:04.510 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.510 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.510 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.510 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.510 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.510 [main] [30mTRACE[m  - #############################################
13:39:04.510 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.510 [main] [30mTRACE[m  - #############################################

13:39:04.510 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:04.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:04.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:04.511 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:04.511 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.511 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:04.511 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:04.511 [main] [30mTRACE[m  - ###############################################
13:39:04.511 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.511 [main] [30mTRACE[m  - ###############################################
13:39:04.511 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.511 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.511 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.511 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.511 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.511 [main] [30mTRACE[m  - #############################################
13:39:04.511 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.511 [main] [30mTRACE[m  - #############################################

13:39:04.511 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:04.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:04.511 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:04.511 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:04.511 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:04.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:04.512 [main] [30mTRACE[m  - ###############################################
13:39:04.512 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.512 [main] [30mTRACE[m  - ###############################################
13:39:04.512 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.512 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.512 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.512 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.512 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.512 [main] [30mTRACE[m  - #############################################
13:39:04.512 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.512 [main] [30mTRACE[m  - #############################################

13:39:04.512 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:04.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:04.512 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:04.512 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:04.512 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.512 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:04.512 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:04.512 [main] [30mTRACE[m  - ###############################################
13:39:04.512 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.512 [main] [30mTRACE[m  - ###############################################
13:39:04.512 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.513 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.513 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.513 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.513 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.513 [main] [30mTRACE[m  - #############################################
13:39:04.513 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.513 [main] [30mTRACE[m  - #############################################

13:39:04.513 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:04.513 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:04.513 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:04.513 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:04.513 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:04.513 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:04.513 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:04.513 [main] [30mTRACE[m  - ###############################################
13:39:04.513 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:04.513 [main] [30mTRACE[m  - ###############################################
13:39:04.513 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:04.514 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:04.514 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.514 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.514 [main] [36mDEBUG[m  - Index de la lettre
13:39:04.514 [main] [30mTRACE[m  - #############################################
13:39:04.514 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:04.514 [main] [30mTRACE[m  - #############################################

13:39:04.514 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:04.514 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:04.514 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:04.514 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:04.514 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:04.514 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:04.514 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:04.514 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:04.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:04.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:04.514 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:04.514 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:04.514 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:04.514 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:39:04.514 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:04.514 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:04.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:04.515 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:04.515 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:04.515 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:04.515 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:39:04.515 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:04.515 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:04.515 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 1]
13:39:04.515 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:04.515 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 1, 1]
13:39:04.515 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 1, 1]
13:39:04.515 [main] [30mTRACE[m  - ##################################################
13:39:04.515 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:04.515 [main] [30mTRACE[m  - ##################################################

13:39:04.515 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:05.329 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:05.329 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:05.329 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:05.329 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 17
13:39:05.329 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:05.530 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:05.530 [main] [30mTRACE[m  - ##############################################################
13:39:05.530 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:05.530 [main] [30mTRACE[m  - ##############################################################
13:39:05.530 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 1, 1]
13:39:05.530 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 1, 1]
13:39:05.531 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 1, 1]
13:39:05.531 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:39:05.531 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:39:05.531 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:39:05.531 [main] [32mINFO [m  - ELSE - Sinon ...
13:39:05.531 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:39:05.531 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:39:05.531 [main] [30mTRACE[m  - ############################################################
13:39:05.531 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:05.531 [main] [30mTRACE[m  - ############################################################

13:39:05.531 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:05.531 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:39:05.531 [main] [30mTRACE[m  - ##########################
13:39:05.531 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:05.531 [main] [30mTRACE[m  - ##########################

13:39:05.531 [main] [30mTRACE[m  - ############################
13:39:05.532 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:05.532 [main] [30mTRACE[m  - ############################
13:39:05.532 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:05.532 [main] [30mTRACE[m  - #####################################
13:39:05.532 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:05.532 [main] [30mTRACE[m  - #####################################
13:39:05.532 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:05.532 [main] [30mTRACE[m  - ###########################################################
13:39:05.532 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:05.532 [main] [30mTRACE[m  - ###########################################################
13:39:05.532 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:05.532 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:05.532 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, F, C]
13:39:05.532 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:05.532 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:05.532 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:05.532 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:05.532 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.532 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.532 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.532 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.532 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.533 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.533 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:05.533 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:05.533 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:05.533 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : F
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:05.533 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:05.533 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:05.533 [main] [32mINFO [m  - ELSE - i" > Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:05.533 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : A
13:39:05.533 [main] [30mTRACE[m  - ###############################################
13:39:05.533 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.533 [main] [30mTRACE[m  - ###############################################
13:39:05.533 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.533 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.533 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.533 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.533 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.533 [main] [30mTRACE[m  - #############################################
13:39:05.533 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.534 [main] [30mTRACE[m  - #############################################

13:39:05.534 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:05.534 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:05.534 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:05.534 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:05.534 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:05.534 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:05.534 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:05.534 [main] [30mTRACE[m  - #########################################################
13:39:05.534 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:05.534 [main] [30mTRACE[m  - #########################################################

13:39:05.534 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:05.534 [main] [30mTRACE[m  - ###################################
13:39:05.534 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:05.534 [main] [30mTRACE[m  - ###################################

13:39:05.534 [main] [30mTRACE[m  - ###########################################################################################################
13:39:05.534 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:05.534 [main] [30mTRACE[m  - ###########################################################################################################
13:39:05.534 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:05.534 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:05.534 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:05.534 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  17
13:39:05.534 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, A, C]
13:39:05.535 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, A, C]
13:39:05.535 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 1, 1]
13:39:05.535 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 1, 1]
13:39:05.535 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:39:05.535 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:05.537 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:05.537 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:05.537 [main] [36mDEBUG[m  - ch_PreviousLetter :                           F
13:39:05.537 [main] [36mDEBUG[m  - ch_NewLetter :                                A
13:39:05.537 [main] [30mTRACE[m  - ###########################################################################################################
13:39:05.537 [main] [30mTRACE[m  - ###########################################################################################################
13:39:05.537 [main] [30mTRACE[m  - ###########################################################################################################

13:39:05.537 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:05.537 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFEAC
13:39:05.537 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFEAC
13:39:05.740 [main] [30mTRACE[m  - ####################################################
13:39:05.740 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:05.740 [main] [30mTRACE[m  - ####################################################
13:39:05.740 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.740 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:05.741 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:05.741 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, A, C]
13:39:05.741 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:05.741 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:05.741 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:05.741 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:05.741 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:05.741 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:05.741 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:05.741 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:05.741 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:05.741 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.741 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:05.741 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:05.741 [main] [30mTRACE[m  - ###############################################
13:39:05.741 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.741 [main] [30mTRACE[m  - ###############################################
13:39:05.741 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.741 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.741 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.742 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.742 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.742 [main] [30mTRACE[m  - #############################################
13:39:05.742 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.742 [main] [30mTRACE[m  - #############################################

13:39:05.742 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:05.742 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:05.742 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:05.742 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:05.742 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.742 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:05.742 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:05.742 [main] [30mTRACE[m  - ###############################################
13:39:05.742 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.742 [main] [30mTRACE[m  - ###############################################
13:39:05.742 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.742 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.742 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.742 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.742 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.742 [main] [30mTRACE[m  - #############################################
13:39:05.742 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.742 [main] [30mTRACE[m  - #############################################

13:39:05.742 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:05.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:05.743 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:05.743 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:05.743 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.743 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:05.743 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:05.743 [main] [30mTRACE[m  - ###############################################
13:39:05.743 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.743 [main] [30mTRACE[m  - ###############################################
13:39:05.743 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.743 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.744 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.744 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.744 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.744 [main] [30mTRACE[m  - #############################################
13:39:05.744 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.744 [main] [30mTRACE[m  - #############################################

13:39:05.744 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:05.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:05.744 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:05.744 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:05.744 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.744 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:05.744 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:05.744 [main] [30mTRACE[m  - ###############################################
13:39:05.744 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.744 [main] [30mTRACE[m  - ###############################################
13:39:05.744 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.745 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.745 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.745 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.745 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.745 [main] [30mTRACE[m  - #############################################
13:39:05.745 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.745 [main] [30mTRACE[m  - #############################################

13:39:05.745 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:05.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:05.745 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:05.745 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:05.745 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.745 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:05.745 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:05.745 [main] [30mTRACE[m  - ###############################################
13:39:05.745 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.745 [main] [30mTRACE[m  - ###############################################
13:39:05.745 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.745 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.745 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.745 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.745 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.746 [main] [30mTRACE[m  - #############################################
13:39:05.746 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.746 [main] [30mTRACE[m  - #############################################

13:39:05.746 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:05.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:05.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:05.746 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:05.746 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:05.746 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:05.746 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:05.746 [main] [30mTRACE[m  - ###############################################
13:39:05.746 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:05.746 [main] [30mTRACE[m  - ###############################################
13:39:05.746 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:05.746 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:05.746 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.746 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.746 [main] [36mDEBUG[m  - Index de la lettre
13:39:05.746 [main] [30mTRACE[m  - #############################################
13:39:05.746 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:05.746 [main] [30mTRACE[m  - #############################################

13:39:05.746 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:05.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:05.746 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:05.747 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:05.747 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:05.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:05.747 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:05.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:05.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:05.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:05.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:05.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:05.747 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:05.747 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:39:05.747 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:05.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:05.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:05.747 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:05.747 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:05.747 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:05.747 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:39:05.747 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:05.747 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:05.747 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 1]
13:39:05.747 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:05.748 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 1, 1]
13:39:05.748 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 1, 1]
13:39:05.748 [main] [30mTRACE[m  - ##################################################
13:39:05.748 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:05.748 [main] [30mTRACE[m  - ##################################################

13:39:05.748 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:06.560 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:06.560 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:06.560 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:06.560 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 18
13:39:06.560 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:06.761 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:06.761 [main] [30mTRACE[m  - ##############################################################
13:39:06.761 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:06.761 [main] [30mTRACE[m  - ##############################################################
13:39:06.761 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 1, 1]
13:39:06.761 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 1, 1]
13:39:06.761 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 1, 1]
13:39:06.761 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:39:06.761 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:39:06.762 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:39:06.762 [main] [32mINFO [m  - ELSE - Sinon ...
13:39:06.762 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:39:06.762 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:39:06.762 [main] [30mTRACE[m  - ############################################################
13:39:06.762 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:06.762 [main] [30mTRACE[m  - ############################################################

13:39:06.762 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:06.762 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:39:06.762 [main] [30mTRACE[m  - ##########################
13:39:06.762 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:06.762 [main] [30mTRACE[m  - ##########################

13:39:06.762 [main] [30mTRACE[m  - ############################
13:39:06.762 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:06.762 [main] [30mTRACE[m  - ############################
13:39:06.762 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:06.762 [main] [30mTRACE[m  - #####################################
13:39:06.763 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:06.763 [main] [30mTRACE[m  - #####################################
13:39:06.763 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:06.763 [main] [30mTRACE[m  - ###########################################################
13:39:06.763 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:06.763 [main] [30mTRACE[m  - ###########################################################
13:39:06.763 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:06.763 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:06.763 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, A, C]
13:39:06.763 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:06.763 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:06.763 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:06.763 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:06.763 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:06.763 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:06.764 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : A
13:39:06.764 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:06.764 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:06.764 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:06.764 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:06.764 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:06.764 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : B
13:39:06.764 [main] [30mTRACE[m  - ###############################################
13:39:06.764 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.764 [main] [30mTRACE[m  - ###############################################
13:39:06.764 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.764 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.764 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.764 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.764 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.764 [main] [30mTRACE[m  - #############################################
13:39:06.764 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.764 [main] [30mTRACE[m  - #############################################

13:39:06.764 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:06.764 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:06.764 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:06.764 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:06.764 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:06.765 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:06.765 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:06.765 [main] [30mTRACE[m  - #########################################################
13:39:06.765 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:06.765 [main] [30mTRACE[m  - #########################################################

13:39:06.765 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:06.765 [main] [30mTRACE[m  - ###################################
13:39:06.765 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:06.765 [main] [30mTRACE[m  - ###################################

13:39:06.765 [main] [30mTRACE[m  - ###########################################################################################################
13:39:06.765 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:06.765 [main] [30mTRACE[m  - ###########################################################################################################
13:39:06.765 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:06.765 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:06.765 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:06.765 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  18
13:39:06.765 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, B, C]
13:39:06.765 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, B, C]
13:39:06.765 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 1, 1]
13:39:06.765 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 1, 1]
13:39:06.765 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:39:06.765 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:06.768 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:06.768 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:06.768 [main] [36mDEBUG[m  - ch_PreviousLetter :                           A
13:39:06.768 [main] [36mDEBUG[m  - ch_NewLetter :                                B
13:39:06.768 [main] [30mTRACE[m  - ###########################################################################################################
13:39:06.768 [main] [30mTRACE[m  - ###########################################################################################################
13:39:06.768 [main] [30mTRACE[m  - ###########################################################################################################

13:39:06.768 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:06.768 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFEBC
13:39:06.768 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFEBC
13:39:06.970 [main] [30mTRACE[m  - ####################################################
13:39:06.970 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:06.970 [main] [30mTRACE[m  - ####################################################
13:39:06.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:06.970 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:06.970 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, B, C]
13:39:06.970 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:06.970 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:06.970 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:06.970 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:06.970 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:06.970 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:06.970 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:06.970 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:06.971 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:06.971 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.971 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:06.971 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:06.971 [main] [30mTRACE[m  - ###############################################
13:39:06.971 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.971 [main] [30mTRACE[m  - ###############################################
13:39:06.971 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.971 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.971 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.971 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.971 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.971 [main] [30mTRACE[m  - #############################################
13:39:06.971 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.971 [main] [30mTRACE[m  - #############################################

13:39:06.971 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:06.971 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:06.971 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:06.971 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:06.971 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.971 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:06.971 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:06.971 [main] [30mTRACE[m  - ###############################################
13:39:06.971 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.972 [main] [30mTRACE[m  - ###############################################
13:39:06.972 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.972 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.972 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.972 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.972 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.972 [main] [30mTRACE[m  - #############################################
13:39:06.972 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.972 [main] [30mTRACE[m  - #############################################

13:39:06.972 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:06.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:06.972 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:06.972 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:06.972 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.972 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:06.972 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:06.972 [main] [30mTRACE[m  - ###############################################
13:39:06.972 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.972 [main] [30mTRACE[m  - ###############################################
13:39:06.972 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.972 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.972 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.972 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.973 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.973 [main] [30mTRACE[m  - #############################################
13:39:06.973 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.973 [main] [30mTRACE[m  - #############################################

13:39:06.973 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:06.973 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:06.973 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:06.973 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:06.973 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.973 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:06.973 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:06.973 [main] [30mTRACE[m  - ###############################################
13:39:06.973 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.973 [main] [30mTRACE[m  - ###############################################
13:39:06.973 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.973 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.973 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.973 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.973 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.973 [main] [30mTRACE[m  - #############################################
13:39:06.973 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.973 [main] [30mTRACE[m  - #############################################

13:39:06.973 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:06.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:06.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:06.974 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:06.974 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.974 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:06.974 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:06.974 [main] [30mTRACE[m  - ###############################################
13:39:06.974 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.974 [main] [30mTRACE[m  - ###############################################
13:39:06.974 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.974 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.974 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.974 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.974 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.974 [main] [30mTRACE[m  - #############################################
13:39:06.974 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.974 [main] [30mTRACE[m  - #############################################

13:39:06.974 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:06.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:06.974 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:06.974 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:06.974 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:06.974 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:06.974 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:06.975 [main] [30mTRACE[m  - ###############################################
13:39:06.975 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:06.975 [main] [30mTRACE[m  - ###############################################
13:39:06.975 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:06.975 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:06.975 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.975 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.975 [main] [36mDEBUG[m  - Index de la lettre
13:39:06.975 [main] [30mTRACE[m  - #############################################
13:39:06.975 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:06.975 [main] [30mTRACE[m  - #############################################

13:39:06.975 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:06.975 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:06.975 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:06.975 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:06.975 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:06.975 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:06.975 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:06.975 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:06.975 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:06.975 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:06.975 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:06.975 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:06.975 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:06.976 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [6, 0, 1]
13:39:06.976 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:06.976 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:06.976 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:06.976 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:06.976 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e dans la proposition de l'ordinateur = Lettre s√©lectionn√©e dans la combinaison secr√®te && unit√©s √† cette posiition de la combinaison secr√®te n'a pas encore √©t√© v√©rifi√©e
13:39:06.976 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:06.976 [main] [36mDEBUG[m  - array_ch_Combination[j] : C
13:39:06.976 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:06.976 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = La lettre contenue dans l'uniti√© s√©lectionn√©e des lettres choisies pour le "Mastermind"
13:39:06.976 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : [1, 1, 3, 0, 1, 1]
13:39:06.976 [main] [32mINFO [m  - IF - Le nombre de le lettre s√©lectionn√©e dans la proposition de l'ordianteur <= Nombre de la lettre s√©lectionn√©e dans la combinaison secr√®te
13:39:06.976 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre pr√©sente mais mal plac√©e) : [6, 1, 1]
13:39:06.976 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [6, 1, 1]
13:39:06.976 [main] [30mTRACE[m  - ##################################################
13:39:06.976 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:06.976 [main] [30mTRACE[m  - ##################################################

13:39:06.976 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:07.782 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:07.783 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:07.783 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:07.783 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 19
13:39:07.783 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:07.988 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:07.988 [main] [30mTRACE[m  - ##############################################################
13:39:07.988 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:07.988 [main] [30mTRACE[m  - ##############################################################
13:39:07.988 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 1, 1]
13:39:07.988 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [6, 1, 1]
13:39:07.989 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [6, 1, 1]
13:39:07.989 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 0
13:39:07.989 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : 0
13:39:07.989 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:39:07.989 [main] [32mINFO [m  - ELSE - Sinon ...
13:39:07.989 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [-, -]
13:39:07.989 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [-, -]
13:39:07.989 [main] [30mTRACE[m  - ############################################################
13:39:07.989 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:07.989 [main] [30mTRACE[m  - ############################################################

13:39:07.989 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:07.989 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [-, -]
13:39:07.989 [main] [30mTRACE[m  - ##########################
13:39:07.989 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:07.989 [main] [30mTRACE[m  - ##########################

13:39:07.989 [main] [30mTRACE[m  - ############################
13:39:07.989 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:07.989 [main] [30mTRACE[m  - ############################
13:39:07.989 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:07.989 [main] [30mTRACE[m  - #####################################
13:39:07.989 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:07.989 [main] [30mTRACE[m  - #####################################
13:39:07.989 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:07.990 [main] [30mTRACE[m  - ###########################################################
13:39:07.990 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:07.990 [main] [30mTRACE[m  - ###########################################################
13:39:07.990 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:07.990 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:07.990 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, B, C]
13:39:07.990 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, false, false]
13:39:07.990 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:07.990 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:07.990 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:07.990 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:07.990 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 6
13:39:07.990 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : B
13:39:07.990 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:07.990 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:07.990 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:07.990 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:07.991 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:07.991 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:07.991 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : C
13:39:07.991 [main] [30mTRACE[m  - ###############################################
13:39:07.991 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:07.991 [main] [30mTRACE[m  - ###############################################
13:39:07.991 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:07.991 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:07.991 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:07.991 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:07.991 [main] [36mDEBUG[m  - Index de la lettre
13:39:07.991 [main] [30mTRACE[m  - #############################################
13:39:07.991 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:07.991 [main] [30mTRACE[m  - #############################################

13:39:07.991 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:07.991 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:07.991 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:07.991 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:07.991 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:07.991 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:07.992 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:07.992 [main] [30mTRACE[m  - #########################################################
13:39:07.992 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:07.992 [main] [30mTRACE[m  - #########################################################

13:39:07.992 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:07.992 [main] [30mTRACE[m  - ###################################
13:39:07.992 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:07.992 [main] [30mTRACE[m  - ###################################

13:39:07.992 [main] [30mTRACE[m  - ###########################################################################################################
13:39:07.992 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:07.992 [main] [30mTRACE[m  - ###########################################################################################################
13:39:07.992 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:07.992 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:07.992 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:07.992 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  19
13:39:07.992 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, C, C]
13:39:07.992 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, C, C]
13:39:07.992 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 1, 1]
13:39:07.992 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [6, 1, 1]
13:39:07.992 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [-, -]
13:39:07.992 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:07.995 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, false, false]
13:39:07.995 [main] [36mDEBUG[m  - int_ReplacementPosition :                     6
13:39:07.995 [main] [36mDEBUG[m  - ch_PreviousLetter :                           B
13:39:07.996 [main] [36mDEBUG[m  - ch_NewLetter :                                C
13:39:07.996 [main] [30mTRACE[m  - ###########################################################################################################
13:39:07.996 [main] [30mTRACE[m  - ###########################################################################################################
13:39:07.996 [main] [30mTRACE[m  - ###########################################################################################################

13:39:07.997 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:07.997 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFECC
13:39:07.997 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFECC
13:39:08.200 [main] [30mTRACE[m  - ####################################################
13:39:08.200 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:08.200 [main] [30mTRACE[m  - ####################################################
13:39:08.200 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.201 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:08.201 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:08.201 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:08.201 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:08.201 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:08.201 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:08.201 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, false, false]
13:39:08.201 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:08.201 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:08.201 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:08.201 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:08.201 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:08.201 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.201 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:08.201 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:08.201 [main] [30mTRACE[m  - ###############################################
13:39:08.201 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.201 [main] [30mTRACE[m  - ###############################################
13:39:08.202 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.202 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.202 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.202 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.202 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.202 [main] [30mTRACE[m  - #############################################
13:39:08.202 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.202 [main] [30mTRACE[m  - #############################################

13:39:08.202 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:08.202 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:08.202 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:08.202 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:08.202 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.202 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:08.202 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:08.202 [main] [30mTRACE[m  - ###############################################
13:39:08.202 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.202 [main] [30mTRACE[m  - ###############################################
13:39:08.202 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.202 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.202 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.202 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.202 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.202 [main] [30mTRACE[m  - #############################################
13:39:08.202 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.203 [main] [30mTRACE[m  - #############################################

13:39:08.203 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:08.203 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:08.203 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:08.203 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:08.203 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.203 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:08.203 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:08.203 [main] [30mTRACE[m  - ###############################################
13:39:08.203 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.203 [main] [30mTRACE[m  - ###############################################
13:39:08.203 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.203 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.203 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.203 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.203 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.203 [main] [30mTRACE[m  - #############################################
13:39:08.203 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.203 [main] [30mTRACE[m  - #############################################

13:39:08.203 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:08.203 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:08.203 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:08.203 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:08.203 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.203 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:08.203 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:08.204 [main] [30mTRACE[m  - ###############################################
13:39:08.204 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.204 [main] [30mTRACE[m  - ###############################################
13:39:08.204 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.204 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.204 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.204 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.204 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.204 [main] [30mTRACE[m  - #############################################
13:39:08.204 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.204 [main] [30mTRACE[m  - #############################################

13:39:08.204 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:08.204 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:08.204 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:08.204 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:08.204 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.204 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:08.204 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:08.204 [main] [30mTRACE[m  - ###############################################
13:39:08.204 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.204 [main] [30mTRACE[m  - ###############################################
13:39:08.204 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.204 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.204 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.204 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.204 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.204 [main] [30mTRACE[m  - #############################################
13:39:08.204 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.205 [main] [30mTRACE[m  - #############################################

13:39:08.205 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:08.205 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:08.205 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:08.205 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:08.205 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:08.205 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:08.205 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:08.205 [main] [30mTRACE[m  - ###############################################
13:39:08.205 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.205 [main] [30mTRACE[m  - ###############################################
13:39:08.205 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.205 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.205 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.205 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.205 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.205 [main] [30mTRACE[m  - #############################################
13:39:08.205 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.205 [main] [30mTRACE[m  - #############################################

13:39:08.205 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:08.205 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:08.205 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:08.205 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:08.205 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:08.205 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:08.205 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:39:08.205 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [7, 0, 0]
13:39:08.206 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : C
13:39:08.206 [main] [30mTRACE[m  - ###############################################
13:39:08.206 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:08.206 [main] [30mTRACE[m  - ###############################################
13:39:08.206 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:08.206 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:08.206 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.206 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:08.206 [main] [36mDEBUG[m  - Index de la lettre
13:39:08.206 [main] [30mTRACE[m  - #############################################
13:39:08.206 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:08.206 [main] [30mTRACE[m  - #############################################

13:39:08.206 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 2
13:39:08.206 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:08.206 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:08.206 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 1, 1]
13:39:08.206 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:08.206 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:08.206 [main] [32mINFO [m  - IF - L'unit√© s√©lectionn√©e n'est pas encore v√©rifi√©e dans la proposition de l'ordinateur
13:39:08.206 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:08.206 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:08.206 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:08.206 [main] [32mINFO [m  - IF - Toutes les unit√©s v√©rifi√©es
13:39:08.206 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (Lettre non pr√©sente) : [7, 0, 1]
13:39:08.206 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [7, 0, 1]
13:39:08.206 [main] [30mTRACE[m  - ##################################################
13:39:08.206 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:08.206 [main] [30mTRACE[m  - ##################################################

13:39:08.206 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:09.019 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:09.019 [main] [32mINFO [m  - ELSE - Affiche le nombre de chances restantes
13:39:09.019 [main] [32mINFO [m  - R√©cup√©ration (int) Nombre de tours restants
13:39:09.019 [main] [36mDEBUG[m  - Incr√©mentation += 1 Compteur de tours : 20
13:39:09.019 [main] [32mINFO [m  - Injection (int) Compteur de tours
13:39:09.222 [main] [32mINFO [m  - IF - Apr√®s premier tour
13:39:09.222 [main] [30mTRACE[m  - ##############################################################
13:39:09.222 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:09.222 [main] [30mTRACE[m  - ##############################################################
13:39:09.222 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Comparaison pr√©c√©dente : [6, 1, 1]
13:39:09.222 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nouvelle comparaison : [7, 0, 1]
13:39:09.222 [main] [36mDEBUG[m  - Initialisation (char[]) Comparaison des comparaisons : [7, 0, 1]
13:39:09.222 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres bien plac√©es : 1
13:39:09.223 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres pr√©sentes mais mal plac√©es : -1
13:39:09.223 [main] [36mDEBUG[m  - Calcule de la diff√©rence de lettres non pr√©sentes : 0
13:39:09.223 [main] [32mINFO [m  - ELSE IF - Plus une lettre bien plac√©e / Moins une lettre pr√©sente mais √† la mauvaise place
13:39:09.223 [main] [36mDEBUG[m  - M√†J - (char[]) Comparaison des comparaisons : [=, ‚â†]
13:39:09.223 [main] [36mDEBUG[m  - Injection (char[]) Comparaison des comparaisons] : [=, ‚â†]
13:39:09.223 [main] [30mTRACE[m  - ############################################################
13:39:09.223 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_ComparisonOfComparisonResults()
13:39:09.223 [main] [30mTRACE[m  - ############################################################

13:39:09.223 [main] [32mINFO [m  - Lancement de la comparaison des comparaisons
13:39:09.223 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Comparaison des comparaisons : [=, ‚â†]
13:39:09.223 [main] [32mINFO [m  - IF - "=" appara√Æt
13:39:09.223 [main] [30mTRACE[m  - ##############################################
13:39:09.223 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_PositiveEquality()
13:39:09.223 [main] [30mTRACE[m  - ##############################################
13:39:09.223 [main] [32mINFO [m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind"
13:39:09.223 [main] [32mINFO [m  - array_int_PreviousComputerProposal <- array_int_NewComputerProposal
13:39:09.223 [main] [32mINFO [m  - R√©cup√©ration (char[][]) Analyse de la d√©fense
13:39:09.223 [main] [32mINFO [m  - R√©cup√©ration (int) Position de remplacemente
13:39:09.223 [main] [32mINFO [m  - R√©cup√©ration (char) Nouvelle lettre
13:39:09.223 [main] [30mTRACE[m  - ###############################################
13:39:09.223 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.223 [main] [30mTRACE[m  - ###############################################
13:39:09.223 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.224 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.224 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.224 [main] [30mTRACE[m  - #############################################
13:39:09.224 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.224 [main] [30mTRACE[m  - #############################################

13:39:09.224 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:09.224 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:09.224 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - La lettre est pr√©sente √† cette position = 'NOUVELLE LETTRE'
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:09.224 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:09.224 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:09.224 [main] [32mINFO [m  - FOR - Pour chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.224 [main] [32mINFO [m  - IF - 'i' != Index nouvelle lettre
13:39:09.225 [main] [32mINFO [m  - La lettre n'est pr√©sente √† cette position = '‚Ä†'
13:39:09.225 [main] [32mINFO [m  - M√†J - (char[]) Analyse de la d√©fense
13:39:09.225 [main] [32mINFO [m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es
13:39:09.225 [main] [36mDEBUG[m  - M√†J - (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, true, false]
13:39:09.225 [main] [32mINFO [m  - Injection - (boolean[]) Lettres de la combinaison trouv√©es
13:39:09.225 [main] [30mTRACE[m  - ############################################
13:39:09.225 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_PositiveEquality()
13:39:09.225 [main] [30mTRACE[m  - ############################################

13:39:09.225 [main] [32mINFO [m  - Lancement √©galit√© positive
13:39:09.225 [main] [30mTRACE[m  - ##########################
13:39:09.225 [main] [30mTRACE[m  - <<< END >>> Mode "D√©fense"
13:39:09.225 [main] [30mTRACE[m  - ##########################

13:39:09.225 [main] [30mTRACE[m  - ############################
13:39:09.225 [main] [30mTRACE[m  - <<< START >>> Mode "D√©fense"
13:39:09.225 [main] [30mTRACE[m  - ############################
13:39:09.225 [main] [32mINFO [m  - IF - Mode "Duel"
13:39:09.225 [main] [30mTRACE[m  - #####################################
13:39:09.225 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_Defense()
13:39:09.225 [main] [30mTRACE[m  - #####################################
13:39:09.225 [main] [30mTRACE[m  - IF - Apr√©s deuxi√®me tour
13:39:09.225 [main] [30mTRACE[m  - ###########################################################
13:39:09.225 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:09.225 [main] [30mTRACE[m  - ###########################################################
13:39:09.225 [main] [36mDEBUG[m  - R√©cup√©ration (char) Lettres s√©lectionn√©es pour le jeu : [A, B, C, D, E, F]
13:39:09.225 [main] [32mINFO [m  - array_ch_PreviousComputerProposal <- array_ch_NewComputerProposal
13:39:09.226 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, C]
13:39:09.226 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) Lettres de la combinaison trouv√©es : [true, true, true, true, true, true, true, false]
13:39:09.226 [main] [36mDEBUG[m  - Initialisation (int) Position de remplacement : 0
13:39:09.226 [main] [32mINFO [m  - Initialisation (char) Lettre pr√©c√©dente
13:39:09.226 [main] [32mINFO [m  - Initialisation (char) Nouvelle lettre
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - FOR - Pour chaque unit√© du tableau des lettres trouv√©es
13:39:09.226 [main] [32mINFO [m  - IF - Si la lettre n'a pas encore √©t√© encore trouv√©e √† cette position
13:39:09.226 [main] [36mDEBUG[m  - M√†J - (int) Position de remplacement : 7
13:39:09.226 [main] [36mDEBUG[m  -  M√†J - (char) La lettre s√©lectionn√©es dans la combinaison, devient la lettre pr√©c√©dente : C
13:39:09.226 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:09.226 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:09.226 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le jeu
13:39:09.226 [main] [32mINFO [m  - IF - La lettre pr√©c√©dente = lettre s√©lectionn√©e pour le jeu
13:39:09.226 [main] [32mINFO [m  - R√©cup√©ration (char[]) Analyse de la d√©fense
13:39:09.226 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre : 0
13:39:09.226 [main] [32mINFO [m  - IF - "i" < Que le nombre de lettres s√©lectionn√©es pour le "Mastermind"
13:39:09.226 [main] [36mDEBUG[m  - M√†J - (char) Lettre s√©lectionn√©e : D
13:39:09.227 [main] [30mTRACE[m  - ###############################################
13:39:09.227 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.227 [main] [30mTRACE[m  - ###############################################
13:39:09.227 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.227 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.227 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.227 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.227 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.227 [main] [30mTRACE[m  - #############################################
13:39:09.227 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.227 [main] [30mTRACE[m  - #############################################

13:39:09.227 [main] [32mINFO [m  - Lancement index de la nouvelle lettre
13:39:09.227 [main] [32mINFO [m  - IF - Si la lettre s√©lectionn√©e n'a pas encore √©t√© v√©rifi√©e
13:39:09.227 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle lettre dans la nouvelle combinaison de l'ordinateur
13:39:09.227 [main] [32mINFO [m  - M√†J - (char[]) Nouvelle proposition de l'ordinateur
13:39:09.227 [main] [32mINFO [m  - M√†J - (int) Position de remplacement
13:39:09.227 [main] [32mINFO [m  - M√†J - (char) Lettre pr√©c√©dente
13:39:09.227 [main] [32mINFO [m  -  M√†J - (char) Nouvelle lettre
13:39:09.227 [main] [30mTRACE[m  - #########################################################
13:39:09.227 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_al_SecondTypeComputerProposal()
13:39:09.227 [main] [30mTRACE[m  - #########################################################

13:39:09.227 [main] [32mINFO [m  - Lancement deuxi√®me type de proposition de l'ordinateur
13:39:09.227 [main] [30mTRACE[m  - ###################################
13:39:09.227 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_Defense()
13:39:09.228 [main] [30mTRACE[m  - ###################################

13:39:09.228 [main] [30mTRACE[m  - ###########################################################################################################
13:39:09.228 [main] [30mTRACE[m  - ########################################## AL_MASTERMIND_DEFENSE ##########################################
13:39:09.228 [main] [30mTRACE[m  - ###########################################################################################################
13:39:09.228 [main] [36mDEBUG[m  - array_ch_SelectedLetters[] :                  [A, B, C, D, E, F]
13:39:09.228 [main] [36mDEBUG[m  - array_ch_Combination[] :                      [C, B, C, A, F, E, C, D]
13:39:09.228 [main] [36mDEBUG[m  - array_int_NumberOfEachLettersInCombinason[] : [1, 1, 3, 1, 1, 1]
13:39:09.228 [main] [36mDEBUG[m  - int_NumberOfChancesCounter :                  20
13:39:09.228 [main] [36mDEBUG[m  - array_ch_PreviousComputerProposal[] :         [C, B, C, A, F, E, C, D]
13:39:09.228 [main] [36mDEBUG[m  - array_ch_NewComputerProposal[] :              [C, B, C, A, F, E, C, D]
13:39:09.228 [main] [36mDEBUG[m  - array_int_PreviousComparisonResult[] :        [6, 1, 1]
13:39:09.228 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] :             [7, 0, 1]
13:39:09.228 [main] [36mDEBUG[m  - array_ch_ComparisonOfComparisonResults[] :    [=, ‚â†]
13:39:09.228 [main] [36mDEBUG[m  - array_ch_DefenseAnalysis[][]

13:39:09.230 [main] [36mDEBUG[m  - array_boo_FoundLetters[] :                    [true, true, true, true, true, true, true, false]
13:39:09.230 [main] [36mDEBUG[m  - int_ReplacementPosition :                     7
13:39:09.230 [main] [36mDEBUG[m  - ch_PreviousLetter :                           C
13:39:09.230 [main] [36mDEBUG[m  - ch_NewLetter :                                D
13:39:09.230 [main] [30mTRACE[m  - ###########################################################################################################
13:39:09.230 [main] [30mTRACE[m  - ###########################################################################################################
13:39:09.230 [main] [30mTRACE[m  - ###########################################################################################################

13:39:09.231 [main] [32mINFO [m  - R√©cup√©ration (char[]) Nouvelle proposition de l'ordinateur
13:39:09.231 [main] [36mDEBUG[m  - Incr√©mentation String() : CBCAFECD
13:39:09.231 [main] [36mDEBUG[m  - Conversion (String) Proposition de l'ordinateur : CBCAFECD
13:39:09.431 [main] [30mTRACE[m  - ####################################################
13:39:09.431 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_al_NewComparisonResult()
13:39:09.432 [main] [30mTRACE[m  - ####################################################
13:39:09.432 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©es pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.432 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Combinaison secr√®te : [C, B, C, A, F, E, C, D]
13:39:09.432 [main] [36mDEBUG[m  - R√©cup√©ration (int[]) Nombre de chaque lettre dans la combinaison : [1, 1, 3, 1, 1, 1]
13:39:09.432 [main] [36mDEBUG[m  - R√©cup√©ration (char[])  Nouvelle proposition de l'ordinateur : [C, B, C, A, F, E, C, D]
13:39:09.432 [main] [32mINFO [m  - array_int_PreviousComparisonResult <- array_int_NewCoparisonResult
13:39:09.432 [main] [36mDEBUG[m  - IInitilisation (int[]) Nouvelle comparaison : [0, 0, 0]
13:39:09.432 [main] [32mINFO [m  - Injection (int[]) Nouvelle comparaison
13:39:09.432 [main] [36mDEBUG[m  - R√©cup√©ration (boolean[]) lettres trouv√©es : [true, true, true, true, true, true, true, false]
13:39:09.432 [main] [36mDEBUG[m  - Initialisation (int[]) Compteur de lettres dans la combinaison secr√®te : [0, 0, 0, 0, 0, 0]
13:39:09.432 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la proposition de l'ordinateur d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:09.432 [main] [36mDEBUG[m  - Initialisation (boolean[]) Unit√©s de la combinaison secr√®te d√©j√† v√©rifi√©es : [false, false, false, false, false, false, false, false]
13:39:09.432 [main] [30mTRACE[m  - <<< 1st Part >>> M√©thode : run_al_NewComparisonResult() : Lettres d√©j√† trouv√©es
13:39:09.432 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:09.432 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.432 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [1, 0, 0]
13:39:09.432 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:09.433 [main] [30mTRACE[m  - ###############################################
13:39:09.433 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.433 [main] [30mTRACE[m  - ###############################################
13:39:09.433 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.433 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.433 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.433 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.433 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.433 [main] [30mTRACE[m  - #############################################
13:39:09.433 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.433 [main] [30mTRACE[m  - #############################################

13:39:09.433 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:09.433 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:09.433 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, false, false, false, false, false, false, false]
13:39:09.433 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 0, 1, 0, 0, 0]
13:39:09.433 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.434 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [2, 0, 0]
13:39:09.434 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : B
13:39:09.434 [main] [30mTRACE[m  - ###############################################
13:39:09.434 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.434 [main] [30mTRACE[m  - ###############################################
13:39:09.434 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.434 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.434 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.434 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.434 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.434 [main] [30mTRACE[m  - #############################################
13:39:09.434 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.434 [main] [30mTRACE[m  - #############################################

13:39:09.434 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 1
13:39:09.434 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:09.434 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, false, false, false, false, false, false]
13:39:09.434 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 1, 0, 0, 0]
13:39:09.435 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.435 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [3, 0, 0]
13:39:09.435 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:09.435 [main] [30mTRACE[m  - ###############################################
13:39:09.435 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.435 [main] [30mTRACE[m  - ###############################################
13:39:09.435 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.435 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.435 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.435 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.435 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.435 [main] [30mTRACE[m  - #############################################
13:39:09.435 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.435 [main] [30mTRACE[m  - #############################################

13:39:09.435 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:09.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:09.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, false, false, false, false, false]
13:39:09.436 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [0, 1, 2, 0, 0, 0]
13:39:09.436 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.436 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [4, 0, 0]
13:39:09.436 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : A
13:39:09.436 [main] [30mTRACE[m  - ###############################################
13:39:09.436 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.436 [main] [30mTRACE[m  - ###############################################
13:39:09.436 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.436 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.436 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.436 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.436 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.436 [main] [30mTRACE[m  - #############################################
13:39:09.436 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.436 [main] [30mTRACE[m  - #############################################

13:39:09.436 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 0
13:39:09.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:09.436 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, false, false, false, false]
13:39:09.436 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 0]
13:39:09.437 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.437 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [5, 0, 0]
13:39:09.437 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : F
13:39:09.437 [main] [30mTRACE[m  - ###############################################
13:39:09.437 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.437 [main] [30mTRACE[m  - ###############################################
13:39:09.437 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.437 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.437 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.437 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.437 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.437 [main] [30mTRACE[m  - #############################################
13:39:09.437 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.437 [main] [30mTRACE[m  - #############################################

13:39:09.437 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 5
13:39:09.437 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:09.437 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, false, false, false]
13:39:09.437 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 0, 1]
13:39:09.437 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.437 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [6, 0, 0]
13:39:09.437 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : E
13:39:09.437 [main] [30mTRACE[m  - ###############################################
13:39:09.437 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.438 [main] [30mTRACE[m  - ###############################################
13:39:09.438 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.438 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.438 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.438 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.438 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.438 [main] [30mTRACE[m  - #############################################
13:39:09.438 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.438 [main] [30mTRACE[m  - #############################################

13:39:09.438 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 4
13:39:09.438 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:09.438 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, false, false]
13:39:09.438 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 2, 0, 1, 1]
13:39:09.438 [main] [32mINFO [m  - IF - La lettre est d√©j√† trouv√©e √† cette position
13:39:09.438 [main] [36mDEBUG[m  - Incr√©mentation += 1 Nouvelle comparaison (lettre bien plac√©e) : [7, 0, 0]
13:39:09.438 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e : C
13:39:09.438 [main] [30mTRACE[m  - ###############################################
13:39:09.438 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.438 [main] [30mTRACE[m  - ###############################################
13:39:09.439 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.439 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.439 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.439 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.439 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.439 [main] [30mTRACE[m  - #############################################
13:39:09.439 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.439 [main] [30mTRACE[m  - #############################################

13:39:09.439 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©e : 2
13:39:09.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:09.439 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, false]
13:39:09.439 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 0, 1, 1]
13:39:09.439 [main] [30mTRACE[m  - <<< 2nd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres bien plac√©es mais pas trouv√©es
13:39:09.439 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:09.439 [main] [32mINFO [m  - IF - L'unit√© contient la bonne lettre √† cette position && La lettre n'est pas encore trouv√©e
13:39:09.439 [main] [36mDEBUG[m  - Incr√©mentation (int[]) R√©sultat de la comparaison (lettre bien plac√©e) : [8, 0, 0]
13:39:09.439 [main] [36mDEBUG[m  - Initialisation (char) Lettre s√©lectionn√©e (lettre bien plac√©e) : D
13:39:09.439 [main] [30mTRACE[m  - ###############################################
13:39:09.439 [main] [30mTRACE[m  - <<< START >>> M√©thode : run_int_IndexOfLetter()
13:39:09.439 [main] [30mTRACE[m  - ###############################################
13:39:09.439 [main] [36mDEBUG[m  - Initialisation (int) Index de la lettre s√©lectionn√©e
13:39:09.439 [main] [36mDEBUG[m  - R√©cup√©ration (char[]) Lettres s√©lectionn√©e pour le "Mastermind" : [A, B, C, D, E, F]
13:39:09.439 [main] [32mINFO [m  - FOR - Chaque lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.439 [main] [32mINFO [m  - IF - Lettre s√©lectionn√©e = Lettre s√©lectionn√©e pour le "Mastermind"
13:39:09.439 [main] [36mDEBUG[m  - Index de la lettre
13:39:09.439 [main] [30mTRACE[m  - #############################################
13:39:09.439 [main] [30mTRACE[m  - <<< END >>> M√©thode : run_int_IndexOfLetter()
13:39:09.439 [main] [30mTRACE[m  - #############################################

13:39:09.439 [main] [36mDEBUG[m  - D√©finition (int) Index de la lettre s√©lectionn√©ee : 3
13:39:09.440 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la proposition de l'ordinateur d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:09.440 [main] [36mDEBUG[m  - M√†J - (boolean[]) Unit√© de la combinaison secr√®te d√©j√† v√©rifi√©e : [true, true, true, true, true, true, true, true]
13:39:09.440 [main] [36mDEBUG[m  - Incr√©mentation (int[]) Compteur de lettres : [1, 1, 3, 1, 1, 1]
13:39:09.440 [main] [30mTRACE[m  - <<< 3rd Part >>> M√©thode : run_al_NewComparisonResult() : Lettres mal plac√©es et absentess
13:39:09.440 [main] [32mINFO [m  - FOR - Chaque unit√©
13:39:09.440 [main] [36mDEBUG[m  - array_int_NewComparisonResult[] : [8, 0, 0]
13:39:09.440 [main] [30mTRACE[m  - ##################################################
13:39:09.440 [main] [30mTRACE[m  - <<< End >>> M√©thode : run_al_NewComparisonResult()
13:39:09.440 [main] [30mTRACE[m  - ##################################################

13:39:09.440 [main] [32mINFO [m  - Lancement de la comparaison entre la proposition de l'ordinateur et la combinaison secr√®te
13:39:10.252 [main] [32mINFO [m  - Injection (int[]) Nouvelle Comparaison
13:39:10.252 [main] [32mINFO [m  - SI - Mode "D√©fense"
13:39:12.287 [main] [36mDEBUG[m  - M√†J - (boolean) Partie gagn√©e
13:39:12.287 [main] [30mTRACE[m  - ##########################
13:39:12.288 [main] [30mTRACE[m  - ### END ### Mode "D√©fense"
13:39:12.288 [main] [30mTRACE[m  - ##########################
13:39:12.288 [main] [32mINFO [m  - Lancement du jeu "Mastermind"
13:39:12.288 [main] [30mTRACE[m  - ####################################################################
13:39:12.288 [main] [30mTRACE[m  - <<< 5th Part >>> M√©thode : game_Launcher() : Voulez-vous continuer ?
13:39:12.288 [main] [30mTRACE[m  - ####################################################################
13:39:12.694 [main] [36mDEBUG[m  - Initialisation (boolean) si le scanner est vide : true
13:39:12.694 [main] [32mINFO [m  - DO {} WHILE - Si le scanner est vide
13:39:12.694 [main] [36mDEBUG[m  - M√†J - (boolean) Scanner vide : false
13:40:51.051 [main] [32mINFO [m  - R√©cup√©ration (String) contenu du scanner
13:40:51.053 [main] [32mINFO [m  - SWITCH - (String) Valeur du menu
